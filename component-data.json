{
  "components": {
    "accordion": {
      "id": "accordion",
      "name": "Accordion",
      "path": "Accordion",
      "dependencies": [
        "framer-motion",
        "lucide-react"
      ],
      "utils": [
        "cn"
      ],
      "files": {
        "javascript": [
          {
            "filename": "Accordion.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Accordion/Accordion.jsx",
            "content": "'use client'\n\nimport { useState } from 'react'\nimport { cn } from '../../utils/cn'\nimport { AccordionProvider } from './AccordionContext'\n\nexport const Accordion = ({\n  children,\n  iconEnabled = true,\n  iconPosition = 'right',\n  iconClassName = '',\n  activeItem,\n  activeIconClassName = '',\n  activeIcon,\n  inactiveIcon,\n  multiple = false,\n  className = '',\n  labelClassName = '',\n  activeLabelClassName = '',\n  headerClassName = '',\n  activeHeaderClassName = '',\n  contentClassName = '',\n  ...rest\n}) => {\n  const [openItems, setOpenItems] = useState(activeItem ?? [])\n\n  const toggleItem = itemId => {\n    setOpenItems(prev => {\n      if (prev.includes(itemId)) {\n        return prev.filter(id => id !== itemId)\n      } else {\n        return multiple ? [...prev, itemId] : [itemId]\n      }\n    })\n  }\n\n  return (\n    <AccordionProvider\n      value={{\n        openItems,\n        toggleItem,\n        iconEnabled,\n        iconPosition,\n        iconClassName,\n        activeIconClassName,\n        activeIcon,\n        inactiveIcon,\n        labelClassName,\n        activeLabelClassName,\n        headerClassName,\n        activeHeaderClassName,\n        contentClassName\n      }}\n    >\n      <div className={cn('space-y-2', className)} {...rest}>\n        {children}\n      </div>\n    </AccordionProvider>\n  )\n}\n",
            "success": true,
            "size": 1304
          },
          {
            "filename": "AccordionContent.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Accordion/AccordionContent.jsx",
            "content": "'use client'\n\nimport { AnimatePresence, motion } from 'framer-motion'\nimport { cn } from '../../utils/cn'\nimport { useAccordion } from './AccordionContext'\n\nexport const AccordionContent = ({\n  children,\n  isOpen,\n  className = '',\n  ...rest\n}) => {\n  const { contentClassName: accordionContentClassName } = useAccordion()\n\n  return (\n    <AnimatePresence initial={false}>\n      {isOpen && (\n        <motion.div\n          initial='collapsed'\n          animate='open'\n          exit='collapsed'\n          variants={{\n            open: { opacity: 1, height: 'auto' },\n            collapsed: { opacity: 0, height: 0 }\n          }}\n          transition={{ duration: 0.3, ease: [0.04, 0.62, 0.23, 0.98] }}\n        >\n          <div\n            className={cn(\n              'border-border bg-bg overflow-hidden border-t p-4 text-sm',\n              accordionContentClassName,\n              className\n            )}\n            {...rest}\n          >\n            {children}\n          </div>\n        </motion.div>\n      )}\n    </AnimatePresence>\n  )\n}\n",
            "success": true,
            "size": 1041
          },
          {
            "filename": "AccordionItem.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Accordion/AccordionItem.jsx",
            "content": "'use client'\n\nimport React, { cloneElement, isValidElement } from 'react'\nimport { cn } from '../../utils/cn'\nimport { useAccordion } from './AccordionContext'\n\nexport const AccordionItem = ({\n  children,\n  id,\n  disabled = false,\n  className = '',\n  ...rest\n}) => {\n  const { openItems, toggleItem } = useAccordion()\n  const isOpen = openItems.includes(id)\n\n  return (\n    <div\n      className={cn(\n        'border-border overflow-hidden rounded-md border',\n        disabled ? 'opacity-50' : '',\n        className\n      )}\n      {...rest}\n    >\n      {React.Children.map(children, child => {\n        if (isValidElement(child)) {\n          const childProps = {\n            isOpen,\n            onToggle: disabled ? undefined : () => toggleItem(id),\n            disabled\n          }\n          return cloneElement(child, childProps)\n        }\n        return child\n      })}\n    </div>\n  )\n}\n",
            "success": true,
            "size": 888
          },
          {
            "filename": "AccordionHeader.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Accordion/AccordionHeader.jsx",
            "content": "'use client'\n\nimport { ChevronDown, ChevronUp } from 'lucide-react'\nimport { cn } from '../../utils/cn'\nimport { useAccordion } from './AccordionContext'\n\nexport const AccordionHeader = ({\n  children,\n  isOpen,\n  onToggle,\n  className = '',\n  iconEnabled: headerIconEnabled,\n  iconPosition: headerIconPosition,\n  iconClassName: headerIconClassName,\n  activeIconClassName: headerActiveIconClassName,\n  activeIcon: headerActiveIcon,\n  inactiveIcon: headerInactiveIcon,\n  labelClassName: headerLabelClassName,\n  activeLabelClassName: headerActiveLabelClassName,\n  headerClassName: headerHeaderClassName,\n  activeHeaderClassName: headerActiveHeaderClassName,\n  disabled = false,\n  tagName = 'h2',\n  ...rest\n}) => {\n  const {\n    iconEnabled: accordionIconEnabled,\n    iconPosition: accordionIconPosition,\n    iconClassName: accordionIconClassName,\n    activeIconClassName: accordionActiveIconClassName,\n    activeIcon: accordionActiveIcon,\n    inactiveIcon: accordionInactiveIcon,\n    labelClassName: accordionLabelClassName,\n    activeLabelClassName: accordionActiveLabelClassName,\n    headerClassName: accordionHeaderClassName,\n    activeHeaderClassName: accordionActiveHeaderClassName\n  } = useAccordion()\n  const TagName = tagName\n  const iconEnabled = headerIconEnabled ?? accordionIconEnabled\n  const iconPosition = headerIconPosition ?? accordionIconPosition\n  const iconClassName = headerIconClassName ?? accordionIconClassName\n  const activeIconClassName =\n    headerActiveIconClassName ?? accordionActiveIconClassName\n  const activeIcon = headerActiveIcon ?? accordionActiveIcon ?? <ChevronUp />\n  const inactiveIcon = headerInactiveIcon ?? accordionInactiveIcon ?? (\n    <ChevronDown />\n  )\n\n  const icon = isOpen ? activeIcon : inactiveIcon\n  const iconClass = cn(\n    iconClassName,\n    isOpen ? activeIconClassName : '',\n    'transition-transform duration-300'\n  )\n\n  const labelClassName = headerLabelClassName ?? accordionLabelClassName\n  const activeLabelClassName =\n    headerActiveLabelClassName ?? accordionActiveLabelClassName\n  const headerClassName = headerHeaderClassName ?? accordionHeaderClassName\n  const activeHeaderClassName =\n    headerActiveHeaderClassName ?? accordionActiveHeaderClassName\n\n  const labelClass = cn(labelClassName, isOpen ? activeLabelClassName : '')\n  const headerClass = cn(headerClassName, isOpen ? activeHeaderClassName : '')\n\n  return (\n    <TagName\n      className={cn(\n        'bg-bg text-text flex w-full cursor-pointer items-center justify-between p-4 text-left transition-all duration-150 ease-in-out',\n        className,\n        headerClass\n      )}\n      onClick={onToggle}\n      disabled={disabled}\n      {...rest}\n    >\n      {iconEnabled && iconPosition === 'left' && (\n        <span className={cn('text-text-muted', iconClass)}>{icon}</span>\n      )}\n      <span className={`${labelClass} grow`}>{children}</span>\n      {iconEnabled && iconPosition === 'right' && (\n        <span className={cn('text-text-muted', iconClass)}>{icon}</span>\n      )}\n    </TagName>\n  )\n}\n",
            "success": true,
            "size": 3029
          },
          {
            "filename": "AccordionContext.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Accordion/AccordionContext.jsx",
            "content": "'use client'\n\nimport { createContext, useContext } from 'react'\n\nconst AccordionContext = createContext(undefined)\n\nexport const AccordionProvider = ({ children, value }) => {\n  return (\n    <AccordionContext.Provider value={value}>\n      {children}\n    </AccordionContext.Provider>\n  )\n}\n\nexport const useAccordion = () => {\n  const context = useContext(AccordionContext)\n  if (context === undefined) {\n    throw new Error('useAccordion must be used within an AccordionProvider')\n  }\n  return context\n}\n",
            "success": true,
            "size": 504
          },
          {
            "filename": "index.js",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Accordion/index.js",
            "content": "export * from './Accordion'\nexport * from './AccordionItem'\nexport * from './AccordionHeader'\nexport * from './AccordionContent'\n",
            "success": true,
            "size": 129
          }
        ],
        "typescript": [
          {
            "filename": "Accordion.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Accordion/Accordion.tsx",
            "content": "'use client'\n\nimport React, { ReactNode, useState } from 'react'\nimport { cn } from '../../utils/cn'\nimport { AccordionProvider } from './AccordionContext'\n\nexport interface AccordionProps {\n  children: ReactNode\n  iconEnabled?: boolean\n  iconPosition?: 'left' | 'right'\n  iconClassName?: string\n  activeIconClassName?: string\n  activeItem?: string[]\n  activeIcon?: ReactNode\n  inactiveIcon?: ReactNode\n  multiple?: boolean\n  className?: string\n  labelClassName?: string\n  activeLabelClassName?: string\n  headerClassName?: string\n  activeHeaderClassName?: string\n  contentClassName?: string\n}\n\nexport const Accordion: React.FC<AccordionProps> = ({\n  children,\n  iconEnabled = true,\n  iconPosition = 'right',\n  iconClassName = '',\n  activeItem,\n  activeIconClassName = '',\n  activeIcon,\n  inactiveIcon,\n  multiple = false,\n  className = '',\n  labelClassName = '',\n  activeLabelClassName = '',\n  headerClassName = '',\n  activeHeaderClassName = '',\n  contentClassName = '',\n  ...rest\n}) => {\n  const [openItems, setOpenItems] = useState<string[]>(activeItem ?? [])\n\n  const toggleItem = (itemId: string) => {\n    setOpenItems(prev => {\n      if (prev.includes(itemId)) {\n        return prev.filter(id => id !== itemId)\n      } else {\n        return multiple ? [...prev, itemId] : [itemId]\n      }\n    })\n  }\n\n  return (\n    <AccordionProvider\n      value={{\n        openItems,\n        toggleItem,\n        iconEnabled,\n        iconPosition,\n        iconClassName,\n        activeIconClassName,\n        activeIcon,\n        inactiveIcon,\n        labelClassName,\n        activeLabelClassName,\n        headerClassName,\n        activeHeaderClassName,\n        contentClassName\n      }}\n    >\n      <div className={cn('space-y-2', className)} {...rest}>\n        {children}\n      </div>\n    </AccordionProvider>\n  )\n}\n",
            "success": true,
            "size": 1805
          },
          {
            "filename": "AccordionContent.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Accordion/AccordionContent.tsx",
            "content": "'use client'\n\nimport { AnimatePresence, motion } from 'framer-motion'\nimport React, { ReactNode } from 'react'\nimport { cn } from '../../utils/cn'\nimport { useAccordion } from './AccordionContext'\n\nexport interface AccordionContentProps {\n  children: ReactNode\n  isOpen?: boolean\n  className?: string\n}\n\nexport const AccordionContent: React.FC<AccordionContentProps> = ({\n  children,\n  isOpen,\n  className = '',\n  ...rest\n}) => {\n  const { contentClassName: accordionContentClassName } = useAccordion()\n\n  return (\n    <AnimatePresence initial={false}>\n      {isOpen && (\n        <motion.div\n          initial='collapsed'\n          animate='open'\n          exit='collapsed'\n          variants={{\n            open: { opacity: 1, height: 'auto' },\n            collapsed: { opacity: 0, height: 0 }\n          }}\n          transition={{ duration: 0.3, ease: [0.04, 0.62, 0.23, 0.98] }}\n        >\n          <div\n            className={cn(\n              'border-border bg-bg overflow-hidden border-t p-4 text-sm',\n              accordionContentClassName,\n              className\n            )}\n            {...rest}\n          >\n            {children}\n          </div>\n        </motion.div>\n      )}\n    </AnimatePresence>\n  )\n}\n",
            "success": true,
            "size": 1221
          },
          {
            "filename": "AccordionItem.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Accordion/AccordionItem.tsx",
            "content": "'use client'\n\nimport React, { ReactNode, cloneElement, isValidElement } from 'react'\nimport { cn } from '../../utils/cn'\nimport { useAccordion } from './AccordionContext'\n\nexport interface AccordionItemProps {\n  children: ReactNode\n  id: string\n  disabled?: boolean\n  className?: string\n}\n\nexport const AccordionItem: React.FC<AccordionItemProps> = ({\n  children,\n  id,\n  disabled = false,\n  className = '',\n  ...rest\n}) => {\n  const { openItems, toggleItem } = useAccordion()\n  const isOpen = openItems.includes(id)\n\n  return (\n    <div\n      className={cn(\n        'border-border overflow-hidden rounded-md border',\n        disabled ? 'opacity-50' : '',\n        className\n      )}\n      {...rest}\n    >\n      {React.Children.map(children, child => {\n        if (isValidElement(child)) {\n          const childProps: any = {\n            isOpen,\n            onToggle: disabled ? undefined : () => toggleItem(id),\n            disabled\n          }\n          return cloneElement(child, childProps)\n        }\n        return child\n      })}\n    </div>\n  )\n}\n",
            "success": true,
            "size": 1052
          },
          {
            "filename": "AccordionHeader.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Accordion/AccordionHeader.tsx",
            "content": "'use client'\n\nimport React, { ReactNode } from 'react'\nimport { cn } from '../../utils/cn'\nimport { useAccordion } from './AccordionContext'\n\ninterface IconProps extends React.SVGProps<SVGSVGElement> {\n  className?: string\n  rest?: React.SVGProps<SVGSVGElement>\n  size?: number\n}\nconst Up = ({ className = '', size = 24, ...rest }: IconProps) => {\n  return (\n    <svg\n      width={size}\n      height={size}\n      viewBox='0 0 24 24'\n      fill='none'\n      xmlns='http://www.w3.org/2000/svg'\n      className={className}\n      {...rest}\n    >\n      <path\n        d='m5.996 14.996 6-6L18 15'\n        stroke='currentColor'\n        strokeWidth={1.6}\n        strokeLinecap='round'\n        strokeLinejoin='round'\n      />\n    </svg>\n  )\n}\n\nconst Down = ({ className = '', size = 24, ...rest }: IconProps) => {\n  return (\n    <svg\n      width={size}\n      height={size}\n      viewBox='0 0 24 24'\n      fill='none'\n      xmlns='http://www.w3.org/2000/svg'\n      className={className}\n      {...rest}\n    >\n      <path\n        d='m18 9-6 6-6.004-6.004'\n        stroke='currentColor'\n        strokeWidth={1.6}\n        strokeLinecap='round'\n        strokeLinejoin='round'\n      />\n    </svg>\n  )\n}\n\nexport interface AccordionHeaderProps {\n  children: ReactNode\n  isOpen?: boolean\n  onToggle?: () => void\n  iconEnabled?: boolean\n  iconPosition?: 'left' | 'right'\n  iconClassName?: string\n  activeIconClassName?: string\n  activeIcon?: ReactNode\n  inactiveIcon?: ReactNode\n  disabled?: boolean\n  className?: string\n  labelClassName?: string\n  activeLabelClassName?: string\n  headerClassName?: string\n  activeHeaderClassName?: string\n  tagName?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'p' | 'div' | 'button'\n}\n\nexport const AccordionHeader: React.FC<AccordionHeaderProps> = ({\n  children,\n  isOpen,\n  onToggle,\n  className = '',\n  iconEnabled: headerIconEnabled,\n  iconPosition: headerIconPosition,\n  iconClassName: headerIconClassName,\n  activeIconClassName: headerActiveIconClassName,\n  activeIcon: headerActiveIcon,\n  inactiveIcon: headerInactiveIcon,\n  labelClassName: headerLabelClassName,\n  activeLabelClassName: headerActiveLabelClassName,\n  headerClassName: headerHeaderClassName,\n  activeHeaderClassName: headerActiveHeaderClassName,\n  disabled = false,\n  tagName = 'h2',\n  ...rest\n}) => {\n  const {\n    iconEnabled: accordionIconEnabled,\n    iconPosition: accordionIconPosition,\n    iconClassName: accordionIconClassName,\n    activeIconClassName: accordionActiveIconClassName,\n    activeIcon: accordionActiveIcon,\n    inactiveIcon: accordionInactiveIcon,\n    labelClassName: accordionLabelClassName,\n    activeLabelClassName: accordionActiveLabelClassName,\n    headerClassName: accordionHeaderClassName,\n    activeHeaderClassName: accordionActiveHeaderClassName\n  } = useAccordion()\n  const TagName = tagName\n  const iconEnabled = headerIconEnabled ?? accordionIconEnabled\n  const iconPosition = headerIconPosition ?? accordionIconPosition\n  const iconClassName = headerIconClassName ?? accordionIconClassName\n  const activeIconClassName =\n    headerActiveIconClassName ?? accordionActiveIconClassName\n  const activeIcon = headerActiveIcon ?? accordionActiveIcon ?? <Up />\n  const inactiveIcon = headerInactiveIcon ?? accordionInactiveIcon ?? <Down />\n\n  const icon = isOpen ? activeIcon : inactiveIcon\n  const iconClass = cn(\n    iconClassName,\n    isOpen ? activeIconClassName : '',\n    'transition-transform duration-300'\n  )\n\n  const labelClassName = headerLabelClassName ?? accordionLabelClassName\n  const activeLabelClassName =\n    headerActiveLabelClassName ?? accordionActiveLabelClassName\n  const headerClassName = headerHeaderClassName ?? accordionHeaderClassName\n  const activeHeaderClassName =\n    headerActiveHeaderClassName ?? accordionActiveHeaderClassName\n\n  const labelClass = cn(labelClassName, isOpen ? activeLabelClassName : '')\n  const headerClass = cn(headerClassName, isOpen ? activeHeaderClassName : '')\n\n  return (\n    <TagName\n      className={cn(\n        'bg-bg text-text flex w-full cursor-pointer items-center justify-between p-4 text-left transition-all duration-150 ease-in-out',\n        className,\n        headerClass\n      )}\n      onClick={onToggle}\n      disabled={disabled}\n      {...rest}\n    >\n      {iconEnabled && iconPosition === 'left' && (\n        <span className={cn('text-text-muted', iconClass)}>{icon}</span>\n      )}\n      <span className={`${labelClass} grow`}>{children}</span>\n      {iconEnabled && iconPosition === 'right' && (\n        <span className={cn('text-text-muted', iconClass)}>{icon}</span>\n      )}\n    </TagName>\n  )\n}\n",
            "success": true,
            "size": 4581
          },
          {
            "filename": "AccordionContext.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Accordion/AccordionContext.tsx",
            "content": "'use client'\n\nimport React, { createContext, useContext, ReactNode } from 'react'\n\nexport interface AccordionContextType {\n  openItems: string[]\n  toggleItem: (itemId: string) => void\n  iconEnabled: boolean\n  iconPosition: 'left' | 'right'\n  iconClassName: string\n  activeIconClassName: string\n  activeIcon?: ReactNode\n  inactiveIcon?: ReactNode\n  labelClassName?: string\n  activeLabelClassName?: string\n  headerClassName?: string\n  activeHeaderClassName?: string\n  contentClassName?: string\n}\n\nconst AccordionContext = createContext<AccordionContextType | undefined>(\n  undefined\n)\n\nexport const AccordionProvider: React.FC<{\n  children: React.ReactNode\n  value: AccordionContextType\n}> = ({ children, value }) => {\n  return (\n    <AccordionContext.Provider value={value}>\n      {children}\n    </AccordionContext.Provider>\n  )\n}\n\nexport const useAccordion = (): AccordionContextType => {\n  const context = useContext(AccordionContext)\n  if (context === undefined) {\n    throw new Error('useAccordion must be used within an AccordionProvider')\n  }\n  return context\n}\n",
            "success": true,
            "size": 1067
          },
          {
            "filename": "index.ts",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Accordion/index.ts",
            "content": "export * from './Accordion'\nexport * from './AccordionItem'\nexport * from './AccordionHeader'\nexport * from './AccordionContent'\n",
            "success": true,
            "size": 129
          }
        ]
      }
    },
    "alert": {
      "id": "alert",
      "name": "Alert",
      "path": "Alert",
      "dependencies": [
        "lucide-react"
      ],
      "utils": [
        "cn"
      ],
      "files": {
        "javascript": [
          {
            "filename": "Alert.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Alert/Alert.jsx",
            "content": "'use client'\nimport React, { useState } from 'react'\nimport { cn } from '../../utils/cn'\nimport { CircleAlert, CircleCheckBig, CircleX, Info, X } from 'lucide-react'\n\nexport const Alert = ({\n  type = 'info',\n  children,\n  closeable = true,\n  onClose,\n  className = '',\n  icon,\n  ...rest\n}) => {\n  const [isVisible, setIsVisible] = useState(true)\n\n  const handleClose = () => {\n    setIsVisible(false)\n    if (onClose) {\n      onClose()\n    }\n  }\n\n  if (!isVisible) return null\n\n  const getAlertStyles = () => {\n    const baseStyles = `px-4 py-3 rounded-sm relative`\n    switch (type) {\n      case 'success':\n        return `${baseStyles} bg-success border border-border text-text`\n      case 'warning':\n        return `${baseStyles} bg-warning border border-border text-text`\n      case 'error':\n        return `${baseStyles} bg-error border border-border text-text`\n      case 'info':\n        return `${baseStyles} bg-info border border-border text-text`\n      default:\n        return baseStyles\n    }\n  }\n\n  const getIconStyles = () => {\n    switch (type) {\n      case 'success':\n        return 'text-success-foreground'\n      case 'warning':\n        return 'text-warning-foreground'\n      case 'error':\n        return 'text-error-foreground'\n      case 'info':\n        return 'text-info-foreground'\n      default:\n        return ''\n    }\n  }\n  const getCloseStyles = () => {\n    switch (type) {\n      case 'success':\n        return 'text-success-foreground'\n      case 'warning':\n        return 'text-warning-foreground'\n      case 'error':\n        return 'text-error-foreground'\n      case 'info':\n        return 'text-info-foreground'\n      default:\n        return ''\n    }\n  }\n\n  const getIcon = () => {\n    switch (type) {\n      case 'success':\n        return <CircleCheckBig />\n      case 'warning':\n        return <CircleAlert />\n      case 'error':\n        return <CircleX />\n      case 'info':\n        return <Info />\n      default:\n        return <></>\n    }\n  }\n\n  return (\n    <div className={cn(getAlertStyles(), className)} role='alert' {...rest}>\n      <div className='flex items-center'>\n        <span className={`mr-2 ${getIconStyles()}`}>{icon || getIcon()}</span>\n        <span className='block flex-1'>{children}</span>\n      </div>\n      {closeable && (\n        <span\n          className='absolute bottom-0 right-0 top-0 px-4 py-3'\n          onClick={handleClose}\n          role='button'\n          title='Close'\n          aria-label='Close'\n        >\n          <X className={cn(getCloseStyles())} />\n        </span>\n      )}\n    </div>\n  )\n}\n",
            "success": true,
            "size": 2565
          },
          {
            "filename": "index.js",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Alert/index.js",
            "content": "export * from './Alert'\n",
            "success": true,
            "size": 24
          }
        ],
        "typescript": [
          {
            "filename": "Alert.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Alert/Alert.tsx",
            "content": "'use client'\nimport { CircleAlert, CircleCheckBig, CircleX, Info, X } from 'lucide-react'\nimport React, { useState, type JSX } from 'react'\nimport { cn } from '../../utils/cn'\n\ntype AlertType = 'success' | 'warning' | 'error' | 'info'\n\ninterface AlertProps {\n  type: AlertType\n  children: React.ReactNode\n  closeable?: boolean\n  onClose?: () => void\n  className?: string\n  icon?: React.ReactNode\n}\n\nexport const Alert: React.FC<AlertProps> = ({\n  type = 'info',\n  children,\n  closeable = true,\n  onClose,\n  className = '',\n  icon,\n  ...rest\n}) => {\n  const [isVisible, setIsVisible] = useState(true)\n\n  const handleClose = () => {\n    setIsVisible(false)\n    if (onClose) {\n      onClose()\n    }\n  }\n\n  if (!isVisible) return null\n\n  const getAlertStyles = (): string => {\n    const baseStyles = `px-4 py-3 rounded-sm relative`\n    switch (type) {\n      case 'success':\n        return `${baseStyles} bg-success border border-border text-text`\n      case 'warning':\n        return `${baseStyles} bg-warning border border-border text-text`\n      case 'error':\n        return `${baseStyles} bg-error border border-border text-text`\n      case 'info':\n        return `${baseStyles} bg-info border border-border text-text`\n      default:\n        return baseStyles\n    }\n  }\n\n  const getIconStyles = (): string => {\n    switch (type) {\n      case 'success':\n        return 'text-success-foreground'\n      case 'warning':\n        return 'text-warning-foreground'\n      case 'error':\n        return 'text-error-foreground'\n      case 'info':\n        return 'text-info-foreground'\n      default:\n        return ''\n    }\n  }\n  const getCloseStyles = (): string => {\n    switch (type) {\n      case 'success':\n        return 'text-success-foreground'\n      case 'warning':\n        return 'text-warning-foreground'\n      case 'error':\n        return 'text-error-foreground'\n      case 'info':\n        return 'text-info-foreground'\n      default:\n        return ''\n    }\n  }\n\n  const getIcon = (): JSX.Element => {\n    switch (type) {\n      case 'success':\n        return <CircleCheckBig />\n      case 'warning':\n        return <CircleAlert />\n      case 'error':\n        return <CircleX />\n      case 'info':\n        return <Info />\n      default:\n        return <></>\n    }\n  }\n\n  return (\n    <div className={cn(getAlertStyles(), className)} role='alert' {...rest}>\n      <div className='flex items-center'>\n        <span className={`mr-2 ${getIconStyles()}`}>{icon || getIcon()}</span>\n        <span className='block flex-1'>{children}</span>\n      </div>\n      {closeable && (\n        <span\n          className='absolute bottom-0 right-0 top-0 px-4 py-3'\n          onClick={handleClose}\n          title='Close'\n          role='button'\n          aria-label='Close'\n        >\n          <X className={cn(getCloseStyles())} />\n        </span>\n      )}\n    </div>\n  )\n}\n",
            "success": true,
            "size": 2856
          },
          {
            "filename": "index.ts",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Alert/index.ts",
            "content": "export * from './Alert'\n",
            "success": true,
            "size": 24
          }
        ]
      }
    },
    "avatar": {
      "id": "avatar",
      "name": "Avatar",
      "path": "Avatar",
      "dependencies": [
        "lucide-react"
      ],
      "utils": [
        "cn"
      ],
      "files": {
        "javascript": [
          {
            "filename": "Avatar.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Avatar/Avatar.jsx",
            "content": "import React from 'react'\nimport { cn } from '../../utils/cn'\nimport { AvatarImage } from './AvatarImage'\n\nexport const Avatar = ({ className = '', children, onClick, ...rest }) => {\n  return (\n    <div\n      className={cn(\n        'bg-bg text-text relative flex size-12 items-center justify-center rounded-full',\n        className\n      )}\n      onClick={onClick}\n      {...rest}\n    >\n      {children && children}\n      {!children && <AvatarImage />}\n    </div>\n  )\n}\n",
            "success": true,
            "size": 470
          },
          {
            "filename": "AvatarBadge.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Avatar/AvatarBadge.jsx",
            "content": "import { cn } from '../../utils/cn'\n\nexport const AvatarBadge = ({\n  className = '',\n  type = 'status',\n  status = 'success',\n  counter,\n  position = 'bottom-right',\n  icon,\n  iconEnabled,\n  iconSize = 6,\n  ...rest\n}) => {\n  const getPosition = position => {\n    if (position === 'bottom-left') {\n      return 'bottom-0 left-0'\n    } else if (position === 'bottom-right') {\n      return 'bottom-0 right-0'\n    } else if (position === 'top-left') {\n      return 'top-0 left-0'\n    } else if (position === 'top-right') {\n      return 'top-0 right-0'\n    }\n    return 'bottom-0 right-0'\n  }\n\n  const getStatusColor = status => {\n    switch (status) {\n      case 'success':\n        return 'bg-success-foreground text-success'\n      case 'warning':\n        return 'bg-warning-foreground text-warning'\n      case 'error':\n        return 'bg-error-foreground text-error'\n      case 'info':\n        return 'bg-info-foreground text-info'\n      case 'active':\n        return 'bg-success-foreground text-primary'\n      case 'away':\n        return 'bg-warning-foreground text-warning'\n      case 'notDisturb':\n        return 'bg-error-foreground text-error'\n      case 'invisible':\n        return 'bg-gray-200 dark:bg-gray-800 text-gray-800 dark:text-gray-200'\n      default:\n        return 'bg-success-foreground text-success'\n    }\n  }\n\n  if (type === 'status') {\n    return (\n      <div\n        className={cn(\n          'absolute flex size-3 items-center justify-center rounded-full',\n          getStatusColor(status),\n          getPosition(position),\n          className\n        )}\n        {...rest}\n      >\n        {iconEnabled && icon && icon}\n        {iconEnabled && !icon && (\n          <svg\n            width={iconSize}\n            height={iconSize}\n            viewBox='0 0 24 24'\n            fill='none'\n            xmlns='http://www.w3.org/2000/svg'\n          >\n            <circle cx='12' cy='12' r='11' fill='currentColor' />\n          </svg>\n        )}\n      </div>\n    )\n  }\n  if (type === 'counter') {\n    return (\n      <div\n        className={cn(\n          'absolute flex size-4 items-center justify-center rounded-full text-[12px]',\n          getStatusColor(status),\n          getPosition(position),\n          className\n        )}\n        {...rest}\n      >\n        {counter}\n      </div>\n    )\n  }\n}\n",
            "success": true,
            "size": 2308
          },
          {
            "filename": "AvatarGroup.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Avatar/AvatarGroup.jsx",
            "content": "'use client'\n\nimport React from 'react'\nimport { cn } from '../../utils/cn'\nimport { Avatar } from './Avatar'\n\nexport const AvatarGroup = ({ className = '', children, ...rest }) => {\n  return (\n    <div className={cn('flex items-center -space-x-2', className)} {...rest}>\n      {!children ? (\n        <>\n          <Avatar />\n          <Avatar />\n        </>\n      ) : (\n        <>{children}</>\n      )}\n    </div>\n  )\n}\n",
            "success": true,
            "size": 420
          },
          {
            "filename": "AvatarImage.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Avatar/AvatarImage.jsx",
            "content": "'use client'\n\nimport { User } from 'lucide-react'\nimport React from 'react'\nimport { cn } from '../../utils/cn'\n\nexport const AvatarImage = ({\n  className = '',\n  name,\n  src,\n  altText,\n  ...rest\n}) => {\n  let nameX\n\n  if (name !== undefined) {\n    if (name.split(' ').length > 1) {\n      nameX = `${name.split(' ')[0][0]}${name.split(' ')[1][0]}`\n    } else {\n      nameX = `${name[0]}`\n    }\n  }\n\n  if (src) {\n    return (\n      <img\n        src={src}\n        alt={altText || 'alt text'}\n        {...(name && { title: name })}\n        className={cn(\n          'aspect-square h-auto max-w-full overflow-hidden rounded-full object-cover',\n          className\n        )}\n        {...rest}\n      />\n    )\n  }\n  if (!src && name) {\n    return (\n      <span className={className} title={name} {...rest}>\n        {nameX || 'A'}\n      </span>\n    )\n  }\n  return (\n    <>\n      <User />\n    </>\n  )\n}\n",
            "success": true,
            "size": 895
          },
          {
            "filename": "index.js",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Avatar/index.js",
            "content": "export * from './Avatar'\nexport * from './AvatarImage'\nexport * from './AvatarBadge'\nexport * from './AvatarGroup'\n",
            "success": true,
            "size": 115
          }
        ],
        "typescript": [
          {
            "filename": "Avatar.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Avatar/Avatar.tsx",
            "content": "import React from 'react'\nimport { cn } from '../../utils/cn'\nimport { AvatarImage } from './AvatarImage'\n\ninterface AvatarProps {\n  className?: string\n  children?: React.ReactNode\n  onClick?: () => void\n}\n\nexport const Avatar: React.FC<AvatarProps> = ({\n  className = '',\n  children,\n  onClick,\n  ...rest\n}) => {\n  return (\n    <div\n      className={cn(\n        'bg-bg text-text relative flex size-12 items-center justify-center rounded-full',\n        className\n      )}\n      onClick={onClick}\n      {...rest}\n    >\n      {children && children}\n      {!children && <AvatarImage />}\n    </div>\n  )\n}\n",
            "success": true,
            "size": 601
          },
          {
            "filename": "AvatarBadge.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Avatar/AvatarBadge.tsx",
            "content": "import React from 'react'\nimport { cn } from '../../utils/cn'\n\ninterface AvatarBadgeProps {\n  className?: string\n  type?: 'counter' | 'status'\n  status?:\n    | 'success'\n    | 'warning'\n    | 'error'\n    | 'info'\n    | 'active'\n    | 'away'\n    | 'notDisturb'\n    | 'invisible'\n  counter?: number\n  position?: 'bottom-left' | 'bottom-right' | 'top-left' | 'top-right'\n  icon?: React.ReactElement\n  iconEnabled?: boolean\n  iconSize?: number\n}\n\nexport const AvatarBadge: React.FC<AvatarBadgeProps> = ({\n  className = '',\n  type = 'status',\n  status = 'success',\n  counter,\n  position = 'bottom-right',\n  icon,\n  iconEnabled,\n  iconSize = 6,\n  ...rest\n}) => {\n  const getPosition = (position: string) => {\n    if (position === 'bottom-left') {\n      return 'bottom-0 left-0'\n    } else if (position === 'bottom-right') {\n      return 'bottom-0 right-0'\n    } else if (position === 'top-left') {\n      return 'top-0 left-0'\n    } else if (position === 'top-right') {\n      return 'top-0 right-0'\n    }\n    return 'bottom-0 right-0'\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'success':\n        return 'bg-success-foreground text-success'\n      case 'warning':\n        return 'bg-warning-foreground text-warning'\n      case 'error':\n        return 'bg-error-foreground text-error'\n      case 'info':\n        return 'bg-info-foreground text-info'\n      case 'active':\n        return 'bg-success-foreground text-primary'\n      case 'away':\n        return 'bg-warning-foreground text-warning'\n      case 'notDisturb':\n        return 'bg-error-foreground text-error'\n      case 'invisible':\n        return 'bg-gray-200 dark:bg-gray-800 text-gray-800 dark:text-gray-200'\n      default:\n        return 'bg-success-foreground text-success'\n    }\n  }\n\n  if (type === 'status') {\n    return (\n      <div\n        className={cn(\n          'absolute flex size-3 items-center justify-center rounded-full',\n          getStatusColor(status),\n          getPosition(position),\n          className\n        )}\n        {...rest}\n      >\n        {iconEnabled && icon && icon}\n        {iconEnabled && !icon && (\n          <svg\n            width={iconSize}\n            height={iconSize}\n            viewBox='0 0 24 24'\n            fill='none'\n            xmlns='http://www.w3.org/2000/svg'\n          >\n            <circle cx='12' cy='12' r='11' fill='currentColor' />\n          </svg>\n        )}\n      </div>\n    )\n  }\n  if (type === 'counter') {\n    return (\n      <div\n        className={cn(\n          'absolute flex size-4 items-center justify-center rounded-full text-[12px]',\n          getStatusColor(status),\n          getPosition(position),\n          className\n        )}\n        {...rest}\n      >\n        {counter}\n      </div>\n    )\n  }\n}\n",
            "success": true,
            "size": 2762
          },
          {
            "filename": "AvatarGroup.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Avatar/AvatarGroup.tsx",
            "content": "'use client'\n\nimport React from 'react'\nimport { cn } from '../../utils/cn'\nimport { Avatar } from './Avatar'\n\ninterface AvatarGroupProps {\n  className?: string\n  children?: React.ReactNode\n}\n\nexport const AvatarGroup: React.FC<AvatarGroupProps> = ({\n  className = '',\n  children,\n  ...rest\n}) => {\n  return (\n    <div className={cn('flex items-center -space-x-2', className)} {...rest}>\n      {!children ? (\n        <>\n          <Avatar />\n          <Avatar />\n        </>\n      ) : (\n        <>{children}</>\n      )}\n    </div>\n  )\n}\n",
            "success": true,
            "size": 536
          },
          {
            "filename": "AvatarImage.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Avatar/AvatarImage.tsx",
            "content": "'use client'\n\nimport { User } from 'lucide-react'\nimport React from 'react'\nimport { cn } from '../../utils/cn'\n\ninterface AvatarImageProps {\n  className?: string\n  name?: string\n  src?: string\n  altText?: string\n}\n\nexport const AvatarImage: React.FC<AvatarImageProps> = ({\n  className = '',\n  name,\n  src,\n  altText,\n  ...rest\n}) => {\n  let nameX: string | undefined\n\n  if (name !== undefined) {\n    if (name.split(' ').length > 1) {\n      nameX = `${name.split(' ')[0][0]}${name.split(' ')[1][0]}`\n    } else {\n      nameX = `${name[0]}`\n    }\n  }\n\n  if (src) {\n    return (\n      <img\n        src={src}\n        alt={altText || 'alt text'}\n        {...(name && { title: name })}\n        className={cn(\n          'aspect-square h-auto max-w-full overflow-hidden rounded-full object-cover',\n          className\n        )}\n        {...rest}\n      />\n    )\n  }\n  if (!src && name) {\n    return (\n      <span className={className} title={name} {...rest}>\n        {nameX || 'A'}\n      </span>\n    )\n  }\n  return (\n    <>\n      <User />\n    </>\n  )\n}\n",
            "success": true,
            "size": 1046
          },
          {
            "filename": "index.ts",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Avatar/index.ts",
            "content": "export * from './Avatar'\nexport * from './AvatarImage'\nexport * from './AvatarBadge'\nexport * from './AvatarGroup'\n",
            "success": true,
            "size": 115
          }
        ]
      }
    },
    "back-to-top": {
      "id": "back-to-top",
      "name": "BackToTop",
      "path": "BackToTop",
      "dependencies": [],
      "utils": [
        "cn"
      ],
      "files": {
        "javascript": [
          {
            "filename": "BackToTop.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/BackToTop/BackToTop.jsx",
            "content": "'use client'\nimport React, { useEffect, useState } from 'react'\nimport { cn } from '../../utils/cn'\n\nexport const BackToTop = ({\n  threshold = 300,\n  smooth = true,\n  className = '',\n  children,\n  ...rest\n}) => {\n  const [isVisible, setIsVisible] = useState(false)\n\n  useEffect(() => {\n    const toggleVisibility = () => {\n      if (window.scrollY > threshold) {\n        setIsVisible(true)\n      } else {\n        setIsVisible(false)\n      }\n    }\n    window.addEventListener('scroll', toggleVisibility)\n    return () => window.removeEventListener('scroll', toggleVisibility)\n  }, [threshold])\n\n  const scrollToTop = () => {\n    if (smooth) {\n      window.scrollTo({\n        top: 0,\n        behavior: 'smooth'\n      })\n    } else {\n      window.scrollTo(0, 0)\n    }\n  }\n\n  if (!isVisible) {\n    return null\n  }\n\n  return (\n    <button\n      onClick={scrollToTop}\n      className={cn(\n        'bg-bg text-text focus:outline-hidden border-border fixed bottom-5 right-5 rounded-full border p-3 font-bold shadow-lg transition-all duration-300 ease-in-out',\n        className\n      )}\n      {...rest}\n    >\n      {children || (\n        <svg\n          width='24'\n          height='24'\n          viewBox='0 0 24 24'\n          fill='none'\n          xmlns='http://www.w3.org/2000/svg'\n        >\n          <path\n            d='m5.996 14.996 6-6L18 15'\n            stroke='currentColor'\n            strokeWidth='1.6'\n            strokeLinecap='round'\n            strokeLinejoin='round'\n          />\n        </svg>\n      )}\n    </button>\n  )\n}\n",
            "success": true,
            "size": 1531
          },
          {
            "filename": "index.js",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/BackToTop/index.js",
            "content": "export * from './BackToTop'\n",
            "success": true,
            "size": 28
          }
        ],
        "typescript": [
          {
            "filename": "BackToTop.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/BackToTop/BackToTop.tsx",
            "content": "'use client'\nimport React, { useEffect, useState } from 'react'\nimport { cn } from '../../utils/cn'\n\ninterface BackToTopProps {\n  threshold?: number\n  smooth?: boolean\n  children?: React.ReactNode\n  className?: string\n}\n\nexport const BackToTop: React.FC<BackToTopProps> = ({\n  threshold = 300,\n  smooth = true,\n  className = '',\n  children,\n  ...rest\n}) => {\n  const [isVisible, setIsVisible] = useState(false)\n\n  useEffect(() => {\n    const toggleVisibility = () => {\n      if (window.scrollY > threshold) {\n        setIsVisible(true)\n      } else {\n        setIsVisible(false)\n      }\n    }\n    window.addEventListener('scroll', toggleVisibility)\n    return () => window.removeEventListener('scroll', toggleVisibility)\n  }, [threshold])\n\n  const scrollToTop = () => {\n    if (smooth) {\n      window.scrollTo({\n        top: 0,\n        behavior: 'smooth'\n      })\n    } else {\n      window.scrollTo(0, 0)\n    }\n  }\n\n  if (!isVisible) {\n    return null\n  }\n\n  return (\n    <button\n      onClick={scrollToTop}\n      className={cn(\n        'bg-bg text-text focus:outline-hidden border-border fixed bottom-5 right-5 rounded-full border p-3 font-bold shadow-lg transition-all duration-300 ease-in-out',\n        className\n      )}\n      {...rest}\n    >\n      {children || (\n        <svg\n          width='24'\n          height='24'\n          viewBox='0 0 24 24'\n          fill='none'\n          xmlns='http://www.w3.org/2000/svg'\n        >\n          <path\n            d='m5.996 14.996 6-6L18 15'\n            stroke='currentColor'\n            strokeWidth='1.6'\n            strokeLinecap='round'\n            strokeLinejoin='round'\n          />\n        </svg>\n      )}\n    </button>\n  )\n}\n",
            "success": true,
            "size": 1677
          },
          {
            "filename": "index.ts",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/BackToTop/index.ts",
            "content": "export * from './BackToTop'\n",
            "success": true,
            "size": 28
          }
        ]
      }
    },
    "badge": {
      "id": "badge",
      "name": "Badge",
      "path": "Badge",
      "dependencies": [],
      "utils": [
        "cn"
      ],
      "files": {
        "javascript": [
          {
            "filename": "Badge.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Badge/Badge.jsx",
            "content": "import React from 'react'\nimport { cn } from '../../utils/cn'\n\nexport const Badge = ({ children, variant=\"default\", className=\"\" }) => {\n  const variationStyle = () => {\n    switch (variant) {\n      case 'default':\n        return 'border-transparent bg-primary text-primary-foreground '\n      case 'outline':\n        return 'border-border text-text'\n      case 'ghost':\n        return 'hover:bg-bg-light hover:text-text border-transparent'\n    }\n  }\n  const baseStyle =\n    'inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 focus-visible:border-border transition-[color,box-shadow] overflow-hidden'\n  return (\n    <span className={cn( baseStyle, variationStyle(), className)}>{children}</span>\n  )\n}",
            "success": true,
            "size": 773
          },
          {
            "filename": "index.js",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Badge/index.js",
            "content": "export * from './Badge'",
            "success": true,
            "size": 23
          }
        ],
        "typescript": [
          {
            "filename": "Badge.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Badge/Badge.tsx",
            "content": "import React from 'react'\nimport { cn } from '../../utils/cn'\n\ninterface BadgeProps {\n    children: React.ReactNode\n    variant?: 'default' | 'outline' | 'ghost'\n    className?: string\n}\n\nexport const Badge: React.FC<BadgeProps> = ({ children, variant=\"default\", className=\"\" }) => {\n  const variationStyle = ():string => {\n    switch (variant) {\n      case 'default':\n        return 'border-transparent bg-primary text-primary-foreground '\n      case 'outline':\n        return 'border-border text-text'\n      case 'ghost':\n        return 'hover:bg-bg-light hover:text-text border-transparent'\n    }\n  }\n  const baseStyle = 'inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 focus-visible:border-border transition-[color,box-shadow] overflow-hidden'\n  return (\n    <span className={cn( baseStyle, variationStyle(), className)}>{children}</span>\n  )\n}",
            "success": true,
            "size": 923
          },
          {
            "filename": "index.ts",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Badge/index.ts",
            "content": "export * from './Badge'",
            "success": true,
            "size": 23
          }
        ]
      }
    },
    "breadcrumb": {
      "id": "breadcrumb",
      "name": "Breadcrumb",
      "path": "Breadcrumb",
      "dependencies": [
        "lucide-react"
      ],
      "utils": [
        "cn"
      ],
      "files": {
        "javascript": [
          {
            "filename": "Breadcrumb.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Breadcrumb/Breadcrumb.jsx",
            "content": "'use client'\nimport { ChevronRight } from 'lucide-react'\nimport React, { Children } from 'react'\nimport { cn } from '../../utils/cn'\n\nexport const Breadcrumb = ({\n  children,\n  className = '',\n  separator = <ChevronRight />,\n  separatorClassName = '',\n  ...rest\n}) => {\n  const childrenArray = Children.toArray(children)\n\n  return (\n    <ul\n      className={cn(\n        'text-muted flex flex-wrap items-center gap-1.5 break-words text-sm sm:gap-2.5',\n        className\n      )}\n      {...rest}\n    >\n      {childrenArray.map((child, index) => (\n        <React.Fragment key={index}>\n          {child}\n          {index < childrenArray.length - 1 && (\n            <span className={cn('text-muted mx-2', separatorClassName)}>\n              {separator}\n            </span>\n          )}\n        </React.Fragment>\n      ))}\n    </ul>\n  )\n}\n\nBreadcrumb.displayName = 'Breadcrumb'\n",
            "success": true,
            "size": 872
          },
          {
            "filename": "BreadcrumbItem.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Breadcrumb/BreadcrumbItem.jsx",
            "content": "'use client'\nimport { cn } from '../../utils/cn'\n\nexport const BreadcrumbItem = ({ children, className = '', ...rest }) => {\n  return (\n    <li className={cn('flex cursor-pointer items-center', className)} {...rest}>\n      {children}\n    </li>\n  )\n}\n\nBreadcrumbItem.displayName = 'BreadcrumbItem'\n",
            "success": true,
            "size": 297
          },
          {
            "filename": "index.js",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Breadcrumb/index.js",
            "content": "export * from './Breadcrumb'\nexport * from './BreadcrumbItem'\n",
            "success": true,
            "size": 62
          }
        ],
        "typescript": [
          {
            "filename": "Breadcrumb.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Breadcrumb/Breadcrumb.tsx",
            "content": "'use client'\nimport { ChevronRight } from 'lucide-react'\nimport React, { Children, HTMLAttributes } from 'react'\nimport { cn } from '../../utils/cn'\n\ninterface BreadcrumbProps extends HTMLAttributes<HTMLUListElement> {\n  className?: string\n  children: React.ReactNode\n  separator?: React.ReactNode\n  separatorClassName?: string\n}\n\nexport const Breadcrumb: React.FC<BreadcrumbProps> = ({\n  children,\n  className = '',\n  separator = <ChevronRight />,\n  separatorClassName = '',\n  ...rest\n}) => {\n  // Safely convert children to an array\n  const childrenArray = Children.toArray(children)\n\n  return (\n    <ul\n      className={cn(\n        'text-muted flex flex-wrap items-center gap-1.5 break-words text-sm sm:gap-2.5',\n        className\n      )}\n      {...rest}\n    >\n      {childrenArray.map((child: React.ReactNode, index: number) => (\n        <React.Fragment key={index}>\n          {child}\n          {index < childrenArray.length - 1 && (\n            <span className={cn('text-muted mx-2', separatorClassName)}>\n              {separator}\n            </span>\n          )}\n        </React.Fragment>\n      ))}\n    </ul>\n  )\n}\n\nBreadcrumb.displayName = 'Breadcrumb'\n",
            "success": true,
            "size": 1162
          },
          {
            "filename": "BreadcrumbItem.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Breadcrumb/BreadcrumbItem.tsx",
            "content": "'use client'\nimport { HTMLAttributes } from 'react'\nimport { cn } from '../../utils/cn'\n\nexport interface BreadcrumbItemProps extends HTMLAttributes<HTMLLIElement> {\n  children: React.ReactNode\n  className?: string\n}\n\nexport const BreadcrumbItem: React.FC<BreadcrumbItemProps> = ({\n  children,\n  className = '',\n  ...rest\n}) => {\n  return (\n    <li className={cn('flex cursor-pointer items-center', className)} {...rest}>\n      {children}\n    </li>\n  )\n}\n\nBreadcrumbItem.displayName = 'BreadcrumbItem'\n",
            "success": true,
            "size": 502
          },
          {
            "filename": "index.ts",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Breadcrumb/index.ts",
            "content": "export * from './Breadcrumb'\nexport * from './BreadcrumbItem'\n",
            "success": true,
            "size": 62
          }
        ]
      }
    },
    "button": {
      "id": "button",
      "name": "Button",
      "path": "Button",
      "dependencies": [],
      "utils": [
        "cn"
      ],
      "files": {
        "javascript": [
          {
            "filename": "Button.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Button/Button.jsx",
            "content": "import React from 'react'\nimport { cn } from '../../utils/cn'\n\nexport const Button = ({\n  type = 'button',\n  variant = 'default',\n  size = 'medium',\n  disabled = false,\n  loading = false,\n  onClick,\n  children,\n  icon,\n  iconPosition = 'left',\n  className = '',\n  iconClassName = '',\n  ...rest\n}) => {\n  const baseStyles = `inline-flex gap-2 items-center justify-center font-medium rounded-md focus:outline-hidden focus-visible:border-ring focus-visible:ring-border transition ease-in-out duration-200 focus-visible:ring-1 cursor-pointer`\n\n  const sizeStyles = {\n    small: `${variant == 'link' ? '' : 'px-3 py-2'} text-sm`,\n    medium: `${variant == 'link' ? '' : 'px-4 py-2'} text-base`,\n    large: `${variant == 'link' ? '' : 'px-6 py-3'} text-lg`\n  }\n\n  const variantStyles = {\n    default: `\n      bg-bg text-text hover:bg-primary/90\n    `,\n    primary: `\n      bg-primary text-primary-foreground hover:bg-primary/90\n    `,\n    secondary: `\n      bg-bg-light text-text\n    `,\n    success: `\n      bg-success text-text\n    `,\n    warning: `\n      bg-warning text-text\n    `,\n    link: `\n      text-text hover:underline underline-offset-4\n    `,\n    outline: `\n      border border-border text-text bg-bg-light/30 hover:bg-bg-light/60\n    `,\n    ghost: `\n      hover:bg-bg-light hover:text-text\n    `,\n    icon: `\n      bg-bg-light text-text hover:bg-bg-light/60\n    `,\n    withIcon: `\n      bg-bg-light text-text hover:bg-bg-light/60\n    `\n  }\n\n  return (\n    <button\n      type={type}\n      onClick={onClick}\n      disabled={disabled || loading}\n      className={cn(\n        baseStyles,\n        sizeStyles[size],\n        variantStyles[variant],\n        disabled ? 'pointer-events-none opacity-50' : '',\n        loading ? 'relative' : '',\n        'font-sans',\n        className\n      )}\n      {...rest}\n    >\n      {loading && (\n        <span className=''>\n          <svg\n            className='h-5 w-5 animate-spin'\n            xmlns='http://www.w3.org/2000/svg'\n            fill='none'\n            viewBox='0 0 24 24'\n          >\n            <circle\n              className='opacity-25'\n              cx='12'\n              cy='12'\n              r='10'\n              stroke='currentColor'\n              strokeWidth='4'\n            />\n            <path\n              className='opacity-75'\n              fill='currentColor'\n              d='M4 12a8 8 0 0 1 8-8V0C5.373 0 0 5.373 0 12zm2 5.291A7.96 7.96 0 0 1 4 12H0c0 3.042 1.135 5.824 3 7.938z'\n            />\n          </svg>\n        </span>\n      )}\n      {icon && iconPosition === 'left' && !loading && (\n        <span className={`${iconClassName}`}>{icon}</span>\n      )}\n      {!loading && children}\n      {icon && iconPosition === 'right' && !loading && (\n        <span className={`${iconClassName}`}>{icon}</span>\n      )}\n    </button>\n  )\n}\n",
            "success": true,
            "size": 2804
          },
          {
            "filename": "index.js",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Button/index.js",
            "content": "export * from './Button'\n",
            "success": true,
            "size": 25
          }
        ],
        "typescript": [
          {
            "filename": "Button.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Button/Button.tsx",
            "content": "import React, { ReactNode } from 'react'\nimport { cn } from '../../utils/cn'\n\ninterface ButtonProps extends React.HTMLAttributes<HTMLButtonElement> {\n  type?: 'button' | 'submit' | 'reset'\n  variant?:\n    | 'primary'\n    | 'secondary'\n    | 'success'\n    | 'warning'\n    | 'link'\n    | 'outline'\n    | 'ghost'\n    | 'icon'\n    | 'withIcon'\n    | 'default'\n  size?: 'small' | 'medium' | 'large'\n  disabled?: boolean\n  loading?: boolean\n  onClick?: () => void\n  children?: ReactNode\n  icon?: ReactNode\n  className?: string\n  iconClassName?: string\n  iconPosition?: 'left' | 'right'\n  position?: 'bottom-right' | 'bottom-left'\n}\n\nexport const Button: React.FC<ButtonProps> = ({\n  type = 'button',\n  variant = 'default',\n  size = 'medium',\n  disabled = false,\n  loading = false,\n  onClick,\n  children,\n  icon,\n  iconPosition = 'left',\n  className = '',\n  iconClassName = '',\n  ...rest\n}) => {\n  const baseStyles = `inline-flex gap-2 items-center justify-center font-medium rounded-md focus:outline-hidden focus-visible:border-ring focus-visible:ring-border transition ease-in-out duration-200 focus-visible:ring-1 cursor-pointer`\n\n  const sizeStyles = {\n    small: `${variant == 'link' ? '' : 'px-3 py-2'} text-sm`,\n    medium: `${variant == 'link' ? '' : 'px-4 py-2'} text-base`,\n    large: `${variant == 'link' ? '' : 'px-6 py-3'} text-lg`\n  }\n\n  const variantStyles = {\n    default: `\n      bg-bg text-text hover:bg-primary/90\n    `,\n    primary: `\n      bg-primary text-primary-foreground hover:bg-primary/90\n    `,\n    secondary: `\n      bg-bg-light text-text\n    `,\n    success: `\n      bg-success text-text\n    `,\n    warning: `\n      bg-warning text-text\n    `,\n    link: `\n      text-text hover:underline underline-offset-4\n    `,\n    outline: `\n      border border-border text-text bg-bg-light/30 hover:bg-bg-light/60\n    `,\n    ghost: `\n      hover:bg-bg-light hover:text-text\n    `,\n    icon: `\n      bg-bg-light text-text hover:bg-bg-light/60\n    `,\n    withIcon: `\n      bg-bg-light text-text hover:bg-bg-light/60\n    `\n  }\n\n  return (\n    <button\n      type={type}\n      onClick={onClick}\n      disabled={disabled || loading}\n      className={cn(\n        baseStyles,\n        sizeStyles[size],\n        variantStyles[variant],\n        disabled ? 'pointer-events-none opacity-50' : '',\n        loading ? 'relative' : '',\n        'font-sans',\n        className\n      )}\n      {...rest}\n    >\n      {loading && (\n        <span className=''>\n          <svg\n            className='h-5 w-5 animate-spin'\n            xmlns='http://www.w3.org/2000/svg'\n            fill='none'\n            viewBox='0 0 24 24'\n          >\n            <circle\n              className='opacity-25'\n              cx='12'\n              cy='12'\n              r='10'\n              stroke='currentColor'\n              strokeWidth='4'\n            />\n            <path\n              className='opacity-75'\n              fill='currentColor'\n              d='M4 12a8 8 0 0 1 8-8V0C5.373 0 0 5.373 0 12zm2 5.291A7.96 7.96 0 0 1 4 12H0c0 3.042 1.135 5.824 3 7.938z'\n            />\n          </svg>\n        </span>\n      )}\n      {icon && iconPosition === 'left' && !loading && (\n        <span className={`${iconClassName}`}>{icon}</span>\n      )}\n      {!loading && children}\n      {icon && iconPosition === 'right' && !loading && (\n        <span className={`${iconClassName}`}>{icon}</span>\n      )}\n    </button>\n  )\n}\n",
            "success": true,
            "size": 3391
          },
          {
            "filename": "index.ts",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Button/index.ts",
            "content": "export * from './Button'\n",
            "success": true,
            "size": 25
          }
        ]
      }
    },
    "card": {
      "id": "card",
      "name": "Card",
      "path": "Card",
      "dependencies": [],
      "utils": [
        "cn"
      ],
      "files": {
        "javascript": [
          {
            "filename": "Card.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Card/Card.jsx",
            "content": "import React from 'react'\nimport { cn } from '../../utils/cn'\n\nexport const Card = ({ children, className = '', ...rest }) => {\n  return (\n    <div\n      className={cn(\n        'bg-bg text-text border-border flex flex-col gap-6 rounded-lg border py-6 shadow-sm',\n        className\n      )}\n      {...rest}\n    >\n      {children}\n    </div>\n  )\n}\n",
            "success": true,
            "size": 346
          },
          {
            "filename": "CardContent.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Card/CardContent.jsx",
            "content": "import { cn } from '../../utils/cn'\n\nexport const CardContent = ({ children, className = '', ...rest }) => {\n  return (\n    <div className={cn('px-6', className)} {...rest}>\n      {children}\n    </div>\n  )\n}\n",
            "success": true,
            "size": 208
          },
          {
            "filename": "CardFooter.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Card/CardFooter.jsx",
            "content": "import { cn } from '../../utils/cn'\n\nexport const CardFooter = ({ children, className = '', ...rest }) => {\n  return (\n    <div className={cn('flex items-center px-6', className)} {...rest}>\n      {children}\n    </div>\n  )\n}\n",
            "success": true,
            "size": 225
          },
          {
            "filename": "CardHeader.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Card/CardHeader.jsx",
            "content": "import { cn } from '../../utils/cn'\n\nexport const CardHeader = ({ children, className = '', ...rest }) => {\n  return (\n    <div className={cn('px-6', className)} {...rest}>\n      {children}\n    </div>\n  )\n}\n",
            "success": true,
            "size": 207
          },
          {
            "filename": "CardTitle.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Card/CardTitle.jsx",
            "content": "import { cn } from '../../utils/cn'\n\nexport const CardTitle = ({ children, className = '', ...rest }) => {\n  return (\n    <h3 className={cn('font-semibold leading-none', className)} {...rest}>\n      {children}\n    </h3>\n  )\n}\n",
            "success": true,
            "size": 226
          },
          {
            "filename": "CardDescription.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Card/CardDescription.jsx",
            "content": "import { cn } from '../../utils/cn'\n\nexport const CardDescription = ({ children, className = '', ...rest }) => {\n  return (\n    <p className={cn('text-text-muted text-sm', className)} {...rest}>\n      {children}\n    </p>\n  )\n}\n",
            "success": true,
            "size": 227
          },
          {
            "filename": "index.js",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Card/index.js",
            "content": "export * from './Card'\nexport * from './CardContent'\nexport * from './CardFooter'\nexport * from './CardHeader'\nexport * from './CardTitle'\nexport * from './CardDescription'\n",
            "success": true,
            "size": 173
          }
        ],
        "typescript": [
          {
            "filename": "Card.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Card/Card.tsx",
            "content": "import React from 'react'\nimport { cn } from '../../utils/cn'\n\ntype CardProps = {\n  children: React.ReactNode\n  className?: string\n}\n\nexport const Card: React.FC<CardProps> = ({\n  children,\n  className = '',\n  ...rest\n}) => {\n  return (\n    <div\n      className={cn(\n        'bg-bg text-text border-border flex flex-col gap-6 rounded-lg border py-6 shadow-sm',\n        className\n      )}\n      {...rest}\n    >\n      {children}\n    </div>\n  )\n}\n",
            "success": true,
            "size": 444
          },
          {
            "filename": "CardContent.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Card/CardContent.tsx",
            "content": "import { cn } from '../../utils/cn'\n\ninterface CardContentProps {\n  children: React.ReactNode\n  className?: string\n}\n\nexport const CardContent: React.FC<CardContentProps> = ({\n  children,\n  className = '',\n  ...rest\n}) => {\n  return (\n    <div className={cn('px-6', className)} {...rest}>\n      {children}\n    </div>\n  )\n}\n",
            "success": true,
            "size": 323
          },
          {
            "filename": "CardFooter.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Card/CardFooter.tsx",
            "content": "import { cn } from '../../utils/cn'\n\ninterface CardFooterProps {\n  children: React.ReactNode\n  className?: string\n}\n\nexport const CardFooter: React.FC<CardFooterProps> = ({\n  children,\n  className = '',\n  ...rest\n}) => {\n  return (\n    <div className={cn('flex items-center px-6', className)} {...rest}>\n      {children}\n    </div>\n  )\n}\n",
            "success": true,
            "size": 338
          },
          {
            "filename": "CardHeader.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Card/CardHeader.tsx",
            "content": "import { cn } from '../../utils/cn'\n\ntype CardHeaderProps = {\n  children: React.ReactNode\n  className?: string\n}\n\nexport const CardHeader: React.FC<CardHeaderProps> = ({\n  children,\n  className = '',\n  ...rest\n}) => {\n  return (\n    <div className={cn('px-6', className)} {...rest}>\n      {children}\n    </div>\n  )\n}\n",
            "success": true,
            "size": 317
          },
          {
            "filename": "CardTitle.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Card/CardTitle.tsx",
            "content": "import { cn } from '../../utils/cn'\n\ninterface CardTitleProps {\n  children: React.ReactNode\n  className?: string\n}\n\nexport const CardTitle: React.FC<CardTitleProps> = ({\n  children,\n  className = '',\n  ...rest\n}) => {\n  return (\n    <h3 className={cn('font-semibold leading-none', className)} {...rest}>\n      {children}\n    </h3>\n  )\n}\n",
            "success": true,
            "size": 337
          },
          {
            "filename": "CardDescription.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Card/CardDescription.tsx",
            "content": "import { cn } from '../../utils/cn'\n\ninterface CardDescriptionProps {\n  children: React.ReactNode\n  className?: string\n}\n\nexport const CardDescription: React.FC<CardDescriptionProps> = ({\n  children,\n  className = '',\n  ...rest\n}) => {\n  return (\n    <p className={cn('text-text-muted text-sm', className)} {...rest}>\n      {children}\n    </p>\n  )\n}\n",
            "success": true,
            "size": 350
          },
          {
            "filename": "index.ts",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Card/index.ts",
            "content": "export * from './Card'\nexport * from './CardContent'\nexport * from './CardFooter'\nexport * from './CardHeader'\nexport * from './CardTitle'\nexport * from './CardDescription'\n",
            "success": true,
            "size": 173
          }
        ]
      }
    },
    "carousel": {
      "id": "carousel",
      "name": "Carousel",
      "path": "Carousel",
      "dependencies": [
        "embla-carousel-react"
      ],
      "utils": [
        "cn"
      ],
      "files": {
        "javascript": [
          {
            "filename": "Carousel.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Carousel/Carousel.jsx",
            "content": "'use client'\nimport useEmblaCarousel from 'embla-carousel-react'\nimport { forwardRef } from 'react'\nimport { cn } from '../../utils/cn'\nimport { CarouselContext } from './CarouselContext'\nimport { CarouselViewport } from './Viewport'\n\nconst Carousel = forwardRef(\n  (\n    { children, options, plugins, className, carouselViewportClasses, ...rest },\n    ref\n  ) => {\n    const [emblaRef, emblaApi] = useEmblaCarousel(options, plugins)\n\n    return (\n      <div\n        className={cn('relative w-full pb-[2.4rem]', className)}\n        ref={ref}\n        {...rest}\n      >\n        <CarouselContext.Provider value={{ emblaApi, emblaRef }}>\n          <CarouselViewport className={carouselViewportClasses}>\n            {children}\n          </CarouselViewport>\n        </CarouselContext.Provider>\n      </div>\n    )\n  }\n)\n\nCarousel.displayName = 'Carousel'\n\nexport { Carousel }\n",
            "success": true,
            "size": 869
          },
          {
            "filename": "CarouselArrowButtons.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Carousel/CarouselArrowButtons.jsx",
            "content": "'use client'\nimport {\n  cloneElement,\n  forwardRef,\n  isValidElement,\n  useCallback,\n  useEffect,\n  useState\n} from 'react'\nimport { cn } from '../../utils/cn'\nimport { useCarouselContext } from './CarouselContext'\n\nexport const usePrevNextButtons = emblaApi => {\n  const [prevBtnDisabled, setPrevBtnDisabled] = useState(true)\n  const [nextBtnDisabled, setNextBtnDisabled] = useState(true)\n\n  const onPrevButtonClick = useCallback(() => {\n    if (!emblaApi) return\n    emblaApi.scrollPrev()\n  }, [emblaApi])\n\n  const onNextButtonClick = useCallback(() => {\n    if (!emblaApi) return\n    emblaApi.scrollNext()\n  }, [emblaApi])\n\n  const onSelect = useCallback(emblaApi => {\n    setPrevBtnDisabled(!emblaApi.canScrollPrev())\n    setNextBtnDisabled(!emblaApi.canScrollNext())\n  }, [])\n\n  useEffect(() => {\n    if (!emblaApi) return\n\n    onSelect(emblaApi)\n    emblaApi.on('reInit', onSelect)\n    emblaApi.on('select', onSelect)\n  }, [emblaApi, onSelect])\n\n  return {\n    prevBtnDisabled,\n    nextBtnDisabled,\n    onPrevButtonClick,\n    onNextButtonClick\n  }\n}\n\nconst CarouselPrevButton = forwardRef(\n  ({ children, asChild, className = '', ...props }, ref) => {\n    const { emblaApi } = useCarouselContext()\n    const { onPrevButtonClick, prevBtnDisabled } = usePrevNextButtons(emblaApi)\n\n    if (asChild && isValidElement(children)) {\n      return cloneElement(children, {\n        itemRef: ref,\n        onClick: onPrevButtonClick,\n        disabled: prevBtnDisabled,\n        ...props\n      })\n    }\n\n    return (\n      <button\n        {...props}\n        onClick={onPrevButtonClick}\n        disabled={prevBtnDisabled}\n        ref={ref}\n        className={cn(\n          'border-border text-text bg-bg-light inline-flex size-[2rem] items-center justify-center rounded-full border disabled:pointer-events-none disabled:opacity-50',\n          className\n        )}\n        type='button'\n      >\n        {!children && (\n          <svg className={'size-3'} viewBox='0 0 532 532'>\n            <path\n              fill='currentColor'\n              d='M355.66 11.354c13.793-13.805 36.208-13.805 50.001 0 13.785 13.804 13.785 36.238 0 50.034L201.22 266l204.442 204.61c13.785 13.805 13.785 36.239 0 50.044-13.793 13.796-36.208 13.796-50.002 0a5994246.277 5994246.277 0 0 0-229.332-229.454 35.065 35.065 0 0 1-10.326-25.126c0-9.2 3.393-18.26 10.326-25.2C172.192 194.973 332.731 34.31 355.66 11.354Z'\n            />\n          </svg>\n        )}\n        {children}\n      </button>\n    )\n  }\n)\n\nCarouselPrevButton.displayName = 'CarouselPrevButton'\n\nconst CarouselNextButton = forwardRef(\n  ({ children, asChild, className = '', ...props }, ref) => {\n    const { emblaApi } = useCarouselContext()\n    const { onNextButtonClick, nextBtnDisabled } = usePrevNextButtons(emblaApi)\n\n    if (asChild && isValidElement(children)) {\n      return cloneElement(children, {\n        itemRef: ref,\n        onClick: onNextButtonClick,\n        disabled: nextBtnDisabled,\n        ...props\n      })\n    }\n\n    return (\n      <button\n        {...props}\n        onClick={onNextButtonClick}\n        disabled={nextBtnDisabled}\n        ref={ref}\n        className={cn(\n          'border-border text-text bg-bg-light inline-flex size-[2rem] items-center justify-center rounded-full border disabled:pointer-events-none disabled:opacity-50',\n          className\n        )}\n        type='button'\n      >\n        {!children && (\n          <svg className={'size-3'} viewBox='0 0 532 532'>\n            <path\n              fill='currentColor'\n              d='M176.34 520.646c-13.793 13.805-36.208 13.805-50.001 0-13.785-13.804-13.785-36.238 0-50.034L330.78 266 126.34 61.391c-13.785-13.805-13.785-36.239 0-50.044 13.793-13.796 36.208-13.796 50.002 0 22.928 22.947 206.395 206.507 229.332 229.454a35.065 35.065 0 0 1 10.326 25.126c0 9.2-3.393 18.26-10.326 25.2-45.865 45.901-206.404 206.564-229.332 229.52Z'\n            />\n          </svg>\n        )}\n        {children}\n      </button>\n    )\n  }\n)\n\nCarouselNextButton.displayName = 'CarouselNextButton'\n\nexport { CarouselNextButton, CarouselPrevButton }\n",
            "success": true,
            "size": 4052
          },
          {
            "filename": "Control.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Carousel/Control.jsx",
            "content": "'use client'\nimport { forwardRef } from 'react'\nimport { cn } from '../../utils/cn'\n\nexport const CarouselControl = forwardRef(\n  ({ children, className, ...props }, ref) => {\n    return (\n      <div\n        {...props}\n        className={cn(\n          'absolute left-0 top-0 z-50 mt-[1.8rem] flex w-full items-center justify-between',\n          className\n        )}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  }\n)\n\nCarouselControl.displayName = 'CarouselControl'\n",
            "success": true,
            "size": 485
          },
          {
            "filename": "Indicators.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Carousel/Indicators.jsx",
            "content": "'use client'\nimport { forwardRef } from 'react'\nimport { cn } from '../../utils/cn'\nimport { useCarouselContext } from './CarouselContext'\nimport { DotButton, useDotButton } from './CarouselDotButton'\n\nexport const CarouselIndicators = forwardRef(\n  ({ className, dotButtonStyle, ...props }, ref) => {\n    const { emblaApi } = useCarouselContext()\n    const { selectedIndex, scrollSnaps, onDotButtonClick } =\n      useDotButton(emblaApi)\n    return (\n      <div\n        {...props}\n        className={cn(\n          'absolute bottom-0 left-1/2 flex w-full -translate-x-1/2 flex-wrap items-center gap-2',\n          className\n        )}\n        ref={ref}\n      >\n        {scrollSnaps.map((number, index) => (\n          <DotButton\n            key={number}\n            onClick={() => onDotButtonClick(index)}\n            className={cn(\n              'border-border inline-flex size-3 rounded-full border-2',\n              `${index === selectedIndex && 'border-primary'}`,\n              dotButtonStyle\n            )}\n          />\n        ))}\n      </div>\n    )\n  }\n)\n\nCarouselIndicators.displayName = 'CarouselIndicators'\n",
            "success": true,
            "size": 1115
          },
          {
            "filename": "Item.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Carousel/Item.jsx",
            "content": "'use client'\nimport { cloneElement, forwardRef, isValidElement } from 'react'\nimport { cn } from '../../utils/cn'\n\nexport const CarouselItem = forwardRef(\n  ({ children, asChild, className, ...props }, ref) => {\n    if (asChild && isValidElement(children)) {\n      return cloneElement(children, {\n        itemRef: ref,\n        ...props\n      })\n    }\n\n    return (\n      <div\n        {...props}\n        className={cn(\n          'h-auto min-w-0 flex-[0_0_100%] overflow-hidden pl-4',\n          className\n        )}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  }\n)\n\nCarouselItem.displayName = 'CarouselItem'\n",
            "success": true,
            "size": 627
          },
          {
            "filename": "Slides.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Carousel/Slides.jsx",
            "content": "'use client'\nimport { forwardRef } from 'react'\nimport { cn } from '../../utils/cn'\n\nexport const CarouselSlides = forwardRef(\n  ({ children, className, ...props }, ref) => {\n    return (\n      <div {...props} className={cn('-ml-4 flex', className)} ref={ref}>\n        {children}\n      </div>\n    )\n  }\n)\n\nCarouselSlides.displayName = 'CarouselSlides'\n",
            "success": true,
            "size": 352
          },
          {
            "filename": "CarouselContext.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Carousel/CarouselContext.jsx",
            "content": "'use client'\nimport { createContext, useContext } from 'react'\n\nexport const CarouselContext = createContext(undefined)\n\nexport function useCarouselContext() {\n  const context = useContext(CarouselContext)\n  if (!context) {\n    throw new Error(\n      'useCarouselContext should be used within the CarouselContext provider!'\n    )\n  }\n\n  return context\n}\n",
            "success": true,
            "size": 354
          },
          {
            "filename": "CarouselDotButton.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Carousel/CarouselDotButton.jsx",
            "content": "'use client'\nimport {\n  cloneElement,\n  forwardRef,\n  isValidElement,\n  useCallback,\n  useEffect,\n  useState\n} from 'react'\n\nexport const useDotButton = emblaApi => {\n  const [selectedIndex, setSelectedIndex] = useState(0)\n  const [scrollSnaps, setScrollSnaps] = useState([])\n\n  const onDotButtonClick = useCallback(\n    index => {\n      if (!emblaApi) return\n      emblaApi.scrollTo(index)\n    },\n    [emblaApi]\n  )\n\n  const onInit = useCallback(emblaApi => {\n    setScrollSnaps(emblaApi.scrollSnapList())\n  }, [])\n\n  const onSelect = useCallback(emblaApi => {\n    setSelectedIndex(emblaApi.selectedScrollSnap())\n  }, [])\n\n  useEffect(() => {\n    if (!emblaApi) return\n\n    onInit(emblaApi)\n    onSelect(emblaApi)\n    emblaApi.on('reInit', onInit)\n    emblaApi.on('reInit', onSelect)\n    emblaApi.on('select', onSelect)\n  }, [emblaApi, onInit, onSelect])\n\n  return {\n    selectedIndex,\n    scrollSnaps,\n    onDotButtonClick\n  }\n}\n\nexport const DotButton = forwardRef(\n  ({ children, asChild, className, ...props }, ref) => {\n    if (asChild && isValidElement(children)) {\n      return cloneElement(children, {\n        itemRef: ref,\n        ...props\n      })\n    }\n\n    return (\n      <button ref={ref} type='button' {...props} className={`${className}`}>\n        {children}\n      </button>\n    )\n  }\n)\n\nDotButton.displayName = 'DotButton'\n",
            "success": true,
            "size": 1340
          },
          {
            "filename": "Viewport.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Carousel/Viewport.jsx",
            "content": "'use client'\nimport { forwardRef } from 'react'\nimport { useCarouselContext } from './CarouselContext'\n\nexport const CarouselViewport = forwardRef(({ children }, ref) => {\n  const { emblaRef } = useCarouselContext()\n\n  return (\n    <div className={`overflow-hidden`} ref={ref || emblaRef}>\n      {children}\n    </div>\n  )\n})\n\nCarouselViewport.displayName = 'CarouselViewport'\n",
            "success": true,
            "size": 376
          },
          {
            "filename": "index.js",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Carousel/index.js",
            "content": "export { Carousel } from './Carousel'\nexport { CarouselNextButton, CarouselPrevButton } from './CarouselArrowButtons'\nexport { CarouselControl } from './Control'\nexport { CarouselIndicators } from './Indicators'\nexport { CarouselItem } from './Item'\nexport { CarouselSlides } from './Slides'\n",
            "success": true,
            "size": 292
          }
        ],
        "typescript": [
          {
            "filename": "Carousel.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Carousel/Carousel.tsx",
            "content": "'use client'\nimport { EmblaOptionsType, EmblaPluginType } from 'embla-carousel'\nimport useEmblaCarousel from 'embla-carousel-react'\nimport { HTMLAttributes, Ref, forwardRef } from 'react'\nimport { cn } from '../../utils/cn'\nimport { CarouselContext } from './CarouselContext'\nimport { CarouselViewport } from './Viewport'\n\ninterface CarouselProps extends HTMLAttributes<HTMLDivElement> {\n  options?: EmblaOptionsType\n  plugins?: EmblaPluginType[]\n  carouselViewportClasses?: string\n}\n\nconst Carousel = forwardRef<HTMLDivElement, CarouselProps>(\n  (\n    {\n      children,\n      options,\n      plugins,\n      className,\n      carouselViewportClasses,\n      ...rest\n    }: CarouselProps,\n    ref: Ref<HTMLDivElement>\n  ) => {\n    const [emblaRef, emblaApi] = useEmblaCarousel(options, plugins)\n\n    return (\n      <div\n        className={cn('relative w-full pb-[2.4rem]', className)}\n        ref={ref}\n        {...rest}\n      >\n        <CarouselContext.Provider value={{ emblaApi, emblaRef }}>\n          <CarouselViewport className={carouselViewportClasses}>\n            {children}\n          </CarouselViewport>\n        </CarouselContext.Provider>\n      </div>\n    )\n  }\n)\n\nCarousel.displayName = 'Carousel'\n\nexport { Carousel }\n",
            "success": true,
            "size": 1226
          },
          {
            "filename": "CarouselArrowButtons.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Carousel/CarouselArrowButtons.tsx",
            "content": "'use client'\nimport { EmblaCarouselType } from 'embla-carousel'\nimport {\n  ButtonHTMLAttributes,\n  cloneElement,\n  forwardRef,\n  isValidElement,\n  useCallback,\n  useEffect,\n  useState\n} from 'react'\nimport { cn } from '../../utils/cn'\nimport { useCarouselContext } from './CarouselContext'\n\ntype UsePrevNextButtonsType = {\n  prevBtnDisabled: boolean\n  nextBtnDisabled: boolean\n  onPrevButtonClick: () => void\n  onNextButtonClick: () => void\n}\n\nexport const usePrevNextButtons = (\n  emblaApi: EmblaCarouselType | undefined\n): UsePrevNextButtonsType => {\n  const [prevBtnDisabled, setPrevBtnDisabled] = useState(true)\n  const [nextBtnDisabled, setNextBtnDisabled] = useState(true)\n\n  const onPrevButtonClick = useCallback(() => {\n    if (!emblaApi) return\n    emblaApi.scrollPrev()\n  }, [emblaApi])\n\n  const onNextButtonClick = useCallback(() => {\n    if (!emblaApi) return\n    emblaApi.scrollNext()\n  }, [emblaApi])\n\n  const onSelect = useCallback((emblaApi: EmblaCarouselType) => {\n    setPrevBtnDisabled(!emblaApi.canScrollPrev())\n    setNextBtnDisabled(!emblaApi.canScrollNext())\n  }, [])\n\n  useEffect(() => {\n    if (!emblaApi) return\n\n    onSelect(emblaApi)\n    emblaApi.on('reInit', onSelect)\n    emblaApi.on('select', onSelect)\n  }, [emblaApi, onSelect])\n\n  return {\n    prevBtnDisabled,\n    nextBtnDisabled,\n    onPrevButtonClick,\n    onNextButtonClick\n  }\n}\n\nexport interface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {\n  asChild?: boolean\n  className?: string\n}\n\nconst CarouselPrevButton = forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ children, asChild, className = '', ...props }, ref) => {\n    const { emblaApi } = useCarouselContext()\n    const { onPrevButtonClick, prevBtnDisabled } = usePrevNextButtons(emblaApi)\n\n    if (asChild && isValidElement(children)) {\n      return cloneElement(children, {\n        itemRef: ref,\n        onClick: onPrevButtonClick,\n        disabled: prevBtnDisabled,\n        ...props\n      })\n    }\n\n    return (\n      <button\n        {...props}\n        onClick={onPrevButtonClick}\n        disabled={prevBtnDisabled}\n        ref={ref}\n        className={cn(\n          'border-border text-text bg-bg-light inline-flex size-[2rem] items-center justify-center rounded-full border disabled:pointer-events-none disabled:opacity-50',\n          className\n        )}\n        type='button'\n      >\n        {!children && (\n          <svg className={'size-3'} viewBox='0 0 532 532'>\n            <path\n              fill='currentColor'\n              d='M355.66 11.354c13.793-13.805 36.208-13.805 50.001 0 13.785 13.804 13.785 36.238 0 50.034L201.22 266l204.442 204.61c13.785 13.805 13.785 36.239 0 50.044-13.793 13.796-36.208 13.796-50.002 0a5994246.277 5994246.277 0 0 0-229.332-229.454 35.065 35.065 0 0 1-10.326-25.126c0-9.2 3.393-18.26 10.326-25.2C172.192 194.973 332.731 34.31 355.66 11.354Z'\n            />\n          </svg>\n        )}\n        {children}\n      </button>\n    )\n  }\n)\n\nCarouselPrevButton.displayName = 'CarouselPrevButton'\n\nconst CarouselNextButton = forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ children, asChild, className = '', ...props }, ref) => {\n    const { emblaApi } = useCarouselContext()\n    const { onNextButtonClick, nextBtnDisabled } = usePrevNextButtons(emblaApi)\n\n    if (asChild && isValidElement(children)) {\n      return cloneElement(children, {\n        itemRef: ref,\n        onClick: onNextButtonClick,\n        disabled: nextBtnDisabled,\n        ...props\n      })\n    }\n\n    return (\n      <button\n        {...props}\n        onClick={onNextButtonClick}\n        disabled={nextBtnDisabled}\n        ref={ref}\n        className={cn(\n          'border-border text-text bg-bg-light inline-flex size-[2rem] items-center justify-center rounded-full border disabled:pointer-events-none disabled:opacity-50',\n          className\n        )}\n        type='button'\n      >\n        {!children && (\n          <svg className={'size-3'} viewBox='0 0 532 532'>\n            <path\n              fill='currentColor'\n              d='M176.34 520.646c-13.793 13.805-36.208 13.805-50.001 0-13.785-13.804-13.785-36.238 0-50.034L330.78 266 126.34 61.391c-13.785-13.805-13.785-36.239 0-50.044 13.793-13.796 36.208-13.796 50.002 0 22.928 22.947 206.395 206.507 229.332 229.454a35.065 35.065 0 0 1 10.326 25.126c0 9.2-3.393 18.26-10.326 25.2-45.865 45.901-206.404 206.564-229.332 229.52Z'\n            />\n          </svg>\n        )}\n        {children}\n      </button>\n    )\n  }\n)\n\nCarouselNextButton.displayName = 'CarouselNextButton'\n\nexport { CarouselNextButton, CarouselPrevButton }\n",
            "success": true,
            "size": 4549
          },
          {
            "filename": "Control.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Carousel/Control.tsx",
            "content": "'use client'\nimport { HTMLAttributes, Ref, forwardRef } from 'react'\nimport { cn } from '../../utils/cn'\n\nexport const CarouselControl = forwardRef<\n  HTMLDivElement,\n  HTMLAttributes<HTMLDivElement>\n>(({ children, className, ...props }, ref: Ref<HTMLDivElement>) => {\n  return (\n    <div\n      {...props}\n      className={cn(\n        'absolute left-0 top-0 z-50 mt-[1.8rem] flex w-full items-center justify-between',\n        className\n      )}\n      ref={ref}\n    >\n      {children}\n    </div>\n  )\n})\n\nCarouselControl.displayName = 'CarouselControl'\n",
            "success": true,
            "size": 551
          },
          {
            "filename": "Indicators.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Carousel/Indicators.tsx",
            "content": "'use client'\nimport { HTMLAttributes, Ref, forwardRef } from 'react'\nimport { cn } from '../../utils/cn'\nimport { useCarouselContext } from './CarouselContext'\nimport { DotButton, useDotButton } from './CarouselDotButton'\n\nexport interface CarouselIndicatorsProps\n  extends HTMLAttributes<HTMLDivElement> {\n  dotButtonStyle?: string\n}\n\nexport const CarouselIndicators = forwardRef<\n  HTMLDivElement,\n  CarouselIndicatorsProps\n>(({ className, dotButtonStyle, ...props }, ref: Ref<HTMLDivElement>) => {\n  const { emblaApi } = useCarouselContext()\n  const { selectedIndex, scrollSnaps, onDotButtonClick } =\n    useDotButton(emblaApi)\n  return (\n    <div\n      {...props}\n      className={cn(\n        'absolute bottom-0 left-1/2 flex w-full -translate-x-1/2 flex-wrap items-center gap-2',\n        className\n      )}\n      ref={ref}\n    >\n      {scrollSnaps.map((number, index) => (\n        <DotButton\n          key={number}\n          onClick={() => onDotButtonClick(index)}\n          className={cn(\n            'border-border inline-flex size-3 rounded-full border-2',\n            `${index === selectedIndex && 'border-primary'}`,\n            dotButtonStyle\n          )}\n        />\n      ))}\n    </div>\n  )\n})\n\nCarouselIndicators.displayName = 'CarouselIndicators'\n",
            "success": true,
            "size": 1261
          },
          {
            "filename": "Item.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Carousel/Item.tsx",
            "content": "'use client'\nimport {\n  HTMLAttributes,\n  Ref,\n  cloneElement,\n  forwardRef,\n  isValidElement\n} from 'react'\nimport { cn } from '../../utils/cn'\n\nexport interface CarouselItemProps extends HTMLAttributes<HTMLDivElement> {\n  asChild?: boolean\n}\n\nexport const CarouselItem = forwardRef<HTMLDivElement, CarouselItemProps>(\n  ({ children, asChild, className, ...props }, ref: Ref<HTMLDivElement>) => {\n    if (asChild && isValidElement(children)) {\n      return cloneElement(children, {\n        itemRef: ref,\n        ...props\n      })\n    }\n\n    return (\n      <div\n        {...props}\n        className={cn(\n          'h-auto min-w-0 flex-[0_0_100%] overflow-hidden pl-4',\n          className\n        )}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  }\n)\n\nCarouselItem.displayName = 'CarouselItem'\n",
            "success": true,
            "size": 813
          },
          {
            "filename": "Slides.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Carousel/Slides.tsx",
            "content": "'use client'\nimport { HTMLAttributes, Ref, forwardRef } from 'react'\nimport { cn } from '../../utils/cn'\n\nexport const CarouselSlides = forwardRef<\n  HTMLDivElement,\n  HTMLAttributes<HTMLDivElement>\n>(({ children, className, ...props }, ref: Ref<HTMLDivElement>) => {\n  return (\n    <div {...props} className={cn('-ml-4 flex', className)} ref={ref}>\n      {children}\n    </div>\n  )\n})\n\nCarouselSlides.displayName = 'CarouselSlides'\n",
            "success": true,
            "size": 432
          },
          {
            "filename": "CarouselContext.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Carousel/CarouselContext.tsx",
            "content": "'use client'\nimport { EmblaCarouselType } from 'embla-carousel'\nimport { createContext, useContext } from 'react'\n\ntype EmblaViewportRefType = <ViewportElement extends HTMLElement>(\n  instance: ViewportElement | null\n) => void\n\ntype CarouselContextPropTypes = {\n  emblaApi: EmblaCarouselType | undefined\n  emblaRef: EmblaViewportRefType\n}\n\nexport const CarouselContext = createContext<\n  CarouselContextPropTypes | undefined\n>(undefined)\n\nexport function useCarouselContext() {\n  const context = useContext(CarouselContext)\n  if (!context) {\n    throw new Error(\n      'useCarouselContext should be used within the CarouselContext provider!'\n    )\n  }\n\n  return context\n}\n",
            "success": true,
            "size": 672
          },
          {
            "filename": "CarouselDotButton.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Carousel/CarouselDotButton.tsx",
            "content": "'use client'\nimport { EmblaCarouselType } from 'embla-carousel'\nimport {\n  ButtonHTMLAttributes,\n  cloneElement,\n  forwardRef,\n  isValidElement,\n  useCallback,\n  useEffect,\n  useState\n} from 'react'\n\ntype UseDotButtonType = {\n  selectedIndex: number\n  scrollSnaps: number[]\n  onDotButtonClick: (index: number) => void\n}\n\nexport const useDotButton = (\n  emblaApi: EmblaCarouselType | undefined\n): UseDotButtonType => {\n  const [selectedIndex, setSelectedIndex] = useState(0)\n  const [scrollSnaps, setScrollSnaps] = useState<number[]>([])\n\n  const onDotButtonClick = useCallback(\n    (index: number) => {\n      if (!emblaApi) return\n      emblaApi.scrollTo(index)\n    },\n    [emblaApi]\n  )\n\n  const onInit = useCallback((emblaApi: EmblaCarouselType) => {\n    setScrollSnaps(emblaApi.scrollSnapList())\n  }, [])\n\n  const onSelect = useCallback((emblaApi: EmblaCarouselType) => {\n    setSelectedIndex(emblaApi.selectedScrollSnap())\n  }, [])\n\n  useEffect(() => {\n    if (!emblaApi) return\n\n    onInit(emblaApi)\n    onSelect(emblaApi)\n    emblaApi.on('reInit', onInit)\n    emblaApi.on('reInit', onSelect)\n    emblaApi.on('select', onSelect)\n  }, [emblaApi, onInit, onSelect])\n\n  return {\n    selectedIndex,\n    scrollSnaps,\n    onDotButtonClick\n  }\n}\n\nexport interface DotButtonProps\n  extends ButtonHTMLAttributes<HTMLButtonElement> {\n  asChild?: boolean\n}\n\nexport const DotButton = forwardRef<HTMLButtonElement, DotButtonProps>(\n  ({ children, asChild, className, ...props }, ref) => {\n    if (asChild && isValidElement(children)) {\n      return cloneElement(children, {\n        itemRef: ref,\n        ...props\n      })\n    }\n\n    return (\n      <button ref={ref} type='button' {...props} className={`${className}`}>\n        {children}\n      </button>\n    )\n  }\n)\n\nDotButton.displayName = 'DotButton'\n",
            "success": true,
            "size": 1795
          },
          {
            "filename": "Viewport.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Carousel/Viewport.tsx",
            "content": "'use client'\nimport { HTMLAttributes, Ref, forwardRef } from 'react'\nimport { useCarouselContext } from './CarouselContext'\n\nexport const CarouselViewport = forwardRef<\n  HTMLDivElement,\n  HTMLAttributes<HTMLDivElement>\n>(({ children }, ref: Ref<HTMLDivElement>) => {\n  const { emblaRef } = useCarouselContext()\n\n  return (\n    <div className={`overflow-hidden`} ref={ref || emblaRef}>\n      {children}\n    </div>\n  )\n})\n\nCarouselViewport.displayName = 'CarouselViewport'\n",
            "success": true,
            "size": 472
          },
          {
            "filename": "index.ts",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Carousel/index.ts",
            "content": "export { Carousel } from './Carousel'\nexport { CarouselNextButton, CarouselPrevButton } from './CarouselArrowButtons'\nexport { CarouselControl } from './Control'\nexport { CarouselIndicators } from './Indicators'\nexport { CarouselItem } from './Item'\nexport { CarouselSlides } from './Slides'\n",
            "success": true,
            "size": 292
          }
        ]
      }
    },
    "checkbox": {
      "id": "checkbox",
      "name": "Checkbox",
      "path": "Checkbox",
      "dependencies": [
        "lucide-react"
      ],
      "utils": [
        "cn"
      ],
      "files": {
        "javascript": [
          {
            "filename": "Checkbox.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Checkbox/Checkbox.jsx",
            "content": "import { Check } from 'lucide-react'\nimport { cn } from '../../utils/cn'\n\nexport const Checkbox = ({\n  label,\n  checked,\n  onChange,\n  disabled = false,\n  className = '',\n  size = 'md',\n  variant = 'default',\n  checkedIcon,\n  checkboxClassName = '',\n  labelClassName = ''\n}) => {\n  const handleChange = event => {\n    if (!disabled) {\n      onChange(event.target.checked)\n    }\n  }\n\n  const sizeClasses = {\n    sm: 'w-4 h-4',\n    md: 'w-5 h-5',\n    lg: 'w-6 h-6'\n  }\n\n  const iconSizes = {\n    sm: 12,\n    md: 16,\n    lg: 20\n  }\n\n  const variantClasses = {\n    default: 'rounded-sm',\n    rounded: 'rounded-full'\n  }\n\n  return (\n    <label\n      className={`text-text flex cursor-pointer select-none items-center gap-3 transition-all duration-200 ${disabled && 'pointer-events-none opacity-50'} ${className} `}\n    >\n      <div className='relative'>\n        <input\n          type='checkbox'\n          checked={checked}\n          onChange={handleChange}\n          disabled={disabled}\n          className='sr-only'\n        />\n        <div\n          className={cn(\n            sizeClasses[size],\n            variantClasses[variant],\n            'flex items-center justify-center border transition-all duration-200 ease-in-out',\n            checked\n              ? 'bg-primary text-bg-light border-primary shadow-md'\n              : 'border-border bg-transparent',\n            checkboxClassName\n          )}\n        >\n          {checked &&\n            (checkedIcon ? (\n              checkedIcon\n            ) : (\n              <Check\n                size={iconSizes[size]}\n                className={`transition-all duration-200 ease-in-out`}\n              />\n            ))}\n        </div>\n      </div>\n      <span className={cn('transition-colors duration-200', labelClassName)}>\n        {label}\n      </span>\n    </label>\n  )\n}\n",
            "success": true,
            "size": 1826
          },
          {
            "filename": "index.js",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Checkbox/index.js",
            "content": "export * from './Checkbox'\n",
            "success": true,
            "size": 27
          }
        ],
        "typescript": [
          {
            "filename": "Checkbox.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Checkbox/Checkbox.tsx",
            "content": "import { Check } from 'lucide-react'\nimport React, { ChangeEvent } from 'react'\nimport { cn } from '../../utils/cn'\n\ninterface CheckboxProps {\n  label: string\n  checked: boolean\n  onChange: (checked: boolean) => void\n  disabled?: boolean\n  className?: string\n  size?: 'sm' | 'md' | 'lg'\n  variant?: 'default' | 'rounded'\n  checkedIcon?: React.ReactNode\n  checkboxClassName?: string\n  labelClassName?: string\n}\n\nexport const Checkbox: React.FC<CheckboxProps> = ({\n  label,\n  checked,\n  onChange,\n  disabled = false,\n  className = '',\n  size = 'md',\n  variant = 'default',\n  checkedIcon,\n  checkboxClassName = '',\n  labelClassName = ''\n}) => {\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (!disabled) {\n      onChange(event.target.checked)\n    }\n  }\n\n  const sizeClasses = {\n    sm: 'w-4 h-4',\n    md: 'w-5 h-5',\n    lg: 'w-6 h-6'\n  }\n\n  const iconSizes = {\n    sm: 12,\n    md: 16,\n    lg: 20\n  }\n\n  const variantClasses = {\n    default: 'rounded-sm',\n    rounded: 'rounded-full'\n  }\n\n  return (\n    <label\n      className={`text-text flex cursor-pointer items-center gap-3 transition-all duration-200 select-none ${disabled && 'pointer-events-none opacity-50'\n        } ${className} `}\n    >\n      <div className='relative'>\n        <input\n          type='checkbox'\n          checked={checked}\n          onChange={handleChange}\n          disabled={disabled}\n          className='sr-only'\n        />\n        <div\n          className={cn(\n            sizeClasses[size],\n            variantClasses[variant],\n            'flex items-center justify-center border transition-all duration-200 ease-in-out',\n            checked\n              ? 'bg-primary text-bg-light border-primary shadow-md'\n              : 'border-border bg-transparent',\n            checkboxClassName\n          )}\n        >\n          {checked &&\n            (checkedIcon ? (\n              checkedIcon\n            ) : (\n              <Check\n                size={iconSizes[size]}\n                className={`transition-all duration-200 ease-in-out`}\n              />\n            ))}\n        </div>\n      </div>\n      <span className={cn('transition-colors duration-200', labelClassName)}>\n        {label}\n      </span>\n    </label>\n  )\n}\n",
            "success": true,
            "size": 2230
          },
          {
            "filename": "index.ts",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Checkbox/index.ts",
            "content": "export * from './Checkbox'\n",
            "success": true,
            "size": 27
          }
        ]
      }
    },
    "circular-progress-bar": {
      "id": "circular-progress-bar",
      "name": "CircularProgressBar",
      "path": "CircularProgressBar",
      "dependencies": [],
      "utils": [
        "cn"
      ],
      "files": {
        "javascript": [
          {
            "filename": "CircularProgressBar.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/CircularProgressBar/CircularProgressBar.jsx",
            "content": "'use client'\n\nimport { useEffect, useRef, useState } from 'react'\nimport { cn } from '../../utils/cn'\n\nexport const CircularProgressBar = ({\n  value = 75,\n  className = '',\n  onVisible,\n  duration = 2,\n  strokeColor = 'var(--color-bg-light)',\n  strokeFillColor = 'var(--color-primary)',\n  strokeWidth = 2,\n  contentClassName = '',\n  hideValue = false,\n  children,\n  onClick,\n  ...rest\n}) => {\n  const [isVisible, setIsVisible] = useState(false)\n  const [percentage, setPercentage] = useState(0)\n  const svgRef = useRef(null)\n\n  // Clamp value to avoid unexpected dashoffset results\n  const clampedValue = Math.min(Math.max(value, 0), 100)\n\n  // Calculate how long each increment should take\n  const durationValue = (duration * 1000) / clampedValue\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        setIsVisible(entry.isIntersecting)\n      },\n      {\n        root: null,\n        rootMargin: '0px',\n        threshold: 0.5\n      }\n    )\n\n    if (svgRef.current) {\n      observer.observe(svgRef.current)\n    }\n\n    return () => {\n      if (svgRef.current) {\n        observer.unobserve(svgRef.current)\n      }\n      observer.disconnect()\n    }\n  }, [])\n\n  useEffect(() => {\n    if (onVisible && !isVisible) {\n      setPercentage(0)\n    } else if (isVisible) {\n      const interval = setInterval(() => {\n        setPercentage(prev => {\n          if (prev < clampedValue) {\n            return Math.min(prev + 1, clampedValue)\n          } else {\n            clearInterval(interval)\n            return prev\n          }\n        })\n      }, durationValue)\n\n      return () => clearInterval(interval)\n    }\n  }, [onVisible, isVisible, clampedValue, durationValue])\n\n  return (\n    <div\n      className={cn('relative size-24', className)}\n      onClick={onClick}\n      role='progressbar'\n      {...rest}\n    >\n      <div className='absolute left-0 top-0 h-full w-full origin-center -rotate-90 transform'>\n        {/* Background circle */}\n        <svg\n          className='absolute left-1/2 top-1/2 z-0 h-full w-full -translate-x-1/2 -translate-y-1/2'\n          viewBox='0 0 24 24'\n        >\n          <circle\n            cx='12'\n            cy='12'\n            r='10'\n            fill='none'\n            stroke={strokeColor}\n            strokeLinecap='round'\n            strokeWidth={strokeWidth}\n          />\n        </svg>\n        {/* Progress circle */}\n        <svg\n          className='absolute left-1/2 top-1/2 z-10 h-full w-full -translate-x-1/2 -translate-y-1/2 stroke-slate-600'\n          viewBox='0 0 24 24'\n          ref={svgRef}\n        >\n          <circle\n            cx='12'\n            cy='12'\n            r='10'\n            fill='none'\n            stroke={strokeFillColor}\n            strokeLinecap='round'\n            strokeDasharray='62.83'\n            strokeWidth={strokeWidth}\n            style={{\n              strokeDashoffset: `${((100 - percentage) * 62.83) / 100}`\n            }}\n          />\n        </svg>\n        {/* Center content */}\n        <span\n          className={cn(\n            'text-text absolute inset-0 flex h-full w-full rotate-90 items-center justify-center',\n            contentClassName\n          )}\n        >\n          {!children && !hideValue && <>{percentage}%</>}\n          {children && <>{children}</>}\n        </span>\n      </div>\n    </div>\n  )\n}\n",
            "success": true,
            "size": 3333
          },
          {
            "filename": "index.js",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/CircularProgressBar/index.js",
            "content": "export * from './CircularProgressBar'\n",
            "success": true,
            "size": 38
          }
        ],
        "typescript": [
          {
            "filename": "CircularProgressBar.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/CircularProgressBar/CircularProgressBar.tsx",
            "content": "'use client'\n\nimport React, { useEffect, useRef, useState } from 'react'\nimport { cn } from '../../utils/cn'\n\ninterface CircularProgressBarProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  value: number\n  className?: string\n  onVisible?: boolean\n  /**\n   * Duration of the progress bar in seconds\n   *\n   * Default value is 2 seconds\n   */\n  duration?: number\n  strokeColor?: string\n  strokeFillColor?: string\n  strokeWidth?: number\n  contentClassName?: string\n  hideValue?: boolean\n  onClick?: () => void\n}\n\nexport const CircularProgressBar: React.FC<CircularProgressBarProps> = ({\n  value = 75,\n  className = '',\n  onVisible,\n  duration = 2,\n  strokeColor = 'var(--color-bg-light)',\n  strokeFillColor = 'var(--color-primary)',\n  strokeWidth = 2,\n  contentClassName = '',\n  hideValue = false,\n  children,\n  onClick,\n  ...rest\n}) => {\n  const [isVisible, setIsVisible] = useState(false)\n  const [percentage, setPercentage] = useState(0)\n  const svgRef = useRef<SVGSVGElement>(null)\n\n  const durationValue = (duration * 1000) / value\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        setIsVisible(entry.isIntersecting)\n      },\n      {\n        root: null,\n        rootMargin: '0px',\n        threshold: 0.5 // Adjust this threshold as needed\n      }\n    )\n\n    if (svgRef.current) {\n      observer.observe(svgRef.current)\n    }\n\n    return () => {\n      if (svgRef.current) {\n        observer.unobserve(svgRef.current)\n      }\n    }\n  }, [])\n\n  useEffect(() => {\n    if (onVisible && !isVisible) {\n      setPercentage(0)\n    } else if (isVisible) {\n      const interval = setInterval(() => {\n        if (percentage < value) {\n          setPercentage(prevPercentage => Math.min(prevPercentage + 1, value))\n        } else {\n          clearInterval(interval)\n        }\n      }, durationValue)\n\n      return () => clearInterval(interval)\n    }\n  }, [onVisible, isVisible, value])\n\n  return (\n    <div\n      className={cn('relative size-24', className)}\n      onClick={onClick}\n      role='progressbar'\n      {...rest}\n    >\n      <div className='absolute left-0 top-0 h-full w-full origin-center -rotate-90 transform'>\n        <svg\n          className='absolute left-1/2 top-1/2 z-0 h-full w-full -translate-x-1/2 -translate-y-1/2'\n          viewBox='0 0 24 24'\n          ref={svgRef}\n        >\n          <circle\n            className=' '\n            cx='12'\n            cy='12'\n            r='10'\n            fill='none'\n            stroke={strokeColor}\n            strokeLinecap='round'\n            strokeWidth={strokeWidth}\n          />\n        </svg>\n        <svg\n          className='absolute left-1/2 top-1/2 z-10 h-full w-full -translate-x-1/2 -translate-y-1/2 stroke-slate-600'\n          viewBox='0 0 24 24'\n          ref={svgRef}\n        >\n          <circle\n            className=' '\n            cx='12'\n            cy='12'\n            r='10'\n            fill='none'\n            stroke={strokeFillColor}\n            strokeLinecap='round'\n            strokeDasharray='62.83'\n            strokeWidth={strokeWidth}\n            style={{\n              strokeDashoffset: `${((100 - percentage) * 62.83) / 100}`\n            }}\n          />\n        </svg>\n        <span\n          className={`${contentClassName} text-text absolute inset-0 flex h-full w-full rotate-90 items-center justify-center`}\n        >\n          {!children && !hideValue && <>{percentage}%</>}\n          {children && <>{children}</>}\n        </span>\n      </div>\n    </div>\n  )\n}\n",
            "success": true,
            "size": 3501
          },
          {
            "filename": "index.ts",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/CircularProgressBar/index.ts",
            "content": "export * from './CircularProgressBar'\n",
            "success": true,
            "size": 38
          }
        ]
      }
    },
    "date-picker": {
      "id": "date-picker",
      "name": "DatePicker",
      "path": "DatePicker",
      "dependencies": [
        "lucide-react"
      ],
      "utils": [
        "cn"
      ],
      "files": {
        "javascript": [
          {
            "filename": "DatePicker.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/DatePicker/DatePicker.jsx",
            "content": "'use client'\nimport { ChevronLeft, ChevronRight } from 'lucide-react'\nimport { useEffect, useState } from 'react'\nimport { cn } from '../../utils/cn'\nimport {\n  Dropdown,\n  DropdownAction,\n  DropdownContent,\n  DropdownItem,\n  DropdownList\n} from '../Dropdown'\nimport { Popover, PopoverAction, PopoverContent } from '../Popover/index.js'\n\nexport const DatePicker = ({\n  onChange,\n  initialDates = [],\n  isRange = false,\n  shape = 'circle',\n  placeholder = 'Select your date',\n  className = '',\n  calendarContainerClassName = ''\n}) => {\n  const [currentDate, setCurrentDate] = useState(() => {\n    const initDate =\n      Array.isArray(initialDates) && initialDates.length > 0\n        ? new Date(initialDates[0])\n        : new Date()\n    return initDate\n  })\n  const [selectedDates, setSelectedDates] = useState(\n    initialDates.map(date => new Date(date))\n  )\n\n  const [years, setYears] = useState([])\n\n  const monthNames = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December'\n  ]\n\n  useEffect(() => {\n    const currentYear = new Date().getFullYear()\n    setYears(Array.from({ length: 201 }, (_, i) => currentYear - 100 + i))\n  }, [])\n\n  const daysInMonth = date =>\n    new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate()\n  const firstDayOfMonth = date =>\n    new Date(date.getFullYear(), date.getMonth(), 1).getDay()\n\n  const generateCalendar = () => {\n    const days = daysInMonth(currentDate)\n    const startDay = firstDayOfMonth(currentDate)\n    const calendarDays = []\n\n    for (let i = 0; i < startDay; i++) {\n      calendarDays.push(null)\n    }\n\n    for (let i = 1; i <= days; i++) {\n      calendarDays.push(\n        new Date(currentDate.getFullYear(), currentDate.getMonth(), i)\n      )\n    }\n\n    return calendarDays\n  }\n\n  const handleDateClick = date => {\n    let newDates = []\n\n    if (isRange) {\n      if (selectedDates.length === 0) {\n        newDates = [date]\n      } else if (selectedDates.length === 1) {\n        newDates = [selectedDates[0], date].sort(\n          (a, b) => a.getTime() - b.getTime()\n        )\n      } else if (selectedDates.length === 2) {\n        if (\n          date.getTime() === selectedDates[0].getTime() ||\n          date.getTime() === selectedDates[1].getTime()\n        ) {\n          newDates = []\n        } else if (date > selectedDates[0] && date < selectedDates[1]) {\n          newDates = [selectedDates[0], date]\n        } else if (date < selectedDates[0]) {\n          newDates = [date, selectedDates[1]]\n        } else {\n          newDates = [selectedDates[0], date]\n        }\n      }\n    } else {\n      newDates = [date]\n    }\n\n    setSelectedDates(newDates)\n    onChange(newDates)\n  }\n\n  const handlePrevMonth = () => {\n    setCurrentDate(\n      new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, 1)\n    )\n  }\n\n  const handleNextMonth = () => {\n    setCurrentDate(\n      new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 1)\n    )\n  }\n\n  const formatDate = date => {\n    const day = date.getDate()\n    const month = monthNames[date.getMonth()]\n    const year = date.getFullYear()\n    const suffix = ['th', 'st', 'nd', 'rd'][\n      day % 10 > 3 ? 0 : (day % 100) - (day % 10) != 10 ? day % 10 : 0\n    ]\n    return `${month} ${day}${suffix}, ${year}`\n  }\n\n  const formatDateRange = dates => {\n    if (dates.length === 0) return placeholder\n    if (dates.length === 1) return formatDate(dates[0])\n    if (isRange && dates.length === 2) {\n      return `${formatShortDate(dates[0])} - ${formatShortDate(dates[1])}`\n    }\n    return formatDate(dates[0])\n  }\n\n  const formatShortDate = date => {\n    const monthNames = [\n      'Jan',\n      'Feb',\n      'Mar',\n      'Apr',\n      'May',\n      'Jun',\n      'Jul',\n      'Aug',\n      'Sep',\n      'Oct',\n      'Nov',\n      'Dec'\n    ]\n    return `${monthNames[date.getMonth()]} ${date\n      .getDate()\n      .toString()\n      .padStart(2, '0')}, ${date.getFullYear()}`\n  }\n  return (\n    <div className='relative'>\n      <Popover>\n        <PopoverAction\n          className={cn(\n            'border-border bg-bg outline-hidden focus-visible:outlined w-full rounded-md border px-4 py-2',\n            className\n          )}\n        >\n          {formatDateRange(selectedDates)}\n        </PopoverAction>\n        <PopoverContent className='w-auto p-0'>\n          <div\n            className={cn(\n              'bg-bg rounded-md p-4 shadow-lg',\n              calendarContainerClassName\n            )}\n          >\n            <div className='flex items-center justify-between gap-2 py-2'>\n              <button\n                onClick={handlePrevMonth}\n                className={cn(\n                  'border-border border p-1',\n                  shape === 'circle'\n                    ? 'rounded-full'\n                    : shape === 'rounded-sm'\n                      ? 'rounded-md'\n                      : ''\n                )}\n              >\n                <ChevronLeft />\n              </button>\n              <div className='flex flex-1 justify-center gap-3'>\n                <Dropdown>\n                  <DropdownAction className=''>\n                    {monthNames[currentDate.getMonth()]}\n                  </DropdownAction>\n                  <DropdownContent>\n                    <DropdownList>\n                      {monthNames.map((month, index) => (\n                        <DropdownItem\n                          className={`${\n                            currentDate.getMonth() == index ? 'bg-bg-light' : ''\n                          }`}\n                          key={month}\n                          onClick={() => {\n                            const cDate = new Date()\n                            if (cDate.getMonth() === index) {\n                              setCurrentDate(\n                                new Date(\n                                  currentDate.getFullYear(),\n                                  index,\n                                  cDate.getDate()\n                                )\n                              )\n                            } else\n                              setCurrentDate(\n                                new Date(currentDate.getFullYear(), index, 1)\n                              )\n                          }}\n                        >\n                          {month}\n                        </DropdownItem>\n                      ))}\n                    </DropdownList>\n                  </DropdownContent>\n                </Dropdown>\n                <Dropdown>\n                  <DropdownAction className=''>\n                    {currentDate.getFullYear()}\n                  </DropdownAction>\n                  <DropdownContent\n                    className='overflow-y-auto'\n                    style={{ maxHeight: '300px' }}\n                  >\n                    <DropdownList>\n                      {years.map(year => (\n                        <DropdownItem\n                          className={``}\n                          activeClassName='bg-bg-light'\n                          key={year}\n                          onClick={() => {\n                            if (\n                              year == new Date().getFullYear() &&\n                              currentDate.getMonth() == new Date().getMonth()\n                            ) {\n                              const cDate = new Date()\n                              setCurrentDate(\n                                new Date(\n                                  year,\n                                  cDate.getMonth(),\n                                  cDate.getDate()\n                                )\n                              )\n                            } else\n                              setCurrentDate(\n                                new Date(year, currentDate.getMonth(), 1)\n                              )\n                          }}\n                          isSelected={year === currentDate.getFullYear()}\n                        >\n                          {year}\n                        </DropdownItem>\n                      ))}\n                    </DropdownList>\n                  </DropdownContent>\n                </Dropdown>\n              </div>\n              <button\n                onClick={handleNextMonth}\n                className={cn(\n                  'border-border border p-1',\n                  shape === 'circle'\n                    ? 'rounded-full'\n                    : shape === 'rounded-sm'\n                      ? 'rounded-md'\n                      : ''\n                )}\n              >\n                <ChevronRight />\n              </button>\n            </div>\n            <div className='grid grid-cols-[repeat(7,minmax(2rem,1fr))] gap-1'>\n              <div className='border-border col-start-1 col-end-8 grid grid-cols-[repeat(7,minmax(2rem,1fr))] gap-1 border-b border-t'>\n                {['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'].map(day => (\n                  <div\n                    key={day}\n                    className='flex size-8 items-center justify-center text-center text-sm font-bold'\n                  >\n                    {day}\n                  </div>\n                ))}\n              </div>\n              {generateCalendar().map((date, index) => (\n                <button\n                  key={index}\n                  onClick={() => date && handleDateClick(date)}\n                  className={cn(\n                    'h-8 w-8 text-center',\n                    shape === 'circle'\n                      ? 'rounded-full'\n                      : shape === 'rounded-sm'\n                        ? 'rounded-md'\n                        : '',\n                    !date && 'invisible',\n                    date && 'hover:bg-primary hover:text-bg-light',\n                    date &&\n                      date.getDate() === currentDate.getDate() &&\n                      ((isRange && selectedDates.length < 2) ||\n                        (!isRange && selectedDates.length === 0)) &&\n                      'bg-bg-light',\n                    date &&\n                      selectedDates.some(\n                        d => d.toDateString() === date.toDateString()\n                      ) &&\n                      'bg-primary text-bg-light',\n                    date &&\n                      isRange &&\n                      selectedDates.length === 2 &&\n                      date > selectedDates[0] &&\n                      date < selectedDates[1] &&\n                      'bg-primary text-bg-light'\n                  )}\n                >\n                  {date ? date.getDate() : ''}\n                </button>\n              ))}\n            </div>\n          </div>\n        </PopoverContent>\n      </Popover>\n    </div>\n  )\n}\n",
            "success": true,
            "size": 10755
          },
          {
            "filename": "index.js",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/DatePicker/index.js",
            "content": "export * from './DatePicker'\n",
            "success": true,
            "size": 29
          }
        ],
        "typescript": [
          {
            "filename": "DatePicker.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/DatePicker/DatePicker.tsx",
            "content": "'use client'\nimport { ChevronLeft, ChevronRight } from 'lucide-react'\nimport React, { useEffect, useState } from 'react'\nimport { cn } from '../../utils/cn'\nimport {\n  Dropdown,\n  DropdownAction,\n  DropdownContent,\n  DropdownItem,\n  DropdownList\n} from '../Dropdown'\nimport { Popover, PopoverAction, PopoverContent } from '../Popover'\n\ninterface DatePickerProps {\n  onChange: (dates: Date[]) => void\n  initialDates?: Date[] | string[]\n  isRange?: boolean\n  shape?: 'rounded-sm' | 'square' | 'circle'\n  placeholder?: string\n  className?: string\n  show?: boolean\n  calendarContainerClassName?: string\n}\n\nexport const DatePicker: React.FC<DatePickerProps> = ({\n  onChange,\n  initialDates = [],\n  isRange = false,\n  shape = 'circle',\n  placeholder = 'Select your date',\n  className = '',\n  calendarContainerClassName = ''\n}) => {\n  const [currentDate, setCurrentDate] = useState(() => {\n    const initDate =\n      Array.isArray(initialDates) && initialDates.length > 0\n        ? new Date(initialDates[0])\n        : new Date()\n    return initDate\n  })\n  const [selectedDates, setSelectedDates] = useState<Date[]>(\n    initialDates.map(date => new Date(date))\n  )\n\n  const [years, setYears] = useState<number[]>([])\n\n  const monthNames = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December'\n  ]\n\n  useEffect(() => {\n    const currentYear = new Date().getFullYear()\n    setYears(Array.from({ length: 201 }, (_, i) => currentYear - 100 + i))\n  }, [])\n\n  const daysInMonth = (date: Date) =>\n    new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate()\n  const firstDayOfMonth = (date: Date) =>\n    new Date(date.getFullYear(), date.getMonth(), 1).getDay()\n\n  const generateCalendar = () => {\n    const days = daysInMonth(currentDate)\n    const startDay = firstDayOfMonth(currentDate)\n    const calendarDays = []\n\n    for (let i = 0; i < startDay; i++) {\n      calendarDays.push(null)\n    }\n\n    for (let i = 1; i <= days; i++) {\n      calendarDays.push(\n        new Date(currentDate.getFullYear(), currentDate.getMonth(), i)\n      )\n    }\n\n    return calendarDays\n  }\n\n  const handleDateClick = (date: Date) => {\n    let newDates: Date[] = []\n\n    if (isRange) {\n      if (selectedDates.length === 0) {\n        newDates = [date]\n      } else if (selectedDates.length === 1) {\n        newDates = [selectedDates[0], date].sort(\n          (a, b) => a.getTime() - b.getTime()\n        )\n      } else if (selectedDates.length === 2) {\n        if (\n          date.getTime() === selectedDates[0].getTime() ||\n          date.getTime() === selectedDates[1].getTime()\n        ) {\n          newDates = []\n        } else if (date > selectedDates[0] && date < selectedDates[1]) {\n          newDates = [selectedDates[0], date]\n        } else if (date < selectedDates[0]) {\n          newDates = [date, selectedDates[1]]\n        } else {\n          newDates = [selectedDates[0], date]\n        }\n      }\n    } else {\n      newDates = [date]\n    }\n\n    setSelectedDates(newDates)\n    onChange(newDates)\n  }\n\n  const handlePrevMonth = () => {\n    setCurrentDate(\n      new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, 1)\n    )\n  }\n\n  const handleNextMonth = () => {\n    setCurrentDate(\n      new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 1)\n    )\n  }\n\n  const formatDate = (date: Date): string => {\n    const day = date.getDate()\n    const month = monthNames[date.getMonth()]\n    const year = date.getFullYear()\n    const suffix = ['th', 'st', 'nd', 'rd'][\n      day % 10 > 3 ? 0 : (day % 100) - (day % 10) != 10 ? day % 10 : 0\n    ]\n    return `${month} ${day}${suffix}, ${year}`\n  }\n\n  const formatDateRange = (dates: Date[]): string => {\n    if (dates.length === 0) return placeholder\n    if (dates.length === 1) return formatDate(dates[0])\n    if (isRange && dates.length === 2) {\n      return `${formatShortDate(dates[0])} - ${formatShortDate(dates[1])}`\n    }\n    return formatDate(dates[0])\n  }\n\n  const formatShortDate = (date: Date): string => {\n    const monthNames = [\n      'Jan',\n      'Feb',\n      'Mar',\n      'Apr',\n      'May',\n      'Jun',\n      'Jul',\n      'Aug',\n      'Sep',\n      'Oct',\n      'Nov',\n      'Dec'\n    ]\n    return `${monthNames[date.getMonth()]} ${date.getDate().toString().padStart(2, '0')}, ${date.getFullYear()}`\n  }\n  return (\n    <div className='relative'>\n      <Popover>\n        <PopoverAction\n          className={cn(\n            'border-border bg-bg focus-visible:outlined w-full rounded-md border px-4 py-2 outline-hidden',\n            className\n          )}\n        >\n          {formatDateRange(selectedDates)}\n        </PopoverAction>\n        <PopoverContent className='w-auto p-0'>\n          <div\n            className={cn(\n              'bg-bg rounded-md p-4 shadow-lg',\n              calendarContainerClassName\n            )}\n          >\n            <div className='flex items-center justify-between gap-2 py-2'>\n              <button\n                onClick={handlePrevMonth}\n                className={cn(\n                  'border-border border p-1',\n                  shape === 'circle'\n                    ? 'rounded-full'\n                    : shape === 'rounded-sm'\n                      ? 'rounded-md'\n                      : ''\n                )}\n              >\n                <ChevronLeft />\n              </button>\n              <div className='flex flex-1 justify-center gap-3'>\n                <Dropdown>\n                  <DropdownAction className=''>\n                    {monthNames[currentDate.getMonth()]}\n                  </DropdownAction>\n                  <DropdownContent>\n                    <DropdownList>\n                      {monthNames.map((month, index) => (\n                        <DropdownItem\n                          className={`${currentDate.getMonth() == index ? 'bg-bg-light' : ''}`}\n                          key={month}\n                          onClick={() => {\n                            const cDate = new Date()\n                            if (cDate.getMonth() === index) {\n                              setCurrentDate(\n                                new Date(\n                                  currentDate.getFullYear(),\n                                  index,\n                                  cDate.getDate()\n                                )\n                              )\n                            } else\n                              setCurrentDate(\n                                new Date(currentDate.getFullYear(), index, 1)\n                              )\n                          }}\n                        >\n                          {month}\n                        </DropdownItem>\n                      ))}\n                    </DropdownList>\n                  </DropdownContent>\n                </Dropdown>\n                <Dropdown>\n                  <DropdownAction className=''>\n                    {currentDate.getFullYear()}\n                  </DropdownAction>\n                  <DropdownContent\n                    className='overflow-y-auto'\n                    style={{ maxHeight: '300px' }}\n                  >\n                    <DropdownList>\n                      {years.map(year => (\n                        <DropdownItem\n                          className={``}\n                          activeClassName='bg-bg-light'\n                          key={year}\n                          onClick={() => {\n                            if (\n                              year == new Date().getFullYear() &&\n                              currentDate.getMonth() == new Date().getMonth()\n                            ) {\n                              const cDate = new Date()\n                              setCurrentDate(\n                                new Date(\n                                  year,\n                                  cDate.getMonth(),\n                                  cDate.getDate()\n                                )\n                              )\n                            } else\n                              setCurrentDate(\n                                new Date(year, currentDate.getMonth(), 1)\n                              )\n                          }}\n                          isSelected={year === currentDate.getFullYear()}\n                        >\n                          {year}\n                        </DropdownItem>\n                      ))}\n                    </DropdownList>\n                  </DropdownContent>\n                </Dropdown>\n              </div>\n              <button\n                onClick={handleNextMonth}\n                className={cn(\n                  'border-border border p-1',\n                  shape === 'circle'\n                    ? 'rounded-full'\n                    : shape === 'rounded-sm'\n                      ? 'rounded-md'\n                      : ''\n                )}\n              >\n                <ChevronRight />\n              </button>\n            </div>\n            <div className='grid grid-cols-[repeat(7,minmax(2rem,1fr))] gap-1'>\n              <div className='border-border col-start-1 col-end-8 grid grid-cols-[repeat(7,minmax(2rem,1fr))] gap-1 border-t border-b'>\n                {['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'].map(day => (\n                  <div\n                    key={day}\n                    className='flex size-8 items-center justify-center text-center text-sm font-bold'\n                  >\n                    {day}\n                  </div>\n                ))}\n              </div>\n              {generateCalendar().map((date, index) => (\n                <button\n                  key={index}\n                  onClick={() => date && handleDateClick(date)}\n                  className={cn(\n                    'h-8 w-8 text-center',\n                    shape === 'circle'\n                      ? 'rounded-full'\n                      : shape === 'rounded-sm'\n                        ? 'rounded-md'\n                        : '',\n                    !date && 'invisible',\n                    date && 'hover:bg-primary hover:text-bg-light',\n                    date &&\n                    date.getDate() === currentDate.getDate() &&\n                    ((isRange && selectedDates.length < 2) ||\n                      (!isRange && selectedDates.length === 0)) &&\n                    'bg-bg-light',\n                    date &&\n                    selectedDates.some(\n                      d => d.toDateString() === date.toDateString()\n                    ) &&\n                    'bg-primary text-bg-light',\n                    date &&\n                    isRange &&\n                    selectedDates.length === 2 &&\n                    date > selectedDates[0] &&\n                    date < selectedDates[1] &&\n                    'bg-primary text-bg-light'\n                  )}\n                >\n                  {date ? date.getDate() : ''}\n                </button>\n              ))}\n            </div>\n          </div>\n        </PopoverContent>\n      </Popover>\n    </div>\n  )\n}\n",
            "success": true,
            "size": 11043
          },
          {
            "filename": "index.ts",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/DatePicker/index.ts",
            "content": "export * from './DatePicker'\n",
            "success": true,
            "size": 29
          }
        ]
      }
    },
    "divider": {
      "id": "divider",
      "name": "Divider",
      "path": "Divider",
      "dependencies": [],
      "utils": [
        "cn"
      ],
      "files": {
        "javascript": [
          {
            "filename": "Divider.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Divider/Divider.jsx",
            "content": "import { cn } from '../../utils/cn'\n\nexport const Divider = ({\n  orientation = 'horizontal',\n  size = 'md',\n  variant = 'full',\n  borderStyle = 'solid',\n  className = '',\n  children,\n  ...rest\n}) => {\n  const horizontalSizeStyles = {\n    sm: 'border-t-[1px]',\n    md: 'border-t-[2px]',\n    lg: 'border-t-[3px]',\n    xl: 'border-t-[4px]',\n    '2xl': 'border-t-[6px]'\n  }\n  const verticalSizeStyles = {\n    sm: 'border-l-[1px]',\n    md: 'border-l-[2px]',\n    lg: 'border-l-[3px]',\n    xl: 'border-l-[4px]',\n    '2xl': 'border-l-[6px]'\n  }\n\n  const baseStyles = `border-border ${\n    orientation === 'horizontal'\n      ? horizontalSizeStyles[size]\n      : verticalSizeStyles[size]\n  }`\n\n  const orientationStyles = orientation === 'horizontal' ? 'w-full' : 'h-full'\n\n  const variantStyles = {\n    start: 'justify-start',\n    center: 'justify-center',\n    end: 'justify-end',\n    full: ''\n  }\n\n  const borderStyleClass = `border-${borderStyle}`\n\n  if (!children || variant === 'full') {\n    return (\n      <div\n        className={cn(\n          baseStyles,\n          orientationStyles,\n          borderStyleClass,\n          className\n        )}\n      ></div>\n    )\n  }\n\n  return (\n    <div className={`flex items-center ${variantStyles[variant]}`} {...rest}>\n      {variant !== 'start' && (\n        <span\n          className={cn(\n            'mr-4 flex-1',\n            baseStyles,\n            borderStyleClass,\n            orientationStyles,\n            className\n          )}\n        ></span>\n      )}\n      <span className=''>{children}</span>\n      {variant !== 'end' && (\n        <span\n          className={cn(\n            'ml-4 flex-1',\n            baseStyles,\n            borderStyleClass,\n            orientationStyles,\n            className\n          )}\n        ></span>\n      )}\n    </div>\n  )\n}\n",
            "success": true,
            "size": 1800
          },
          {
            "filename": "index.js",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Divider/index.js",
            "content": "export * from './Divider'\n",
            "success": true,
            "size": 26
          }
        ],
        "typescript": [
          {
            "filename": "Divider.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Divider/Divider.tsx",
            "content": "import React, { ReactNode } from 'react'\nimport { cn } from '../../utils/cn'\n\ninterface DividerProps {\n  orientation?: 'horizontal' | 'vertical'\n  size?: 'sm' | 'md' | 'lg' | 'xl' | '2xl'\n  color?: string\n  variant?: 'start' | 'center' | 'end' | 'full'\n  className?: string\n  borderStyle?: 'solid' | 'dashed' | 'dotted' | 'double'\n  children?: ReactNode\n}\n\nexport const Divider: React.FC<DividerProps> = ({\n  orientation = 'horizontal',\n  size = 'md',\n  variant = 'full',\n  borderStyle = 'solid',\n  className = '',\n  children,\n  ...rest\n}) => {\n  const horizontalSizeStyles = {\n    sm: 'border-t-[1px]',\n    md: 'border-t-[2px]',\n    lg: 'border-t-[3px]',\n    xl: 'border-t-[4px]',\n    '2xl': 'border-t-[6px]'\n  }\n  const verticalSizeStyles = {\n    sm: 'border-l-[1px]',\n    md: 'border-l-[2px]',\n    lg: 'border-l-[3px]',\n    xl: 'border-l-[4px]',\n    '2xl': 'border-l-[6px]'\n  }\n\n  const baseStyles = `border-border ${orientation === 'horizontal' ? horizontalSizeStyles[size] : verticalSizeStyles[size]}`\n\n  const orientationStyles = orientation === 'horizontal' ? 'w-full' : 'h-full'\n\n  const variantStyles = {\n    start: 'justify-start',\n    center: 'justify-center',\n    end: 'justify-end',\n    full: ''\n  }\n\n  const borderStyleClass = `border-${borderStyle}`\n\n  if (!children || variant === 'full') {\n    return (\n      <div\n        className={cn(\n          baseStyles,\n          orientationStyles,\n          borderStyleClass,\n          className\n        )}\n      ></div>\n    )\n  }\n\n  return (\n    <div className={`flex items-center ${variantStyles[variant]}`} {...rest}>\n      {variant !== 'start' && (\n        <span\n          className={cn(\n            'mr-4 flex-1',\n            baseStyles,\n            borderStyleClass,\n            orientationStyles,\n            className\n          )}\n        ></span>\n      )}\n      <span className=''>{children}</span>\n      {variant !== 'end' && (\n        <span\n          className={cn(\n            'ml-4 flex-1',\n            baseStyles,\n            borderStyleClass,\n            orientationStyles,\n            className\n          )}\n        ></span>\n      )}\n    </div>\n  )\n}\n",
            "success": true,
            "size": 2124
          },
          {
            "filename": "index.ts",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Divider/index.ts",
            "content": "export * from './Divider'\n",
            "success": true,
            "size": 26
          }
        ]
      }
    },
    "dropdown": {
      "id": "dropdown",
      "name": "Dropdown",
      "path": "Dropdown",
      "dependencies": [
        "lucide-react"
      ],
      "utils": [
        "cn"
      ],
      "files": {
        "javascript": [
          {
            "filename": "Dropdown.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Dropdown/Dropdown.jsx",
            "content": "'use client'\n\nimport { useCallback, useEffect, useRef, useState } from 'react'\nimport { DropdownProvider } from './DropdownContext'\n\nexport const Dropdown = ({\n  children,\n  hover = false,\n  hoverDelay = 0,\n  closeDelay = 100,\n  direction = 'bottom'\n}) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const timeoutRef = useRef(null)\n  const dropdownRef = useRef(null)\n\n  const openDropdown = useCallback(() => {\n    if (timeoutRef.current) clearTimeout(timeoutRef.current)\n    timeoutRef.current = setTimeout(() => setIsOpen(true), hoverDelay)\n  }, [hoverDelay])\n\n  const closeDropdown = useCallback(() => {\n    if (timeoutRef.current) clearTimeout(timeoutRef.current)\n    timeoutRef.current = setTimeout(() => setIsOpen(false), closeDelay)\n  }, [closeDelay])\n\n  const toggleDropdown = useCallback(() => {\n    setIsOpen(prev => !prev)\n  }, [])\n\n  useEffect(() => {\n    return () => {\n      if (timeoutRef.current) clearTimeout(timeoutRef.current)\n    }\n  }, [])\n\n  useEffect(() => {\n    const handleClickOutside = event => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\n        setIsOpen(false)\n      }\n    }\n\n    document.addEventListener('mousedown', handleClickOutside)\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside)\n    }\n  }, [])\n\n  const getPositionClass = () => {\n    switch (direction) {\n      case 'top':\n        return 'bottom-full mb-2'\n      case 'left':\n        return 'right-full mr-2 top-0'\n      case 'right':\n        return 'left-full top-0 ml-2'\n      case 'bottom-right':\n        return 'top-full left-0 mt-2'\n      case 'bottom-left':\n        return 'top-full right-0 mt-2'\n      case 'top-right':\n        return 'bottom-full left-0 mb-2'\n      case 'top-left':\n        return 'bottom-full right-0 mb-2'\n      default:\n        return 'top-full left-0 mt-2'\n    }\n  }\n\n  return (\n    <DropdownProvider\n      value={{\n        isOpen,\n        toggleDropdown: !hover ? toggleDropdown : () => {},\n        closeDropdown: !hover ? closeDropdown : () => {},\n        direction,\n        positionClass: getPositionClass()\n      }}\n    >\n      <div\n        className='relative inline-block text-left'\n        {...(hover\n          ? { onMouseEnter: openDropdown, onMouseLeave: closeDropdown }\n          : {})}\n        ref={dropdownRef}\n      >\n        {children}\n      </div>\n    </DropdownProvider>\n  )\n}\n",
            "success": true,
            "size": 2393
          },
          {
            "filename": "DropdownAction.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Dropdown/DropdownAction.jsx",
            "content": "'use client'\n\nimport { ChevronDown, ChevronLeft, ChevronRight, ChevronUp } from 'lucide-react'\nimport React, { ReactElement, ReactNode, useEffect, useState } from 'react'\nimport { cn } from '../../utils/cn'\nimport { useDropdown } from './DropdownContext'\n\nexport const DropdownAction = ({\n  children,\n  className = '',\n  icon,\n  iconPosition = 'end',\n  ...rest\n}) => {\n  const { toggleDropdown, direction } = useDropdown()\n  const [iconDefault, setIconDefault] = useState(<ChevronDown />)\n  useEffect(() => {\n    if (direction == 'top') {\n      setIconDefault(<ChevronUp />)\n    }\n    if (direction == 'left') {\n      setIconDefault(<ChevronLeft />)\n    }\n    if (direction == 'right') {\n      setIconDefault(<ChevronRight />)\n    }\n  }, [direction])\n\n  return (\n    <button\n      type='button'\n      className={cn(\n        'border-border shadow-xs focus-visible:outline-hidden focus-visible:ring-border flex w-fit items-center justify-center gap-2 whitespace-nowrap rounded-md border bg-transparent px-3 py-2 text-sm focus-visible:ring-2',\n        className\n      )}\n      onClick={toggleDropdown}\n      {...rest}\n    >\n      {iconPosition === 'start' && (icon || iconDefault)}\n      {children}\n      {iconPosition === 'end' && (icon ?? iconDefault)}\n    </button>\n  )\n}\n",
            "success": true,
            "size": 1272
          },
          {
            "filename": "DropdownContent.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Dropdown/DropdownContent.jsx",
            "content": "'use client'\n\nimport { useEffect, useRef } from 'react'\nimport { cn } from '../../utils/cn'\nimport { useDropdown } from './DropdownContext'\n\nexport const DropdownContent = ({ children, className = '', ...rest }) => {\n  const { isOpen, positionClass } = useDropdown()\n  const contentRef = useRef(null)\n\n  useEffect(() => {\n    if (isOpen && contentRef.current) {\n      const selectedItem = contentRef.current.querySelector(\n        '[data-selected=\"true\"]'\n      )\n      if (selectedItem) {\n        const container = contentRef.current\n        const containerHeight = container.clientHeight\n        const itemTop = selectedItem.offsetTop\n        const itemHeight = selectedItem.offsetHeight\n        container.scrollTop = itemTop - containerHeight / 2 + itemHeight / 2\n      }\n    }\n  }, [isOpen])\n\n  if (!isOpen) return null\n\n  return (\n    <div\n      className={cn('bg-bg absolute z-10 rounded-md', positionClass, className)}\n      ref={contentRef}\n      role='presentation'\n      {...rest}\n    >\n      {children}\n    </div>\n  )\n}\n",
            "success": true,
            "size": 1031
          },
          {
            "filename": "DropdownItem.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Dropdown/DropdownItem.jsx",
            "content": "'use client'\nimport { cn } from '../../utils/cn'\nimport { useDropdown } from './DropdownContext'\n\nexport const DropdownItem = ({\n  children,\n  className = '',\n  activeClassName = '',\n  onClick,\n  isSelected = false,\n  isLink = false,\n  ...rest\n}) => {\n  const { closeDropdown } = useDropdown()\n\n  const handleClick = () => {\n    if (onClick) {\n      onClick()\n    }\n    closeDropdown()\n  }\n  if (isLink === true) {\n    return (\n      <a\n        href='#'\n        className={cn(\n          'hover:bg-bg-light/80 block text-nowrap px-4 py-2 text-sm',\n          className,\n          isSelected ? cn('bg-bg-light', activeClassName) : ''\n        )}\n        role='option'\n        area-selected={isSelected}\n        onClick={handleClick}\n        data-selected={isSelected}\n        {...rest}\n      >\n        {children}\n      </a>\n    )\n  }\n  return (\n    <div\n      className={cn(\n        'hover:bg-bg-light/80 block text-nowrap px-4 py-2 text-sm',\n        className,\n        isSelected ? cn('bg-bg-light', activeClassName) : ''\n      )}\n      are-selected={isSelected}\n      role='option'\n      onClick={handleClick}\n      data-selected={isSelected}\n      {...rest}\n    >\n      {children}\n    </div>\n  )\n}\n",
            "success": true,
            "size": 1197
          },
          {
            "filename": "DropdownList.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Dropdown/DropdownList.jsx",
            "content": "import { cn } from '../../utils/cn'\n\nexport const DropdownList = ({ children, className = '', ...rest }) => {\n  return (\n    <div\n      className={cn('border-border border-b py-1 last:border-b-0', className)}\n      {...rest}\n    >\n      {children}\n    </div>\n  )\n}\n",
            "success": true,
            "size": 265
          },
          {
            "filename": "DropdownContext.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Dropdown/DropdownContext.jsx",
            "content": "'use client'\n\nimport { createContext, useContext } from 'react'\n\nconst DropdownContext = createContext(undefined)\n\nexport const DropdownProvider = ({ children, value }) => {\n  return (\n    <DropdownContext.Provider value={value}>\n      {children}\n    </DropdownContext.Provider>\n  )\n}\n\nexport const useDropdown = () => {\n  const context = useContext(DropdownContext)\n  if (context === undefined) {\n    throw new Error('useDropdown must be used within a DropdownProvider')\n  }\n  return context\n}\n",
            "success": true,
            "size": 495
          },
          {
            "filename": "index.js",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Dropdown/index.js",
            "content": "export * from './Dropdown'\nexport * from './DropdownAction'\nexport * from './DropdownContent'\nexport * from './DropdownItem'\nexport * from './DropdownList'\n",
            "success": true,
            "size": 156
          }
        ],
        "typescript": [
          {
            "filename": "Dropdown.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Dropdown/Dropdown.tsx",
            "content": "'use client'\n\nimport React, {\n  ReactNode,\n  useState,\n  useCallback,\n  useRef,\n  useEffect\n} from 'react'\nimport { DropdownProvider } from './DropdownContext'\n\ntype Direction =\n  | 'bottom'\n  | 'top'\n  | 'left'\n  | 'right'\n  | 'bottom-right'\n  | 'bottom-left'\n  | 'top-right'\n  | 'top-left'\n\ninterface DropdownProps {\n  children: ReactNode\n  hover?: boolean\n  hoverDelay?: number\n  closeDelay?: number\n  direction?: Direction\n}\n\nexport const Dropdown: React.FC<DropdownProps> = ({\n  children,\n  hover = false,\n  hoverDelay = 0,\n  closeDelay = 100,\n  direction = 'bottom'\n}) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null)\n  const dropdownRef = useRef<HTMLDivElement>(null)\n\n  const openDropdown = useCallback(() => {\n    if (timeoutRef.current) clearTimeout(timeoutRef.current)\n    timeoutRef.current = setTimeout(() => setIsOpen(true), hoverDelay)\n  }, [hoverDelay])\n\n  const closeDropdown = useCallback(() => {\n    if (timeoutRef.current) clearTimeout(timeoutRef.current)\n    timeoutRef.current = setTimeout(() => setIsOpen(false), closeDelay)\n  }, [closeDelay])\n\n  const toggleDropdown = useCallback(() => {\n    setIsOpen(prev => !prev)\n  }, [])\n\n  useEffect(() => {\n    return () => {\n      if (timeoutRef.current) clearTimeout(timeoutRef.current)\n    }\n  }, [])\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (\n        dropdownRef.current &&\n        !dropdownRef.current.contains(event.target as Node)\n      ) {\n        setIsOpen(false)\n      }\n    }\n\n    document.addEventListener('mousedown', handleClickOutside)\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside)\n    }\n  }, [])\n\n  const getPositionClass = () => {\n    switch (direction) {\n      case 'top':\n        return 'bottom-full mb-2'\n      case 'left':\n        return 'right-full mr-2 top-0'\n      case 'right':\n        return 'left-full top-0 ml-2'\n      case 'bottom-right':\n        return 'top-full left-0 mt-2'\n      case 'bottom-left':\n        return 'top-full right-0 mt-2'\n      case 'top-right':\n        return 'bottom-full left-0 mb-2'\n      case 'top-left':\n        return 'bottom-full right-0 mb-2'\n      default:\n        return 'top-full left-0 mt-2' // bottom (default)\n    }\n  }\n\n  return (\n    <DropdownProvider\n      value={{\n        isOpen,\n        toggleDropdown: !hover ? toggleDropdown : () => {},\n        closeDropdown: !hover ? closeDropdown : () => {},\n        direction,\n        positionClass: getPositionClass()\n      }}\n    >\n      <div\n        className='relative inline-block text-left'\n        {...(hover\n          ? { onMouseEnter: openDropdown, onMouseLeave: closeDropdown }\n          : {})}\n        ref={dropdownRef}\n      >\n        {children}\n      </div>\n    </DropdownProvider>\n  )\n}\n",
            "success": true,
            "size": 2820
          },
          {
            "filename": "DropdownAction.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Dropdown/DropdownAction.tsx",
            "content": "'use client'\n\nimport { ChevronDown, ChevronLeft, ChevronRight, ChevronUp } from 'lucide-react'\nimport React, { ReactElement, ReactNode, useEffect, useState } from 'react'\nimport { cn } from '../../utils/cn'\nimport { useDropdown } from './DropdownContext'\n\ninterface DropdownActionProps {\n  children: ReactNode\n  className?: string\n  icon?: ReactElement\n  iconPosition?: 'start' | 'end'\n}\n\nexport const DropdownAction: React.FC<DropdownActionProps> = ({\n  children,\n  className = '',\n  icon,\n  iconPosition = 'end',\n  ...rest\n}) => {\n  const { toggleDropdown, direction } = useDropdown()\n  const [iconDefault, setIconDefault] = useState(<ChevronDown />)\n  useEffect(() => {\n    if (direction == 'top') {\n      setIconDefault(<ChevronUp />)\n    }\n    if (direction == 'left') {\n      setIconDefault(<ChevronLeft />)\n    }\n    if (direction == 'right') {\n      setIconDefault(<ChevronRight />)\n    }\n  }, [direction])\n\n  return (\n    <button\n      type='button'\n      className={cn(\n        'border-border shadow-xs focus-visible:outline-hidden focus-visible:ring-border flex w-fit items-center justify-center gap-2 whitespace-nowrap rounded-md border bg-transparent px-3 py-2 text-sm focus-visible:ring-2',\n        className\n      )}\n      onClick={toggleDropdown}\n      {...rest}\n    >\n      {iconPosition === 'start' && (icon || iconDefault)}\n      {children}\n      {iconPosition === 'end' && (icon ?? iconDefault)}\n    </button>\n  )\n}\n",
            "success": true,
            "size": 1436
          },
          {
            "filename": "DropdownContent.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Dropdown/DropdownContent.tsx",
            "content": "'use client'\n\nimport React, { ReactNode, useEffect, useRef } from 'react'\nimport { cn } from '../../utils/cn'\nimport { useDropdown } from './DropdownContext'\n\ninterface DropdownContentProps\n  extends React.HtmlHTMLAttributes<HTMLDivElement> {\n  children: ReactNode\n  className?: string\n}\n\nexport const DropdownContent: React.FC<DropdownContentProps> = ({\n  children,\n  className = '',\n  ...rest\n}) => {\n  const { isOpen, positionClass } = useDropdown()\n\n  const contentRef = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    if (isOpen && contentRef.current) {\n      const selectedItem = contentRef.current.querySelector(\n        '[data-selected=\"true\"]'\n      )\n      if (selectedItem) {\n        const container = contentRef.current\n        const containerHeight = container.clientHeight\n        const itemTop = (selectedItem as HTMLElement).offsetTop\n        const itemHeight = (selectedItem as HTMLElement).offsetHeight\n\n        container.scrollTop = itemTop - containerHeight / 2 + itemHeight / 2\n      }\n    }\n  }, [isOpen])\n\n  if (!isOpen) return null\n\n  return (\n    <div\n      className={cn('bg-bg absolute z-10 rounded-md', positionClass, className)}\n      ref={contentRef}\n      role='presentation'\n      {...rest}\n    >\n      {/* <div className=\" border border-primary-50 dark:border-primary-950 rounded-md shadow-lg\"> */}\n      {children}\n      {/* </div> */}\n    </div>\n  )\n}\n",
            "success": true,
            "size": 1393
          },
          {
            "filename": "DropdownItem.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Dropdown/DropdownItem.tsx",
            "content": "'use client'\nimport { ReactNode } from 'react'\nimport { cn } from '../../utils/cn'\nimport { useDropdown } from './DropdownContext'\n\ninterface DropdownItemProps {\n  children: ReactNode\n  onClick?: () => void\n  className?: string\n  activeClassName?: string\n  isSelected?: boolean\n  isLink?: boolean\n}\n\nexport const DropdownItem: React.FC<DropdownItemProps> = ({\n  children,\n  className = '',\n  activeClassName = '',\n  onClick,\n  isSelected = false,\n  isLink = false,\n  ...rest\n}) => {\n  const { closeDropdown } = useDropdown()\n\n  const handleClick = () => {\n    if (onClick) {\n      onClick()\n    }\n    closeDropdown()\n  }\n  if (isLink === true) {\n    return (\n      <a\n        href='#'\n        className={cn(\n          'hover:bg-bg-light/80 block text-nowrap px-4 py-2 text-sm',\n          className,\n          isSelected ? cn('bg-bg-light', activeClassName) : ''\n        )}\n        role='option'\n        area-selected={isSelected}\n        onClick={handleClick}\n        data-selected={isSelected}\n        {...rest}\n      >\n        {children}\n      </a>\n    )\n  }\n  return (\n    <div\n      className={cn(\n        'hover:bg-bg-light/80 block text-nowrap px-4 py-2 text-sm',\n        className,\n        isSelected ? cn('bg-bg-light', activeClassName) : ''\n      )}\n      are-selected={isSelected}\n      role='option'\n      onClick={handleClick}\n      data-selected={isSelected}\n      {...rest}\n    >\n      {children}\n    </div>\n  )\n}\n",
            "success": true,
            "size": 1428
          },
          {
            "filename": "DropdownList.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Dropdown/DropdownList.tsx",
            "content": "'use client'\n\nimport React, { ReactNode } from 'react'\nimport { cn } from '../../utils/cn'\n\ninterface DropdownListProps {\n  children: ReactNode\n  className?: string\n}\n\nexport const DropdownList: React.FC<DropdownListProps> = ({\n  children,\n  className = '',\n  ...rest\n}) => {\n  return (\n    <div\n      className={cn('border-border border-b py-1 last:border-b-0', className)}\n      {...rest}\n    >\n      {children}\n    </div>\n  )\n}\n",
            "success": true,
            "size": 431
          },
          {
            "filename": "DropdownContext.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Dropdown/DropdownContext.tsx",
            "content": "'use client'\n\nimport React, { createContext, useContext } from 'react'\n\ninterface DropdownContextType {\n  isOpen: boolean\n  toggleDropdown: () => void\n  closeDropdown: () => void\n  direction:\n    | 'top'\n    | 'left'\n    | 'right'\n    | 'bottom'\n    | 'top-right'\n    | 'top-left'\n    | 'bottom-right'\n    | 'bottom-left'\n  positionClass: string\n}\n\nconst DropdownContext = createContext<DropdownContextType | undefined>(\n  undefined\n)\n\nexport const DropdownProvider: React.FC<{\n  children: React.ReactNode\n  value: DropdownContextType\n}> = ({ children, value }) => {\n  return (\n    <DropdownContext.Provider value={value}>\n      {children}\n    </DropdownContext.Provider>\n  )\n}\n\nexport const useDropdown = (): DropdownContextType => {\n  const context = useContext(DropdownContext)\n  if (context === undefined) {\n    throw new Error('useDropdown must be used within a DropdownProvider')\n  }\n  return context\n}\n",
            "success": true,
            "size": 909
          },
          {
            "filename": "index.ts",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Dropdown/index.ts",
            "content": "export * from './Dropdown'\nexport * from './DropdownAction'\nexport * from './DropdownContent'\nexport * from './DropdownItem'\nexport * from './DropdownList'\n",
            "success": true,
            "size": 156
          }
        ]
      }
    },
    "input": {
      "id": "input",
      "name": "Input",
      "path": "Input",
      "dependencies": [
        "lucide-react"
      ],
      "utils": [
        "cn"
      ],
      "files": {
        "javascript": [
          {
            "filename": "Input.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Input/Input.jsx",
            "content": "'use client'\n\nimport { Eye, EyeOff, Mail } from 'lucide-react'\nimport { forwardRef, useState } from 'react'\nimport { cn } from '../../utils/cn'\nimport { Tooltip, TooltipAction, TooltipContent } from '../Tooltip'\n\nexport const Input = forwardRef(\n  (\n    {\n      label,\n      type = 'text',\n      error,\n      icon = <Mail />,\n      labelClassName = '',\n      iconClassName = '',\n      className = '',\n      wrapperClassName = '',\n      errorClassName = '',\n      passwordIconClassName = '',\n      onChange,\n      disabled = false,\n      ...rest\n    },\n    ref\n  ) => {\n    const [isShown, setIsShown] = useState(false)\n\n    const handleClick = () => setIsShown(!isShown)\n\n    const inputType = type === 'password' && isShown ? 'text' : type\n\n    return (\n      <fieldset className={cn('mb-4', wrapperClassName)}>\n        {label && (\n          <label\n            className={cn(\n              'text-text mb-1 block text-sm font-medium',\n              disabled && 'pointer-events-none opacity-50',\n              labelClassName\n            )}\n          >\n            {label}\n          </label>\n        )}\n        <div className='relative'>\n          {icon && (\n            <div\n              className={cn(\n                'text-text pointer-events-none absolute inset-y-0 start-0 flex items-center ps-4',\n                disabled ? 'pointer-events-none opacity-50' : '',\n                error ? 'text-error-foreground' : '',\n                iconClassName\n              )}\n            >\n              {icon}\n            </div>\n          )}\n          <input\n            ref={ref}\n            type={inputType}\n            className={cn(\n              'placeholder:text-text-muted shadow-xs selection:bg-primary selection:text-primary-foreground focus-visible:border-border focus:outline-hidden focus:ring-border w-full rounded-md border px-3 py-2 ps-11 focus:ring-2',\n              type === 'password' && 'pe-11',\n              error ? 'border-error-foreground' : 'border-border',\n              'aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive',\n              disabled ? 'pointer-events-none opacity-50' : '',\n              className\n            )}\n            onChange={event => {\n              onChange?.(event)\n            }}\n            {...rest}\n          />\n          {type === 'password' && (\n            <Tooltip>\n              <TooltipAction\n                className={cn(\n                  'text-text absolute inset-y-0 end-0 me-4 flex cursor-pointer items-center',\n                  passwordIconClassName ? passwordIconClassName : iconClassName\n                )}\n              >\n                <div onClick={handleClick}>\n                  {isShown ? <Eye /> : <EyeOff />}\n                </div>\n              </TooltipAction>\n              <TooltipContent className='text-nowrap text-sm'>\n                {isShown ? 'Show Password' : 'Hide Password'}\n              </TooltipContent>\n            </Tooltip>\n          )}\n        </div>\n        {error && (\n          <p\n            className={cn('text-error-foreground mt-1 text-sm', errorClassName)}\n          >\n            {error}\n          </p>\n        )}\n      </fieldset>\n    )\n  }\n)\n\nInput.displayName = 'Input'\n",
            "success": true,
            "size": 3228
          },
          {
            "filename": "index.js",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Input/index.js",
            "content": "export * from './Input'\n",
            "success": true,
            "size": 24
          }
        ],
        "typescript": [
          {
            "filename": "Input.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Input/Input.tsx",
            "content": "'use client'\n\nimport { Eye, EyeOff, Mail } from 'lucide-react'\nimport {\n  ChangeEvent,\n  forwardRef,\n  InputHTMLAttributes,\n  ReactNode,\n  useState\n} from 'react'\nimport { cn } from '../../utils/cn'\nimport { Tooltip, TooltipAction, TooltipContent } from '../Tooltip'\n\nexport interface InputProps extends InputHTMLAttributes<HTMLInputElement> {\n  label?: string\n  type?: string\n  error?: string\n  icon?: ReactNode\n  disabled?: boolean\n  labelClassName?: string\n  iconClassName?: string\n  className?: string\n  wrapperClassName?: string\n  errorClassName?: string\n  passwordIconClassName?: string\n  onChange?: (event: ChangeEvent<HTMLInputElement>) => void\n}\n\nexport const Input = forwardRef<HTMLInputElement, InputProps>(\n  (\n    {\n      label,\n      type = 'text',\n      error,\n      icon = <Mail />,\n      labelClassName = '',\n      iconClassName = '',\n      className = '',\n      wrapperClassName = '',\n      errorClassName = '',\n      passwordIconClassName = '',\n      onChange,\n      disabled = false,\n      ...rest\n    },\n    ref\n  ) => {\n    const [isShown, setIsShown] = useState(false)\n\n    const handleClick = () => setIsShown(!isShown)\n\n    const inputType = type === 'password' && isShown ? 'text' : type\n\n    return (\n      <fieldset className={cn('mb-4', wrapperClassName)}>\n        {label && (\n          <label\n            className={cn(\n              'text-text mb-1 block text-sm font-medium',\n              disabled && 'pointer-events-none opacity-50',\n              labelClassName\n            )}\n          >\n            {label}\n          </label>\n        )}\n        <div className='relative'>\n          {icon && (\n            <div\n              className={cn(\n                'text-text pointer-events-none absolute inset-y-0 start-0 flex items-center ps-4',\n                disabled ? 'pointer-events-none opacity-50' : '',\n                error ? 'text-error-foreground' : '',\n                iconClassName\n              )}\n            >\n              {icon}\n            </div>\n          )}\n          <input\n            ref={ref}\n            type={inputType}\n            className={cn(\n              'placeholder:text-text-muted shadow-xs selection:bg-primary selection:text-primary-foreground focus-visible:border-border focus:outline-hidden focus:ring-border w-full rounded-md border px-3 py-2 ps-11 focus:ring-2',\n              type === 'password' && 'pe-11',\n              error ? 'border-error-foreground' : 'border-border',\n              'aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive',\n              disabled ? 'pointer-events-none opacity-50' : '',\n              className\n            )}\n            onChange={event => {\n              onChange?.(event)\n            }}\n            {...rest}\n          />\n          {type === 'password' && (\n            <Tooltip>\n              <TooltipAction\n                className={cn(\n                  'text-text absolute inset-y-0 end-0 me-4 flex cursor-pointer items-center',\n                  passwordIconClassName ? passwordIconClassName : iconClassName\n                )}\n              >\n                <div onClick={handleClick}>\n                  {isShown ? <Eye /> : <EyeOff />}\n                </div>\n              </TooltipAction>\n              <TooltipContent className='text-nowrap text-sm'>\n                {isShown ? 'Show Password' : 'Hide Password'}\n              </TooltipContent>\n            </Tooltip>\n          )}\n        </div>\n        {error && (\n          <p\n            className={cn('text-error-foreground mt-1 text-sm', errorClassName)}\n          >\n            {error}\n          </p>\n        )}\n      </fieldset>\n    )\n  }\n)\n\nInput.displayName = 'Input'\n",
            "success": true,
            "size": 3701
          },
          {
            "filename": "index.ts",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Input/index.ts",
            "content": "export * from './Input'\n",
            "success": true,
            "size": 24
          }
        ]
      }
    },
    "masonry": {
      "id": "masonry",
      "name": "Masonry",
      "path": "Masonry",
      "dependencies": [],
      "utils": [
        "cn"
      ],
      "files": {
        "javascript": [
          {
            "filename": "Masonry.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Masonry/Masonry.jsx",
            "content": "'use client'\nimport { useEffect, useState } from 'react'\n\nexport const Masonry = ({\n  children,\n  columnCount = { sm: 1, md: 2, lg: 3, xl: 4 },\n  gap = 4,\n  className = '',\n  ...rest\n}) => {\n  const [columns, setColumns] = useState(columnCount.sm)\n\n  useEffect(() => {\n    const updateColumns = () => {\n      const width = window.innerWidth\n      if (width >= 1280) setColumns(columnCount.xl)\n      else if (width >= 1024) setColumns(columnCount.lg)\n      else if (width >= 768) setColumns(columnCount.md)\n      else setColumns(columnCount.sm)\n    }\n\n    updateColumns()\n    window.addEventListener('resize', updateColumns)\n    return () => window.removeEventListener('resize', updateColumns)\n  }, [columnCount])\n\n  const columnWrapper = {}\n  const result = []\n\n  for (let i = 0; i < children.length; i++) {\n    const columnIndex = i % columns\n    if (!columnWrapper[columnIndex]) {\n      columnWrapper[columnIndex] = []\n    }\n    columnWrapper[columnIndex].push(children[i])\n  }\n\n  for (let i = 0; i < columns; i++) {\n    result.push(\n      <div\n        key={i}\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'flex-start',\n          alignItems: 'center',\n          width: `${100 / columns}%`,\n          gap: `${gap * 0.25}rem`\n        }}\n      >\n        {columnWrapper[i]}\n      </div>\n    )\n  }\n\n  return (\n    <div\n      className={className}\n      style={{\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'center',\n        alignItems: 'flex-start',\n        gap: `${gap * 0.25}rem`\n      }}\n      {...rest}\n    >\n      {result}\n    </div>\n  )\n}\n",
            "success": true,
            "size": 1637
          },
          {
            "filename": "index.js",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Masonry/index.js",
            "content": "export * from './Masonry'\n",
            "success": true,
            "size": 26
          }
        ],
        "typescript": [
          {
            "filename": "Masonry.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Masonry/Masonry.tsx",
            "content": "'use client'\nimport React, { useState, useEffect, ReactNode } from 'react'\n\ninterface MasonryProps {\n  children: ReactNode[]\n  columnCount?: { sm: number; md: number; lg: number; xl: number }\n  gap?: number\n  className?: string\n}\n\ntype ColumnWrapper = { [key: number]: React.ReactNode[] }\n\nexport const Masonry: React.FC<MasonryProps> = ({\n  children,\n  columnCount = { sm: 1, md: 2, lg: 3, xl: 4 },\n  gap = 4,\n  className = '',\n  ...rest\n}) => {\n  const [columns, setColumns] = useState(columnCount.sm)\n\n  useEffect(() => {\n    const updateColumns = () => {\n      const width = window.innerWidth\n      if (width >= 1280) setColumns(columnCount.xl)\n      else if (width >= 1024) setColumns(columnCount.lg)\n      else if (width >= 768) setColumns(columnCount.md)\n      else setColumns(columnCount.sm)\n    }\n\n    updateColumns()\n    window.addEventListener('resize', updateColumns)\n    return () => window.removeEventListener('resize', updateColumns)\n  }, [columnCount])\n\n  const columnWrapper: ColumnWrapper = {}\n  const result = []\n\n  for (let i = 0; i < children.length; i++) {\n    const columnIndex = i % columns\n    if (!columnWrapper[columnIndex]) {\n      columnWrapper[columnIndex] = []\n    }\n    columnWrapper[columnIndex].push(children[i])\n  }\n\n  for (let i = 0; i < columns; i++) {\n    result.push(\n      <div\n        key={i}\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'flex-start',\n          alignItems: 'center',\n          width: `${100 / columns}%`,\n          gap: `${gap * 0.25}rem`\n        }}\n      >\n        {columnWrapper[i]}\n      </div>\n    )\n  }\n\n  return (\n    <div\n      className={className}\n      style={{\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'center',\n        alignItems: 'flex-start',\n        gap: `${gap * 0.25}rem`\n      }}\n      {...rest}\n    >\n      {result}\n    </div>\n  )\n}\n",
            "success": true,
            "size": 1908
          },
          {
            "filename": "index.ts",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Masonry/index.ts",
            "content": "export * from './Masonry'\n",
            "success": true,
            "size": 26
          }
        ]
      }
    },
    "modal": {
      "id": "modal",
      "name": "Modal",
      "path": "Modal",
      "dependencies": [
        "framer-motion",
        "react-focus-lock",
        "react-remove-scroll"
      ],
      "utils": [
        "cn",
        "portal"
      ],
      "files": {
        "javascript": [
          {
            "filename": "Modal.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Modal/Modal.jsx",
            "content": "'use client'\n\nimport { useCallback, useEffect, useState } from 'react'\nimport { ModalProvider } from './ModalContext'\n\nexport const Modal = ({ children, isOpenExternal, onToggle }) => {\n  const [isOpenInternal, setIsOpenInternal] = useState(false)\n\n  const isOpen = isOpenExternal ?? isOpenInternal\n\n  const handleOpen = useCallback(() => {\n    const newState = !isOpen\n    if (onToggle) {\n      onToggle(newState)\n    } else {\n      setIsOpenInternal(newState)\n    }\n  }, [isOpen, onToggle])\n\n  useEffect(() => {\n    const handleEscapeKeyPress = event => {\n      if (event.key === 'Escape') {\n        handleOpen()\n      }\n    }\n\n    const handleClickOutsideModal = event => {\n      if (!event.target.closest('.aspect-ui-modal')) {\n        handleOpen()\n      }\n    }\n\n    if (isOpen) {\n      document.addEventListener('keydown', handleEscapeKeyPress)\n      document.addEventListener('mousedown', handleClickOutsideModal)\n    }\n\n    return () => {\n      document.removeEventListener('keydown', handleEscapeKeyPress)\n      document.removeEventListener('mousedown', handleClickOutsideModal)\n    }\n  }, [isOpen, handleOpen])\n\n  return (\n    <ModalProvider value={{ isOpen, handleOpen }}>{children}</ModalProvider>\n  )\n}\n",
            "success": true,
            "size": 1216
          },
          {
            "filename": "ModalActions.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Modal/ModalActions.jsx",
            "content": "'use client'\n\nimport { cn } from '../../utils/cn'\nimport { useModal } from './ModalContext'\n\nexport const ModalAction = ({ children, className = '', ...rest }) => {\n  const { handleOpen } = useModal()\n\n  return (\n    <button\n      className={cn(\n        'focus:outline-hidden focus-visible:border-ring focus-visible:ring-border bg-bg-light text-text inline-flex cursor-pointer items-center justify-center gap-2 rounded-md px-4 py-2 font-medium transition duration-200 ease-in-out focus-visible:ring-1',\n        className\n      )}\n      onClick={handleOpen}\n      {...rest}\n    >\n      {children}\n    </button>\n  )\n}\n",
            "success": true,
            "size": 616
          },
          {
            "filename": "ModalContent.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Modal/ModalContent.jsx",
            "content": "'use client'\n\nimport { AnimatePresence, motion } from 'framer-motion'\nimport { forwardRef } from 'react'\nimport { cn } from '../../utils/cn'\nimport { useModal } from './ModalContext'\nimport { ModalPortal } from './ModalPortal'\n\nconst ModalContentComponent = forwardRef(\n  ({ children, className = '', overlayClassName = '', ...rest }, ref) => {\n    const { isOpen } = useModal()\n    if (!isOpen) return null\n\n    return (\n      <AnimatePresence>\n        <ModalPortal overlayClassName={overlayClassName}>\n          <motion.div\n            className={cn(\n              'aspect-ui-modal bg-bg border-border max-w-[calc(100%-2rem)] rounded-lg border p-4 shadow-lg',\n              className\n            )}\n            {...rest}\n            ref={ref}\n            initial={{ scale: 0.5, opacity: 0, y: 40 }}\n            animate={{ opacity: 1, scale: 1, y: 0 }}\n            transition={{\n              duration: 0.3,\n              type: 'spring',\n              damping: 25,\n              stiffness: 500\n            }}\n            exit={{ opacity: 0.5, scale: 0.5, y: 40 }}\n          >\n            {children}\n          </motion.div>\n        </ModalPortal>\n      </AnimatePresence>\n    )\n  }\n)\n\nModalContentComponent.displayName = 'ModalContent'\n\nexport const ModalContent = ModalContentComponent\n",
            "success": true,
            "size": 1287
          },
          {
            "filename": "ModalContext.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Modal/ModalContext.jsx",
            "content": "'use client'\n\nimport { createContext, useContext } from 'react'\n\nconst ModalContext = createContext(undefined)\n\nexport const ModalProvider = ({ children, value }) => {\n  return <ModalContext.Provider value={value}>{children}</ModalContext.Provider>\n}\n\nexport const useModal = () => {\n  const context = useContext(ModalContext)\n  if (context === undefined) {\n    throw new Error('useModal must be used within a ModalProvider')\n  }\n  return context\n}\n",
            "success": true,
            "size": 449
          },
          {
            "filename": "ModalOverlay.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Modal/ModalOverlay.jsx",
            "content": "'use client'\nimport { motion } from 'framer-motion'\nimport { forwardRef } from 'react'\nimport { cn } from '../../utils/cn'\n\nexport const ModalOverlayComponent = forwardRef(\n  ({ children, className, ...props }, ref) => {\n    return (\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n        transition={{ duration: 0.2 }}\n        {...props}\n        className={cn(\n          'fixed inset-0 z-50 flex items-center justify-center overflow-auto bg-black/80',\n          className\n        )}\n        ref={ref}\n      >\n        {children}\n      </motion.div>\n    )\n  }\n)\n\nModalOverlayComponent.displayName = 'ModalOverlay'\n\nexport const ModalOverlay = ModalOverlayComponent\n",
            "success": true,
            "size": 731
          },
          {
            "filename": "ModalPortal.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Modal/ModalPortal.jsx",
            "content": "'use client'\nimport ReactFocusLock from 'react-focus-lock'\nimport { RemoveScroll } from 'react-remove-scroll'\nimport { Portal } from '../../utils/Portal'\nimport { useModal } from './ModalContext'\nimport { ModalOverlay } from './ModalOverlay'\n\nexport const ModalPortal = ({ children, overlayClassName }) => {\n  const { isOpen } = useModal()\n  return (\n    <Portal>\n      <RemoveScroll enabled={isOpen}>\n        <ReactFocusLock disabled={!isOpen} returnFocus>\n          <ModalOverlay className={overlayClassName}>{children}</ModalOverlay>\n        </ReactFocusLock>\n      </RemoveScroll>\n    </Portal>\n  )\n}\n",
            "success": true,
            "size": 605
          },
          {
            "filename": "index.js",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Modal/index.js",
            "content": "export * from './Modal'\nexport * from './ModalContent'\nexport * from './ModalActions'\n",
            "success": true,
            "size": 86
          }
        ],
        "typescript": [
          {
            "filename": "Modal.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Modal/Modal.tsx",
            "content": "'use client'\n\nimport React, { ReactNode, useCallback, useEffect, useState } from 'react'\nimport { ModalProvider } from './ModalContext'\n\ninterface ModalProps {\n  children: ReactNode\n  isOpenExternal?: boolean\n  onToggle?: (isOpen: boolean) => void\n}\n\nexport const Modal: React.FC<ModalProps> = ({\n  children,\n  isOpenExternal,\n  onToggle\n}) => {\n  const [isOpenInternal, setIsOpenInternal] = useState(false)\n\n  const isOpen = isOpenExternal ?? isOpenInternal\n\n  const handleOpen = useCallback(() => {\n    const newState = !isOpen\n    if (onToggle) {\n      onToggle(newState)\n    } else {\n      setIsOpenInternal(newState)\n    }\n  }, [isOpen, onToggle])\n\n  useEffect(() => {\n    const handleEscapeKeyPress = (event: KeyboardEvent) => {\n      if (event.key === 'Escape') {\n        handleOpen()\n      }\n    }\n\n    const handleClickOutsideModal = (event: MouseEvent) => {\n      if (!(event.target as HTMLElement).closest('.aspect-ui-modal')) {\n        handleOpen()\n      }\n    }\n\n    if (isOpen) {\n      document.addEventListener('keydown', handleEscapeKeyPress)\n      document.addEventListener('mousedown', handleClickOutsideModal)\n    }\n\n    return () => {\n      document.removeEventListener('keydown', handleEscapeKeyPress)\n      document.removeEventListener('mousedown', handleClickOutsideModal)\n    }\n  }, [isOpen, handleOpen])\n\n  return (\n    <ModalProvider value={{ isOpen, handleOpen }}>{children}</ModalProvider>\n  )\n}\n",
            "success": true,
            "size": 1424
          },
          {
            "filename": "ModalActions.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Modal/ModalActions.tsx",
            "content": "'use client'\n\nimport React, { ButtonHTMLAttributes, ReactNode } from 'react'\nimport { cn } from '../../utils/cn'\nimport { useModal } from './ModalContext'\n\ninterface ModalActionProps extends ButtonHTMLAttributes<HTMLButtonElement> {\n  children: ReactNode\n  className?: string\n}\n\nexport const ModalAction: React.FC<ModalActionProps> = ({\n  children,\n  className = '',\n  ...rest\n}) => {\n  const { handleOpen } = useModal()\n\n  return (\n    <button\n      className={cn(\n        'focus-visible:border-ring focus-visible:ring-border bg-bg-light text-text inline-flex cursor-pointer items-center justify-center gap-2 rounded-md px-4 py-2 font-medium transition duration-200 ease-in-out focus:outline-hidden focus-visible:ring-1',\n        className\n      )}\n      onClick={handleOpen}\n      {...rest}\n    >\n      {children}\n    </button>\n  )\n}\n",
            "success": true,
            "size": 836
          },
          {
            "filename": "ModalContent.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Modal/ModalContent.tsx",
            "content": "'use client'\n\nimport { AnimatePresence, motion, MotionProps } from 'framer-motion'\nimport { forwardRef, HTMLAttributes, Ref } from 'react'\nimport { cn } from '../../utils/cn'\nimport { useModal } from './ModalContext'\nimport { ModalPortal } from './ModalPortal'\n\ntype ModalContentProps = HTMLAttributes<HTMLDivElement> & MotionProps & {\n  overlayClassName?: string\n}\n\nconst ModalContentComponent = forwardRef<HTMLDivElement, ModalContentProps>(\n  ({ children, className = '', overlayClassName = '', ...rest }, ref: Ref<HTMLDivElement>) => {\n    const { isOpen } = useModal()\n    if (!isOpen) return null\n\n    return (\n      <AnimatePresence>\n        <ModalPortal overlayClassName={overlayClassName}>\n          <motion.div\n            className={cn(\n              'aspect-ui-modal bg-bg border-border max-w-[calc(100%-2rem)] rounded-lg border p-4 shadow-lg',\n              className\n            )}\n            {...rest}\n            ref={ref}\n            initial={{ scale: 0.5, opacity: 0, y: 40 }}\n            animate={{ opacity: 1, scale: 1, y: 0 }}\n            transition={{\n              duration: 0.3,\n              type: 'spring',\n              damping: 25,\n              stiffness: 500\n            }}\n            exit={{ opacity: 0.5, scale: 0.5, y: 40 }}\n          >\n            {children}\n          </motion.div>\n        </ModalPortal>\n      </AnimatePresence>\n    )\n  }\n)\n\nModalContentComponent.displayName = 'ModalContent'\n\nexport const ModalContent = ModalContentComponent\n",
            "success": true,
            "size": 1482
          },
          {
            "filename": "ModalContext.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Modal/ModalContext.tsx",
            "content": "'use client'\n\nimport React, { createContext, useContext } from 'react'\n\ninterface ModalContextType {\n  isOpen: boolean\n  handleOpen: () => void\n}\n\nconst ModalContext = createContext<ModalContextType | undefined>(undefined)\n\nexport const ModalProvider: React.FC<{\n  children: React.ReactNode\n  value: ModalContextType\n}> = ({ children, value }) => {\n  return <ModalContext.Provider value={value}>{children}</ModalContext.Provider>\n}\n\nexport const useModal = (): ModalContextType => {\n  const context = useContext(ModalContext)\n  if (context === undefined) {\n    throw new Error('useModal must be used within a ModalProvider')\n  }\n  return context\n}\n",
            "success": true,
            "size": 648
          },
          {
            "filename": "ModalOverlay.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Modal/ModalOverlay.tsx",
            "content": "'use client'\nimport { motion, MotionProps } from 'framer-motion'\nimport { forwardRef, HTMLAttributes, Ref } from 'react'\nimport { cn } from '../../utils/cn'\n\ntype ModalOverlayProps = HTMLAttributes<HTMLDivElement> & MotionProps\n\nexport const ModalOverlayComponent = forwardRef<\n  HTMLDivElement,\n  ModalOverlayProps\n>(({ children, className, ...props }, ref: Ref<HTMLDivElement>) => {\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      exit={{ opacity: 0 }}\n      transition={{ duration: 0.2 }}\n      {...props}\n      className={cn(\n        'fixed inset-0 z-50 flex items-center justify-center overflow-auto bg-black/80',\n        className\n      )}\n      ref={ref}\n    >\n      {children}\n    </motion.div>\n  )\n})\n\nModalOverlayComponent.displayName = 'ModalOverlay'\n\nexport const ModalOverlay = ModalOverlayComponent\n",
            "success": true,
            "size": 860
          },
          {
            "filename": "ModalPortal.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Modal/ModalPortal.tsx",
            "content": "'use client'\nimport { ReactNode } from 'react'\nimport ReactFocusLock from 'react-focus-lock'\nimport { useModal } from './ModalContext'\nimport { ModalOverlay } from './ModalOverlay'\nimport { Portal } from '../../utils/Portal'\nimport { RemoveScroll } from 'react-remove-scroll'\n\nexport const ModalPortal = ({ children, overlayClassName }: { children: ReactNode, overlayClassName?: string }) => {\n  const { isOpen } = useModal()\n  return (\n    <Portal>\n      <RemoveScroll enabled={isOpen}>\n        <ReactFocusLock disabled={!isOpen} returnFocus>\n          <ModalOverlay className={overlayClassName}>{children}</ModalOverlay>\n        </ReactFocusLock>\n      </RemoveScroll>\n    </Portal>\n  )\n}\n",
            "success": true,
            "size": 691
          },
          {
            "filename": "index.ts",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Modal/index.ts",
            "content": "export * from './Modal'\nexport * from './ModalContent'\nexport * from './ModalActions'\n",
            "success": true,
            "size": 86
          }
        ]
      }
    },
    "navbar": {
      "id": "navbar",
      "name": "Navbar",
      "path": "Navbar",
      "dependencies": [
        "framer-motion"
      ],
      "utils": [
        "cn"
      ],
      "files": {
        "javascript": [
          {
            "filename": "Navbar.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Navbar/Navbar.jsx",
            "content": "'use client'\nimport React from 'react'\nimport { cn } from '../../utils/cn'\nimport { NavbarProvider } from './NavbarContext'\n\nexport const Navbar = ({\n  children,\n  className = '',\n  collapseBreakpoint = 'md',\n  ...rest\n}) => {\n  return (\n    <NavbarProvider collapseBreakpoint={collapseBreakpoint}>\n      <nav className={cn('bg-bg relative shadow-md', className)} {...rest}>\n        {children}\n      </nav>\n    </NavbarProvider>\n  )\n}\n",
            "success": true,
            "size": 435
          },
          {
            "filename": "NavbarContainer.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Navbar/NavbarContainer.jsx",
            "content": "'use client'\nimport { cn } from '../../utils/cn'\n\nexport const NavbarContainer = ({ children, className = '', ...rest }) => {\n  return (\n    <div\n      className={cn(\n        'container mx-auto flex items-center justify-between px-4 py-4',\n        className\n      )}\n      {...rest}\n    >\n      {children}\n    </div>\n  )\n}\n",
            "success": true,
            "size": 323
          },
          {
            "filename": "NavbarList.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Navbar/NavbarList.jsx",
            "content": "'use client'\n\nimport { cn } from '../../utils/cn'\nimport { useNavbar } from './NavbarContext'\n\nexport const NavbarList = ({ children, className = '', ...rest }) => {\n  const { collapseBreakpoint } = useNavbar()\n  return (\n    <ul\n      className={cn(\n        'items-center space-x-4',\n        `hidden ${collapseBreakpoint === 'sm' && 'sm:flex'} ${\n          collapseBreakpoint === 'md' && 'md:flex'\n        } ${collapseBreakpoint === 'lg' && 'lg:flex'} ${\n          collapseBreakpoint === 'xl' && 'xl:flex'\n        } ${collapseBreakpoint === '2xl' && '2xl:flex'}`,\n        className\n      )}\n      {...rest}\n    >\n      {children}\n    </ul>\n  )\n}\n",
            "success": true,
            "size": 647
          },
          {
            "filename": "NavbarItem.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Navbar/NavbarItem.jsx",
            "content": "'use client'\nimport { cn } from '../../utils/cn'\n\nexport const NavbarItem = ({ children, className = '', ...rest }) => {\n  return (\n    <button\n      className={cn(\n        'text-text hover:bg-bg-light focus-visible:bg-bg-light inline-flex rounded-md px-2 py-1 transition-colors ease-in-out',\n        className\n      )}\n      {...rest}\n    >\n      {children}\n    </button>\n  )\n}\n",
            "success": true,
            "size": 379
          },
          {
            "filename": "NavbarCollapse.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Navbar/NavbarCollapse.jsx",
            "content": "'use client'\n\nimport { AnimatePresence, motion } from 'framer-motion'\nimport { forwardRef } from 'react'\nimport { cn } from '../../utils/cn'\nimport { useNavbar } from './NavbarContext'\n\nexport const NavbarCollapseComponent = forwardRef(\n  ({ children, className, ...rest }, ref) => {\n    const { isCollapsed } = useNavbar()\n\n    return (\n      <AnimatePresence>\n        {!isCollapsed && (\n          <motion.div\n            initial={{ y: '20px', opacity: 0 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.3, ease: 'anticipate' }}\n            exit={{ opacity: 0, y: '20px' }}\n            ref={ref}\n            {...rest}\n            className={cn(\n              `bg-bg border-border absolute left-0 right-0 top-full z-[1000] rounded-md rounded-t-none border p-4 shadow-md ${\n                isCollapsed ? 'hidden' : 'flex flex-col'\n              }`,\n              className\n            )}\n          >\n            {children}\n          </motion.div>\n        )}\n      </AnimatePresence>\n    )\n  }\n)\n\nNavbarCollapseComponent.displayName = 'NavbarCollapse'\n\nexport const NavbarCollapse = NavbarCollapseComponent\n",
            "success": true,
            "size": 1140
          },
          {
            "filename": "NavbarCollapseBtn.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Navbar/NavbarCollapseBtn.jsx",
            "content": "'use client'\nimport React from 'react'\nimport { cn } from '../../utils/cn'\nimport { useNavbar } from './NavbarContext'\n\nexport const NavbarCollapseBtn = ({ className = '', icon, ...rest }) => {\n  const { toggleCollapse, collapseBreakpoint } = useNavbar()\n\n  return (\n    <button\n      className={cn(\n        'text-text hover:bg-bg-light focus-visible:outline-hidden focus-visible:ring-border focus-visible:bg-bg-light rounded-md p-2 focus-visible:ring-2',\n        `block ${collapseBreakpoint === 'sm' && 'sm:hidden'} ${collapseBreakpoint === 'md' && 'md:hidden'} ${collapseBreakpoint === 'lg' && 'lg:hidden'} ${collapseBreakpoint === 'xl' && 'xl:hidden'} ${collapseBreakpoint === '2xl' && '2xl:hidden'}`,\n        className\n      )}\n      onClick={toggleCollapse}\n      {...rest}\n    >\n      {icon ? (\n        icon\n      ) : (\n        <svg\n          className='h-6 w-6'\n          xmlns='http://www.w3.org/2000/svg'\n          fill='none'\n          viewBox='0 0 24 24'\n          stroke='currentColor'\n        >\n          <path\n            strokeLinecap='round'\n            strokeLinejoin='round'\n            strokeWidth={2}\n            d='M4 6h16M4 12h16m-7 6h7'\n          />\n        </svg>\n      )}\n    </button>\n  )\n}\n",
            "success": true,
            "size": 1217
          },
          {
            "filename": "NavbarContext.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Navbar/NavbarContext.jsx",
            "content": "'use client'\nimport React, { createContext, useContext, useState } from 'react'\n\nconst NavbarContext = createContext(undefined)\n\nexport const NavbarProvider = ({ children, collapseBreakpoint = 'md' }) => {\n  const [isCollapsed, setIsCollapsed] = useState(true)\n\n  const toggleCollapse = () => setIsCollapsed(prev => !prev)\n\n  return (\n    <NavbarContext.Provider\n      value={{ isCollapsed, toggleCollapse, collapseBreakpoint }}\n    >\n      {children}\n    </NavbarContext.Provider>\n  )\n}\n\nexport const useNavbar = () => {\n  const context = useContext(NavbarContext)\n  if (context === undefined) {\n    throw new Error('useNavbar must be used within a NavbarProvider')\n  }\n  return context\n}\n",
            "success": true,
            "size": 690
          },
          {
            "filename": "index.js",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Navbar/index.js",
            "content": "export * from './Navbar'\nexport * from './NavbarContainer'\nexport * from './NavbarList'\nexport * from './NavbarItem'\nexport * from './NavbarCollapse'\nexport * from './NavbarCollapseBtn'\n",
            "success": true,
            "size": 186
          }
        ],
        "typescript": [
          {
            "filename": "Navbar.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Navbar/Navbar.tsx",
            "content": "'use client'\nimport React, { ReactNode } from 'react'\nimport { cn } from '../../utils/cn'\nimport { NavbarProvider } from './NavbarContext'\n\ninterface NavbarProps {\n  children: ReactNode\n  className?: string\n  collapseBreakpoint?: 'sm' | 'md' | 'lg' | 'xl' | '2xl' | 'all'\n}\n\nexport const Navbar: React.FC<NavbarProps> = ({\n  children,\n  className = '',\n  collapseBreakpoint = 'md',\n  ...rest\n}) => {\n  return (\n    <NavbarProvider collapseBreakpoint={collapseBreakpoint}>\n      <nav className={cn('bg-bg relative shadow-md', className)} {...rest}>\n        {children}\n      </nav>\n    </NavbarProvider>\n  )\n}\n",
            "success": true,
            "size": 608
          },
          {
            "filename": "NavbarContainer.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Navbar/NavbarContainer.tsx",
            "content": "// ./app/src/components/Navbar/NavbarContainer.tsx\n'use client'\n\nimport React, { ReactNode } from 'react'\nimport { cn } from '../../utils/cn'\n\ninterface NavbarContainerProps {\n  children: ReactNode\n  className?: string\n}\n\nexport const NavbarContainer: React.FC<NavbarContainerProps> = ({\n  children,\n  className = '',\n  ...rest\n}) => {\n  return (\n    <div\n      className={cn(\n        'container mx-auto flex items-center justify-between px-4 py-4',\n        className\n      )}\n      {...rest}\n    >\n      {children}\n    </div>\n  )\n}\n",
            "success": true,
            "size": 533
          },
          {
            "filename": "NavbarList.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Navbar/NavbarList.tsx",
            "content": "// ./app/src/components/Navbar/NavbarList.tsx\n'use client'\n\nimport React, { ReactNode } from 'react'\nimport { cn } from '../../utils/cn'\nimport { useNavbar } from './NavbarContext'\n\ninterface NavbarListProps {\n  children: ReactNode\n  className?: string\n  // position: 'left' | 'right'\n}\n\nexport const NavbarList: React.FC<NavbarListProps> = ({\n  children,\n  className = '',\n  ...rest\n}) => {\n  const { collapseBreakpoint } = useNavbar()\n  return (\n    <ul\n      className={cn(\n        'items-center space-x-4',\n        `hidden ${collapseBreakpoint === 'sm' && 'sm:flex'} ${collapseBreakpoint === 'md' && 'md:flex'} ${collapseBreakpoint === 'lg' && 'lg:flex'} ${collapseBreakpoint === 'xl' && 'xl:flex'} ${collapseBreakpoint === '2xl' && '2xl:flex'}`,\n        className\n      )}\n      {...rest}\n    >\n      {children}\n    </ul>\n  )\n}\n",
            "success": true,
            "size": 833
          },
          {
            "filename": "NavbarItem.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Navbar/NavbarItem.tsx",
            "content": "// ./app/src/components/Navbar/NavbarItem.tsx\n'use client'\n\nimport React, { ReactNode } from 'react'\nimport { cn } from '../../utils/cn'\n\ninterface NavbarItemProps {\n  children: ReactNode\n  className?: string\n}\n\nexport const NavbarItem: React.FC<NavbarItemProps> = ({\n  children,\n  className = '',\n  ...rest\n}) => {\n  return (\n    <button\n      className={cn(\n        'text-text hover:bg-bg-light focus-visible:bg-bg-light inline-flex rounded-md px-2 py-1 transition-colors ease-in-out',\n        className\n      )}\n      {...rest}\n    >\n      {children}\n    </button>\n  )\n}\n",
            "success": true,
            "size": 574
          },
          {
            "filename": "NavbarCollapse.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Navbar/NavbarCollapse.tsx",
            "content": "// ./app/src/components/Navbar/NavbarCollapse.tsx\n'use client'\n\nimport { AnimatePresence, motion, MotionProps } from 'framer-motion'\nimport { forwardRef, HTMLAttributes } from 'react'\nimport { cn } from '../../utils/cn'\nimport { useNavbar } from './NavbarContext'\n\ntype NavbarCollapseProps = HTMLAttributes<HTMLDivElement> & MotionProps\n\nexport const NavbarCollapseComponent = forwardRef<\n  HTMLDivElement,\n  NavbarCollapseProps\n>(({ children, className, ...rest }, ref) => {\n  const { isCollapsed } = useNavbar()\n\n  return (\n    <AnimatePresence>\n      {!isCollapsed && (\n        <motion.div\n          initial={{ y: '20px', opacity: 0 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.3, ease: 'anticipate' }}\n          exit={{ opacity: 0, y: '20px' }}\n          ref={ref}\n          {...rest}\n          className={cn(\n            `bg-bg border-border absolute left-0 right-0 top-full z-[1000] rounded-md rounded-t-none border p-4 shadow-md ${isCollapsed ? 'hidden' : 'flex flex-col'}`,\n            className\n          )}\n        >\n          {children}\n        </motion.div>\n      )}\n    </AnimatePresence>\n  )\n})\n\nNavbarCollapseComponent.displayName = 'NavbarCollapse'\n\nexport const NavbarCollapse = NavbarCollapseComponent\n",
            "success": true,
            "size": 1255
          },
          {
            "filename": "NavbarCollapseBtn.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Navbar/NavbarCollapseBtn.tsx",
            "content": "// ./app/src/components/Navbar/NavbarCollapseBtn.tsx\n'use client'\nimport React from 'react'\nimport { cn } from '../../utils/cn'\nimport { useNavbar } from './NavbarContext'\n\ninterface NavbarCollapseBtnProps {\n  className?: string\n  icon?: React.ReactNode // 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl' | '5xl'\n}\n\nexport const NavbarCollapseBtn: React.FC<NavbarCollapseBtnProps> = ({\n  className = '',\n  icon,\n  ...rest\n}) => {\n  const { toggleCollapse, collapseBreakpoint } = useNavbar()\n\n  return (\n    <button\n      className={cn(\n        'text-text hover:bg-bg-light focus-visible:outline-hidden focus-visible:ring-border focus-visible:bg-bg-light rounded-md p-2 focus-visible:ring-2',\n        `block ${collapseBreakpoint === 'sm' && 'sm:hidden'} ${collapseBreakpoint === 'md' && 'md:hidden'} ${collapseBreakpoint === 'lg' && 'lg:hidden'} ${collapseBreakpoint === 'xl' && 'xl:hidden'} ${collapseBreakpoint === '2xl' && '2xl:hidden'}`,\n        className\n      )}\n      onClick={toggleCollapse}\n      {...rest}\n    >\n      {icon ? (\n        icon\n      ) : (\n        <svg\n          className='h-6 w-6'\n          xmlns='http://www.w3.org/2000/svg'\n          fill='none'\n          viewBox='0 0 24 24'\n          stroke='currentColor'\n        >\n          <path\n            strokeLinecap='round'\n            strokeLinejoin='round'\n            strokeWidth={2}\n            d='M4 6h16M4 12h16m-7 6h7'\n          />\n        </svg>\n      )}\n    </button>\n  )\n}\n",
            "success": true,
            "size": 1462
          },
          {
            "filename": "NavbarContext.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Navbar/NavbarContext.tsx",
            "content": "// ./app/src/components/Navbar/NavbarContext.tsx\n'use client'\nimport React, { createContext, useContext, useState } from 'react'\n\ninterface NavbarContextType {\n  isCollapsed: boolean\n  toggleCollapse: () => void\n  collapseBreakpoint: 'sm' | 'md' | 'lg' | 'xl' | '2xl' | 'all'\n}\n\nconst NavbarContext = createContext<NavbarContextType | undefined>(undefined)\n\nexport const NavbarProvider: React.FC<{\n  children: React.ReactNode\n  collapseBreakpoint: 'sm' | 'md' | 'lg' | 'xl' | '2xl' | 'all'\n}> = ({\n  children,\n  collapseBreakpoint = 'md' // default value\n}) => {\n  const [isCollapsed, setIsCollapsed] = useState(true)\n\n  const toggleCollapse = () => setIsCollapsed(prev => !prev)\n\n  return (\n    <NavbarContext.Provider\n      value={{ isCollapsed, toggleCollapse, collapseBreakpoint }}\n    >\n      {children}\n    </NavbarContext.Provider>\n  )\n}\n\nexport const useNavbar = (): NavbarContextType => {\n  const context = useContext(NavbarContext)\n  if (context === undefined) {\n    throw new Error('useNavbar must be used within a NavbarProvider')\n  }\n  return context\n}\n",
            "success": true,
            "size": 1066
          },
          {
            "filename": "index.ts",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Navbar/index.ts",
            "content": "export * from './Navbar'\nexport * from './NavbarContainer'\nexport * from './NavbarList'\nexport * from './NavbarItem'\nexport * from './NavbarCollapse'\nexport * from './NavbarCollapseBtn'\n",
            "success": true,
            "size": 186
          }
        ]
      }
    },
    "number-counter": {
      "id": "number-counter",
      "name": "NumberCounter",
      "path": "NumberCounter",
      "dependencies": [],
      "utils": [
        "cn"
      ],
      "files": {
        "javascript": [
          {
            "filename": "NumberCounter.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/NumberCounter/NumberCounter.jsx",
            "content": "'use client'\nimport { useEffect, useRef, useState } from 'react'\nimport { cn } from '../../utils/cn'\n\nexport const NumberCounter = ({\n  end,\n  duration = 2000,\n  decimals = 0,\n  onVisible = false,\n  repeatOnVisible = false,\n  className = '',\n  ...rest\n}) => {\n  const [count, setCount] = useState(0)\n  const counterRef = useRef(null)\n\n  useEffect(() => {\n    const startCounting = () => {\n      let start = 0\n      const increment = end / (duration / 16) // 16ms is roughly 60fps\n      const timer = setInterval(() => {\n        start += increment\n        if (start >= end) {\n          clearInterval(timer)\n          setCount(end)\n        } else {\n          setCount(start)\n        }\n      }, 16)\n    }\n\n    if (onVisible) {\n      const observer = new IntersectionObserver(\n        ([entry]) => {\n          if (entry.isIntersecting) {\n            startCounting()\n            if (!repeatOnVisible) {\n              observer.disconnect()\n            }\n          }\n        },\n        { threshold: 0.1 }\n      )\n\n      if (counterRef.current) {\n        observer.observe(counterRef.current)\n      }\n\n      return () => observer.disconnect()\n    } else {\n      startCounting()\n    }\n  }, [end, duration, onVisible, repeatOnVisible])\n\n  return (\n    <div className={cn('text-text', className)} ref={counterRef} {...rest}>\n      {count.toFixed(decimals)}\n    </div>\n  )\n}\n",
            "success": true,
            "size": 1362
          },
          {
            "filename": "index.js",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/NumberCounter/index.js",
            "content": "export * from './NumberCounter'\n",
            "success": true,
            "size": 32
          }
        ],
        "typescript": [
          {
            "filename": "NumberCounter.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/NumberCounter/NumberCounter.tsx",
            "content": "'use client'\nimport React, { useEffect, useRef, useState } from 'react'\nimport { cn } from '../../utils/cn'\n\ninterface NumberCounterProps {\n  end: number\n  duration?: number\n  decimals?: number\n  onVisible?: boolean\n  repeatOnVisible?: boolean\n  className?: string\n}\n\nexport const NumberCounter: React.FC<NumberCounterProps> = ({\n  end,\n  duration = 2000,\n  decimals = 0,\n  onVisible = false,\n  repeatOnVisible = false,\n  className = '',\n  ...rest\n}) => {\n  const [count, setCount] = useState(0)\n  const counterRef = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    const startCounting = () => {\n      let start = 0\n      const increment = end / (duration / 16) // 16ms is roughly 60fps\n      const timer = setInterval(() => {\n        start += increment\n        if (start >= end) {\n          clearInterval(timer)\n          setCount(end)\n        } else {\n          setCount(start)\n        }\n      }, 16)\n    }\n\n    if (onVisible) {\n      const observer = new IntersectionObserver(\n        ([entry]) => {\n          if (entry.isIntersecting) {\n            startCounting()\n            if (!repeatOnVisible) {\n              observer.disconnect()\n            }\n          }\n        },\n        { threshold: 0.1 }\n      )\n\n      if (counterRef.current) {\n        observer.observe(counterRef.current)\n      }\n\n      return () => observer.disconnect()\n    } else {\n      startCounting()\n    }\n  }, [end, duration, onVisible, repeatOnVisible])\n\n  return (\n    <div className={cn('text-text', className)} ref={counterRef} {...rest}>\n      {count.toFixed(decimals)}\n    </div>\n  )\n}\n",
            "success": true,
            "size": 1574
          },
          {
            "filename": "index.ts",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/NumberCounter/index.ts",
            "content": "export * from './NumberCounter'\n",
            "success": true,
            "size": 32
          }
        ]
      }
    },
    "pagination": {
      "id": "pagination",
      "name": "Pagination",
      "path": "Pagination",
      "dependencies": [],
      "utils": [
        "cn"
      ],
      "files": {
        "javascript": [
          {
            "filename": "Pagination.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Pagination/Pagination.jsx",
            "content": "'use client'\nimport React, { useState } from 'react'\nimport { cn } from '../../utils/cn'\n\nexport const Pagination = ({\n  count,\n  defaultPage = 1,\n  boundaryCount = 1,\n  siblingCount = 1,\n  showFirstLast = false,\n  showNextPrev = false,\n  firstButton = 'First',\n  lastButton = 'Last',\n  nextButton = 'Next',\n  previousButton = 'Previous',\n  firstButtonClassName = '',\n  lastButtonClassName = '',\n  nextButtonClassName = '',\n  previousButtonClassName = '',\n  className = '',\n  buttonClassName = '',\n  activeClassName = '',\n  ellipsisClassName = '',\n  numberType = 'normal',\n  numbers = [],\n  onChange\n}) => {\n  const [currentPage, setCurrentPage] = useState(defaultPage)\n\n  const convertToRoman = num => {\n    const romanNumerals = [\n      { value: 1000, symbol: 'M' },\n      { value: 900, symbol: 'CM' },\n      { value: 500, symbol: 'D' },\n      { value: 400, symbol: 'CD' },\n      { value: 100, symbol: 'C' },\n      { value: 90, symbol: 'XC' },\n      { value: 50, symbol: 'L' },\n      { value: 40, symbol: 'XL' },\n      { value: 10, symbol: 'X' },\n      { value: 9, symbol: 'IX' },\n      { value: 5, symbol: 'V' },\n      { value: 4, symbol: 'IV' },\n      { value: 1, symbol: 'I' }\n    ]\n\n    let result = ''\n    let remaining = num\n\n    for (let i = 0; i < romanNumerals.length; i++) {\n      while (remaining >= romanNumerals[i].value) {\n        result += romanNumerals[i].symbol\n        remaining -= romanNumerals[i].value\n      }\n    }\n\n    return result.toLowerCase()\n  }\n\n  const range = (start, end) => {\n    return Array.from({ length: end - start + 1 }, (_, i) => start + i)\n  }\n\n  const handlePageChange = page => {\n    if (page >= 1 && page <= count) {\n      setCurrentPage(page)\n      onChange(page)\n    }\n  }\n\n  const generatePaginationItems = () => {\n    const startPages = range(1, Math.min(boundaryCount, count))\n    const endPages = range(\n      Math.max(count - boundaryCount + 1, boundaryCount + 1),\n      count\n    )\n\n    const siblingsStart = Math.max(\n      Math.min(\n        currentPage - siblingCount,\n        count - boundaryCount - siblingCount * 2 - 1\n      ),\n      boundaryCount + 2\n    )\n    const siblingsEnd = Math.min(\n      Math.max(\n        currentPage + siblingCount,\n        boundaryCount + siblingCount * 2 + 2\n      ),\n      endPages.length > 0 ? endPages[0] - 2 : count - 1\n    )\n\n    const showStartEllipsis = siblingsStart > boundaryCount + 2\n    const showEndEllipsis = siblingsEnd < count - boundaryCount - 1\n\n    const paginationItems = [\n      ...(showFirstLast ? ['first'] : []),\n      ...(showNextPrev ? ['previous'] : []),\n      ...startPages,\n      ...(showStartEllipsis\n        ? ['start-ellipsis']\n        : boundaryCount + 1 < count - boundaryCount\n          ? [boundaryCount + 1]\n          : []),\n      ...range(siblingsStart, siblingsEnd),\n      ...(showEndEllipsis\n        ? ['end-ellipsis']\n        : count - boundaryCount > boundaryCount\n          ? [count - boundaryCount]\n          : []),\n      ...endPages,\n      ...(showNextPrev ? ['next'] : []),\n      ...(showFirstLast ? ['last'] : [])\n    ]\n\n    return paginationItems\n  }\n\n  const buttonPage = type => {\n    switch (type) {\n      case 'first':\n        return 1\n      case 'previous':\n        return currentPage - 1\n      case 'next':\n        return currentPage + 1\n      case 'last':\n        return count\n      default:\n        return null\n    }\n  }\n\n  const paginationItems = generatePaginationItems()\n\n  return (\n    <nav\n      className={cn(\n        'flex flex-wrap items-center justify-center space-x-2',\n        className\n      )}\n    >\n      {paginationItems.map((item, index) => (\n        <React.Fragment key={index}>\n          {item === 'start-ellipsis' || item === 'end-ellipsis' ? (\n            <span className={cn('text-text px-3 py-1', ellipsisClassName)}>\n              ...\n            </span>\n          ) : (\n            <button\n              onClick={() =>\n                handlePageChange(\n                  typeof item === 'string' ? buttonPage(item) : item\n                )\n              }\n              disabled={\n                typeof item === 'string'\n                  ? (item === 'previous' && currentPage === 1) ||\n                    (item === 'next' && currentPage === count)\n                  : false\n              }\n              className={cn(\n                'text-text hover:bg-bg-light rounded-md px-3 py-1',\n                currentPage === item &&\n                  'bg-bg-light/50 hover:bg-bg-light border-border border',\n                item === 'first' && firstButtonClassName,\n                item === 'last' && lastButtonClassName,\n                item === 'next' && nextButtonClassName,\n                item === 'previous' && previousButtonClassName,\n                currentPage === item && activeClassName,\n                buttonClassName\n              )}\n            >\n              {item === 'first' && firstButton}\n              {item === 'previous' && previousButton}\n              {item === 'next' && nextButton}\n              {item === 'last' && lastButton}\n              {typeof item === 'number' &&\n                (numberType === 'roman'\n                  ? convertToRoman(item)\n                  : numberType === 'custom' && numbers.length >= count\n                    ? numbers[item - 1]\n                    : item)}\n            </button>\n          )}\n        </React.Fragment>\n      ))}\n    </nav>\n  )\n}\n",
            "success": true,
            "size": 5373
          },
          {
            "filename": "index.js",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Pagination/index.js",
            "content": "export * from './Pagination'\n",
            "success": true,
            "size": 29
          }
        ],
        "typescript": [
          {
            "filename": "Pagination.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Pagination/Pagination.tsx",
            "content": "'use client'\nimport React, { useState } from 'react'\nimport { cn } from '../../utils/cn'\n\ninterface PaginationProps {\n  count: number\n  defaultPage?: number\n  boundaryCount?: number\n  siblingCount?: number\n  showFirstLast?: boolean\n  showNextPrev?: boolean\n  firstButton?: React.ReactNode\n  lastButton?: React.ReactNode\n  nextButton?: React.ReactNode\n  previousButton?: React.ReactNode\n  firstButtonClassName?: string\n  lastButtonClassName?: string\n  nextButtonClassName?: string\n  previousButtonClassName?: string\n  className?: string\n  buttonClassName?: string\n  activeClassName?: string\n  ellipsisClassName?: string\n  numberType?: 'normal' | 'roman' | 'custom'\n  numbers?: string[]\n  onChange: (page: number) => void\n}\n\nexport const Pagination: React.FC<PaginationProps> = ({\n  count,\n  defaultPage = 1,\n  boundaryCount = 1,\n  siblingCount = 1,\n  showFirstLast = false,\n  showNextPrev = false,\n  firstButton = 'First',\n  lastButton = 'Last',\n  nextButton = 'Next',\n  previousButton = 'Previous',\n  firstButtonClassName = '',\n  lastButtonClassName = '',\n  nextButtonClassName = '',\n  previousButtonClassName = '',\n  className = '',\n  buttonClassName = '',\n  activeClassName = '',\n  ellipsisClassName = '',\n  numberType = 'normal',\n  numbers = [],\n  onChange\n}) => {\n  const [currentPage, setCurrentPage] = useState(defaultPage)\n\n  const convertToRoman = (num: number): string => {\n    const romanNumerals = [\n      { value: 1000, symbol: 'M' },\n      { value: 900, symbol: 'CM' },\n      { value: 500, symbol: 'D' },\n      { value: 400, symbol: 'CD' },\n      { value: 100, symbol: 'C' },\n      { value: 90, symbol: 'XC' },\n      { value: 50, symbol: 'L' },\n      { value: 40, symbol: 'XL' },\n      { value: 10, symbol: 'X' },\n      { value: 9, symbol: 'IX' },\n      { value: 5, symbol: 'V' },\n      { value: 4, symbol: 'IV' },\n      { value: 1, symbol: 'I' }\n    ]\n\n    let result = ''\n    let remaining = num\n\n    for (let i = 0; i < romanNumerals.length; i++) {\n      while (remaining >= romanNumerals[i].value) {\n        result += romanNumerals[i].symbol\n        remaining -= romanNumerals[i].value\n      }\n    }\n\n    return result.toLowerCase()\n  }\n\n  const range = (start: number, end: number) => {\n    return Array.from({ length: end - start + 1 }, (_, i) => start + i)\n  }\n\n  const handlePageChange = (page: number) => {\n    if (page >= 1 && page <= count) {\n      setCurrentPage(page)\n      onChange(page)\n    }\n  }\n\n  const generatePaginationItems = () => {\n    const startPages = range(1, Math.min(boundaryCount, count))\n    const endPages = range(\n      Math.max(count - boundaryCount + 1, boundaryCount + 1),\n      count\n    )\n\n    const siblingsStart = Math.max(\n      Math.min(\n        currentPage - siblingCount,\n        count - boundaryCount - siblingCount * 2 - 1\n      ),\n      boundaryCount + 2\n    )\n    const siblingsEnd = Math.min(\n      Math.max(\n        currentPage + siblingCount,\n        boundaryCount + siblingCount * 2 + 2\n      ),\n      endPages.length > 0 ? endPages[0] - 2 : count - 1\n    )\n\n    const showStartEllipsis = siblingsStart > boundaryCount + 2\n    const showEndEllipsis = siblingsEnd < count - boundaryCount - 1\n\n    const paginationItems = [\n      ...(showFirstLast ? ['first'] : []),\n      ...(showNextPrev ? ['previous'] : []),\n      ...startPages,\n      ...(showStartEllipsis\n        ? ['start-ellipsis']\n        : boundaryCount + 1 < count - boundaryCount\n          ? [boundaryCount + 1]\n          : []),\n      ...range(siblingsStart, siblingsEnd),\n      ...(showEndEllipsis\n        ? ['end-ellipsis']\n        : count - boundaryCount > boundaryCount\n          ? [count - boundaryCount]\n          : []),\n      ...endPages,\n      ...(showNextPrev ? ['next'] : []),\n      ...(showFirstLast ? ['last'] : [])\n    ]\n\n    return paginationItems\n  }\n\n  const buttonPage = (type: string) => {\n    switch (type) {\n      case 'first':\n        return 1\n      case 'previous':\n        return currentPage - 1\n      case 'next':\n        return currentPage + 1\n      case 'last':\n        return count\n      default:\n        return null\n    }\n  }\n\n  const paginationItems = generatePaginationItems()\n\n  return (\n    <nav\n      className={cn(\n        'flex flex-wrap items-center justify-center space-x-2',\n        className\n      )}\n    >\n      {paginationItems.map((item, index) => (\n        <React.Fragment key={index}>\n          {item === 'start-ellipsis' || item === 'end-ellipsis' ? (\n            <span className={cn('text-text px-3 py-1', ellipsisClassName)}>\n              ...\n            </span>\n          ) : (\n            <button\n              onClick={() =>\n                handlePageChange(\n                  typeof item === 'string' ? buttonPage(item)! : item\n                )\n              }\n              disabled={\n                typeof item === 'string'\n                  ? (item === 'previous' && currentPage === 1) ||\n                    (item === 'next' && currentPage === count)\n                  : false\n              }\n              className={cn(\n                'text-text hover:bg-bg-light rounded-md px-3 py-1',\n                currentPage === item &&\n                  'bg-bg-light/50 hover:bg-bg-light border-border border',\n                item === 'first' && firstButtonClassName,\n                item === 'last' && lastButtonClassName,\n                item === 'next' && nextButtonClassName,\n                item === 'previous' && previousButtonClassName,\n                currentPage === item && activeClassName,\n                buttonClassName\n              )}\n            >\n              {item === 'first' && firstButton}\n              {item === 'previous' && previousButton}\n              {item === 'next' && nextButton}\n              {item === 'last' && lastButton}\n              {typeof item === 'number' &&\n                (numberType === 'roman'\n                  ? convertToRoman(item)\n                  : numberType === 'custom' && numbers.length >= count\n                    ? numbers[item - 1]\n                    : item)}\n            </button>\n          )}\n        </React.Fragment>\n      ))}\n    </nav>\n  )\n}\n",
            "success": true,
            "size": 6088
          },
          {
            "filename": "index.ts",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Pagination/index.ts",
            "content": "export * from './Pagination'\n",
            "success": true,
            "size": 29
          }
        ]
      }
    },
    "popover": {
      "id": "popover",
      "name": "Popover",
      "path": "Popover",
      "dependencies": [
        "@radix-ui/react-popover"
      ],
      "utils": [
        "cn"
      ],
      "files": {
        "javascript": [
          {
            "filename": "Popover.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Popover/Popover.jsx",
            "content": "'use client'\n\nimport * as PopoverPrimitive from '@radix-ui/react-popover'\nimport { cn } from '../../utils/cn'\n\nfunction Popover({ ...props }) {\n  return <PopoverPrimitive.Root {...props} />\n}\n\nfunction PopoverAction({ className, outline = false, ...props }) {\n  return (\n    <PopoverPrimitive.Trigger\n      className={cn(\n        'focus:outline-hidden focus-visible:border-ring focus-visible:ring-border hover:bg-bg-light/60 inline-flex cursor-pointer items-center justify-center gap-2 rounded-md px-4 py-2 font-medium transition duration-200 ease-in-out focus-visible:ring-1',\n        outline && 'border-border text-text bg-bg-light/30 border',\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction PopoverContent({\n  className,\n  align = 'center',\n  sideOffset = 4,\n  ...props\n}) {\n  return (\n    <PopoverPrimitive.Portal>\n      <PopoverPrimitive.Content\n        align={align}\n        sideOffset={sideOffset}\n        className={cn(\n          'bg-bg origin-(--radix-popover-content-transform-origin) border-border outline-hidden z-50 w-72 rounded-md border p-4 shadow-md',\n          className\n        )}\n        {...props}\n      />\n    </PopoverPrimitive.Portal>\n  )\n}\n\nfunction PopoverAnchor({ ...props }) {\n  return <PopoverPrimitive.Anchor {...props} />\n}\n\nexport { Popover, PopoverAction, PopoverAnchor, PopoverContent }\n",
            "success": true,
            "size": 1339
          },
          {
            "filename": "index.js",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Popover/index.js",
            "content": "export * from './Popover'\n",
            "success": true,
            "size": 26
          }
        ],
        "typescript": [
          {
            "filename": "Popover.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Popover/Popover.tsx",
            "content": "'use client'\n\nimport * as PopoverPrimitive from '@radix-ui/react-popover'\nimport * as React from 'react'\n\nimport { cn } from '../../utils/cn'\n\ninterface PopoverActionProps\n  extends React.ComponentProps<typeof PopoverPrimitive.Trigger> {\n  outline?: boolean\n}\n\nfunction Popover({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Root>) {\n  return <PopoverPrimitive.Root {...props} />\n}\n\nfunction PopoverAction({\n  className,\n  outline = false,\n  ...props\n}: PopoverActionProps) {\n  return (\n    <PopoverPrimitive.Trigger\n      className={cn(\n        'focus:outline-hidden focus-visible:border-ring focus-visible:ring-border hover:bg-bg-light/60 inline-flex cursor-pointer items-center justify-center gap-2 rounded-md px-4 py-2 font-medium transition duration-200 ease-in-out focus-visible:ring-1',\n        outline && 'border-border text-text bg-bg-light/30 border',\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction PopoverContent({\n  className,\n  align = 'center',\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Content>) {\n  return (\n    <PopoverPrimitive.Portal>\n      <PopoverPrimitive.Content\n        align={align}\n        sideOffset={sideOffset}\n        className={cn(\n          'bg-bg origin-(--radix-popover-content-transform-origin) border-border outline-hidden z-50 w-72 rounded-md border p-4 shadow-md',\n          className\n        )}\n        {...props}\n      />\n    </PopoverPrimitive.Portal>\n  )\n}\n\nfunction PopoverAnchor({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {\n  return <PopoverPrimitive.Anchor {...props} />\n}\n\nexport { Popover, PopoverAction, PopoverAnchor, PopoverContent }\n",
            "success": true,
            "size": 1680
          },
          {
            "filename": "index.ts",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Popover/index.ts",
            "content": "export * from './Popover'\n",
            "success": true,
            "size": 26
          }
        ]
      }
    },
    "progressbar": {
      "id": "progressbar",
      "name": "ProgressBar",
      "path": "ProgressBar",
      "dependencies": [
        "framer-motion"
      ],
      "utils": [
        "cn"
      ],
      "files": {
        "javascript": [
          {
            "filename": "ProgressBar.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/ProgressBar/ProgressBar.jsx",
            "content": "'use client'\n\nimport { useEffect, useRef, useState } from 'react'\nimport { cn } from '../../utils/cn'\n\nexport const ProgressBar = ({\n  value,\n  contentPosition = 'right',\n  duration = 2,\n  animateOnLoad = true,\n  animateOnVisible = false,\n  children,\n  className = '',\n  containerClassName = '',\n  fillClassName = '',\n  contentClassName = '',\n  min = 0,\n  max = 100,\n  ...rest\n}) => {\n  const clampedValue = Math.min(Math.max(value, min), max)\n  const [percentage, setPercentage] = useState(\n    ((clampedValue - min) / (max - min)) * 100\n  )\n\n  const durationValue = (duration * 1000) / value\n  const progressBarRef = useRef(null)\n  const [isVisible, setIsVisible] = useState(false)\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        setIsVisible(entry.isIntersecting)\n      },\n      {\n        root: null,\n        rootMargin: '0px',\n        threshold: 0.5\n      }\n    )\n\n    if (progressBarRef.current) {\n      observer.observe(progressBarRef.current)\n    }\n\n    return () => {\n      if (progressBarRef.current) {\n        observer.unobserve(progressBarRef.current)\n      }\n    }\n  }, [])\n\n  useEffect(() => {\n    if (animateOnLoad === true && !isVisible) {\n      setPercentage(0)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (animateOnVisible === true && !isVisible) {\n      setPercentage(0)\n    } else if (isVisible) {\n      const interval = setInterval(() => {\n        if (percentage < value) {\n          setPercentage(prevPercentage => Math.min(prevPercentage + 1, value))\n        } else {\n          clearInterval(interval)\n        }\n      }, durationValue)\n\n      return () => clearInterval(interval)\n    }\n  }, [animateOnVisible, isVisible, value])\n\n  return (\n    <div\n      className={cn('my-2 flex w-full items-center gap-4', className)}\n      {...rest}\n    >\n      {contentPosition === 'left' && (\n        <span className={cn('text-text min-w-10', contentClassName)}>\n          {!children && <>{`${percentage}%`}</>}\n          {children && children}\n        </span>\n      )}\n      <div\n        className={cn(\n          'border-border bg-bg-light flex-1 overflow-hidden rounded-full border p-1',\n          containerClassName\n        )}\n      >\n        <div\n          className={cn(\n            'bg-primary relative flex h-4 rounded-full',\n            fillClassName\n          )}\n          role='progressbar'\n          aria-valuenow={clampedValue}\n          aria-valuemin={min}\n          aria-valuemax={max}\n          style={{ width: `${percentage}%` }}\n          ref={progressBarRef}\n        ></div>\n      </div>\n      {contentPosition === 'right' && (\n        <span className={cn('text-text min-w-10', contentClassName)}>\n          {!children && <>{`${percentage}%`}</>}\n          {children && children}\n        </span>\n      )}\n    </div>\n  )\n}\n",
            "success": true,
            "size": 2799
          },
          {
            "filename": "index.js",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/ProgressBar/index.js",
            "content": "export * from './ProgressBar'\n",
            "success": true,
            "size": 30
          }
        ],
        "typescript": [
          {
            "filename": "ProgressBar.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/ProgressBar/ProgressBar.tsx",
            "content": "'use client'\n\nimport React, { useEffect, useRef, useState } from 'react'\nimport { cn } from '../../utils/cn'\n\ninterface ProgressBarProps extends React.HTMLAttributes<HTMLDivElement> {\n  value: number\n  contentPosition?: 'left' | 'right'\n  duration?: number\n  animateOnLoad?: boolean\n  animateOnVisible?: boolean\n  min?: number\n  max?: number\n  className?: string\n  containerClassName?: string\n  fillClassName?: string\n  contentClassName?: string\n}\n\nexport const ProgressBar: React.FC<ProgressBarProps> = ({\n  value,\n  contentPosition = 'right',\n  duration = 2,\n  animateOnLoad = true,\n  animateOnVisible = false,\n  children,\n  className = '',\n  containerClassName = '',\n  fillClassName = '',\n  contentClassName = '',\n  min = 0,\n  max = 100,\n  ...rest\n}) => {\n  // Ensure value is within min and max range\n  const clampedValue = Math.min(Math.max(value, min), max)\n  // Calculate percentage\n  const [percentage, setPercentage] = useState<number>(\n    ((clampedValue - min) / (max - min)) * 100\n  )\n\n  const durationValue = (duration * 1000) / value\n\n  // Ref for the progress bar\n  const progressBarRef = useRef<HTMLDivElement>(null)\n  // State to track visibility\n  const [isVisible, setIsVisible] = useState(false)\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        setIsVisible(entry.isIntersecting)\n      },\n      {\n        root: null,\n        rootMargin: '0px',\n        threshold: 0.5 // Adjust this threshold as needed\n      }\n    )\n\n    if (progressBarRef.current) {\n      observer.observe(progressBarRef.current)\n    }\n\n    return () => {\n      if (progressBarRef.current) {\n        observer.unobserve(progressBarRef.current)\n      }\n    }\n  }, [])\n\n  useEffect(() => {\n    if (animateOnLoad === true && !isVisible) {\n      setPercentage(0)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (animateOnVisible === true && !isVisible) {\n      setPercentage(0)\n    } else if (isVisible) {\n      const interval = setInterval(() => {\n        if (percentage < value) {\n          setPercentage(prevPercentage => Math.min(prevPercentage + 1, value))\n        } else {\n          clearInterval(interval)\n        }\n      }, durationValue)\n\n      return () => clearInterval(interval)\n    }\n  }, [animateOnVisible, isVisible, value])\n\n  return (\n    <div\n      className={cn('my-2 flex w-full items-center gap-4', className)}\n      {...rest}\n    >\n      {contentPosition === 'left' && (\n        <span className={cn('text-text min-w-10', contentClassName)}>\n          {!children && <>{`${percentage}%`}</>}\n          {children && children}\n        </span>\n      )}\n      <div\n        className={cn(\n          'border-border bg-bg-light flex-1 overflow-hidden rounded-full border p-1',\n          containerClassName\n        )}\n      >\n        <div\n          className={cn(\n            'bg-primary relative flex h-4 rounded-full',\n            fillClassName\n          )}\n          role='progressbar'\n          aria-valuenow={clampedValue}\n          aria-valuemin={min}\n          aria-valuemax={max}\n          style={{ width: `${percentage}%` }} // Initial width for animation\n          ref={progressBarRef}\n        ></div>\n      </div>\n      {contentPosition === 'right' && (\n        <span className={cn('text-text min-w-10', contentClassName)}>\n          {!children && <>{`${percentage}%`}</>}\n          {children && children}\n        </span>\n      )}\n    </div>\n  )\n}\n",
            "success": true,
            "size": 3397
          },
          {
            "filename": "index.ts",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/ProgressBar/index.ts",
            "content": "export * from './ProgressBar'\n",
            "success": true,
            "size": 30
          }
        ]
      }
    },
    "radio": {
      "id": "radio",
      "name": "Radio",
      "path": "Radio",
      "dependencies": [],
      "utils": [
        "cn"
      ],
      "files": {
        "javascript": [
          {
            "filename": "Radio.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Radio/Radio.jsx",
            "content": "'use client'\n\nimport React from 'react'\nimport { cn } from '../../utils/cn'\n\nexport const Radio = ({\n  id,\n  name,\n  value,\n  label,\n  checked,\n  className = '',\n  labelClassName = '',\n  wrapperClassName = '',\n  onChange\n}) => {\n  return (\n    <div className={cn('flex items-center', wrapperClassName)}>\n      <input\n        type='radio'\n        id={id}\n        name={name}\n        value={value}\n        checked={checked}\n        onChange={onChange}\n        className={cn('form-radio accent-primary h-5 w-5', className)}\n      />\n      <label htmlFor={id} className={cn('text-text ml-2', labelClassName)}>\n        {label}\n      </label>\n    </div>\n  )\n}\n",
            "success": true,
            "size": 654
          },
          {
            "filename": "index.js",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Radio/index.js",
            "content": "export * from './Radio'\n",
            "success": true,
            "size": 24
          }
        ],
        "typescript": [
          {
            "filename": "Radio.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Radio/Radio.tsx",
            "content": "'use client'\n\nimport React from 'react'\nimport { cn } from '../../utils/cn'\n\ninterface RadioProps {\n  id: string\n  name: string\n  value: string\n  label: string\n  checked?: boolean\n  className?: string\n  labelClassName?: string\n  wrapperClassName?: string\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void\n}\n\nexport const Radio: React.FC<RadioProps> = ({\n  id,\n  name,\n  value,\n  label,\n  checked,\n  className = '',\n  labelClassName = '',\n  wrapperClassName = '',\n  onChange\n}) => {\n  return (\n    <div className={cn('flex items-center', wrapperClassName)}>\n      <input\n        type='radio'\n        id={id}\n        name={name}\n        value={value}\n        checked={checked}\n        onChange={onChange}\n        className={cn('form-radio accent-primary h-5 w-5', className)}\n      />\n      <label htmlFor={id} className={cn('text-text ml-2', labelClassName)}>\n        {label}\n      </label>\n    </div>\n  )\n}\n",
            "success": true,
            "size": 922
          },
          {
            "filename": "index.ts",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Radio/index.ts",
            "content": "export * from './Radio'\n",
            "success": true,
            "size": 24
          }
        ]
      }
    },
    "rating": {
      "id": "rating",
      "name": "Rating",
      "path": "Rating",
      "dependencies": [],
      "utils": [
        "cn"
      ],
      "files": {
        "javascript": [
          {
            "filename": "Rating.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Rating/Rating.jsx",
            "content": "'use client'\nimport { useEffect, useState } from 'react'\n\nconst Star = ({\n  className = '',\n  size = 24,\n  icon,\n  style,\n  fillPercentage = 100,\n  unratedColor,\n  onClick,\n  onMouseEnter,\n  onMouseLeave,\n  ...rest\n}) => {\n  if (icon) {\n    return (\n      <span\n        className={className}\n        style={{\n          display: 'inline-flex',\n          position: 'relative',\n          ...style\n        }}\n        onClick={onClick}\n        onMouseEnter={onMouseEnter}\n        onMouseLeave={onMouseLeave}\n        {...rest}\n      >\n        <span\n          style={{\n            position: 'absolute',\n            color: `${fillPercentage < 100 ? unratedColor : style.color}`\n          }}\n        >\n          {icon}\n        </span>\n        <span\n          style={{\n            clipPath: `inset(0 ${100 - fillPercentage}% 0 0)`\n          }}\n        >\n          {icon}\n        </span>\n      </span>\n    )\n  }\n\n  return (\n    <span\n      onClick={onClick}\n      onMouseEnter={onMouseEnter}\n      onMouseLeave={onMouseLeave}\n      style={{\n        display: 'inline-flex',\n        position: 'relative',\n        ...style\n      }}\n      className={className}\n      {...rest}\n    >\n      {/* Background star (unfilled) */}\n      <svg\n        width={size}\n        height={size}\n        viewBox='0 0 24 22'\n        fill='none'\n        xmlns='http://www.w3.org/2000/svg'\n        style={{\n          position: 'absolute',\n          color: `${fillPercentage < 100 ? unratedColor : style.color}`\n        }}\n      >\n        <g clipPath='url(#a)'>\n          <path\n            d='M11.996 0c.383 0 .733.217.9.563l2.858 5.887 6.384.942a.99.99 0 0 1 .804.679c.116.362.02.754-.246 1.02l-4.63 4.592 1.092 6.484a1.002 1.002 0 0 1-1.458 1.05l-5.708-3.05-5.7 3.045a.99.99 0 0 1-1.054-.07 1.01 1.01 0 0 1-.405-.98l1.092-6.483-4.63-4.587A1 1 0 0 1 1.05 8.07c.117-.358.43-.621.804-.68l6.384-.941L11.096.563a1 1 0 0 1 .9-.563z'\n            fill='currentColor'\n          />\n        </g>\n        <defs>\n          <clipPath id='a'>\n            <path fill='currentColor' d='M0 0h24v21.333H0z' />\n          </clipPath>\n        </defs>\n      </svg>\n\n      {/* Foreground star (filled) with clip path */}\n      <svg\n        width={size}\n        height={size}\n        viewBox='0 0 24 22'\n        fill='currentColor'\n        xmlns='http://www.w3.org/2000/svg'\n        style={{\n          clipPath: `inset(0 ${100 - fillPercentage}% 0 0)`\n        }}\n      >\n        <g clipPath='url(#b)'>\n          <path\n            d='M11.996 0c.383 0 .733.217.9.563l2.858 5.887 6.384.942a.99.99 0 0 1 .804.679c.116.362.02.754-.246 1.02l-4.63 4.592 1.092 6.484a1.002 1.002 0 0 1-1.458 1.05l-5.708-3.05-5.7 3.045a.99.99 0 0 1-1.054-.07 1.01 1.01 0 0 1-.405-.98l1.092-6.483-4.63-4.587A1 1 0 0 1 1.05 8.07c.117-.358.43-.621.804-.68l6.384-.941L11.096.563a1 1 0 0 1 .9-.563z'\n            fill='currentColor'\n          />\n        </g>\n        <defs>\n          <clipPath id='b'>\n            <path fill='currentColor' d='M0 0h24v21.333H0z' />\n          </clipPath>\n        </defs>\n      </svg>\n    </span>\n  )\n}\n\nconst defaultRatingTexts = ['Terrible', 'Bad', 'OK', 'Good', 'Excellent']\n\nexport const Rating = ({\n  maxRating = 5,\n  initialRating = 0,\n  size = 24,\n  onChange,\n  starColor = 'color-mix(in oklab, var(--color-primary) 50%, transparent)',\n  hoverColor = 'var(--color-primary)',\n  unratedColor = 'var(--color-bg)',\n  ratingTexts = defaultRatingTexts,\n  readOnly = false,\n  className = '',\n  icon\n}) => {\n  const [rating, setRating] = useState(initialRating)\n  const [hover, setHover] = useState(null)\n\n  useEffect(() => {\n    setRating(initialRating)\n  }, [initialRating])\n\n  const handleClick = value => {\n    if (!readOnly) {\n      setRating(value)\n      const syntheticEvent = {\n        target: { value: value.toString() },\n        currentTarget: { value: value.toString() }\n      }\n\n      onChange?.(syntheticEvent, value)\n    }\n  }\n\n  const handleMouseEnter = value => {\n    if (!readOnly) {\n      setHover(value)\n    }\n  }\n\n  const handleMouseLeave = () => {\n    if (!readOnly) {\n      setHover(null)\n    }\n  }\n\n  const getColor = index => {\n    if (hover !== null) {\n      return index <= hover ? hoverColor : unratedColor\n    }\n    const currentRating = hover !== null ? hover : rating\n    const difference = index - currentRating\n    if (difference > 0 && difference < 1) {\n      return starColor\n    }\n    return index <= rating ? starColor : unratedColor\n  }\n\n  const getStarFillPercentage = index => {\n    const currentRating = hover !== null ? hover : rating\n    const difference = currentRating - index\n\n    if (difference <= 0) return 0\n    if (difference >= 1) return 100\n    if (difference > 0 && difference < 1) return difference * 100\n    return Math.round(difference * 100)\n  }\n\n  const getRatingText = () => {\n    const currentRating = hover !== null ? hover : rating\n    return ratingTexts[Math.ceil(currentRating) - 1] || ''\n  }\n\n  return (\n    <div\n      style={{ display: 'inline-flex', alignItems: 'center', gap: '4px' }}\n      className={className}\n    >\n      <div style={{ display: 'flex', gap: '4px' }}>\n        {[...Array(maxRating)].map((_, index) => {\n          const value = index + 1\n          const fillPercentage = getStarFillPercentage(index)\n\n          return (\n            <Star\n              key={index}\n              icon={icon}\n              className={fillPercentage > 0 ? 'filled' : ''}\n              size={size}\n              fillPercentage={fillPercentage}\n              unratedColor={unratedColor}\n              style={{\n                cursor: readOnly ? 'default' : 'pointer',\n                color: getColor(value)\n              }}\n              onClick={() => handleClick(value)}\n              onMouseEnter={() => handleMouseEnter(value)}\n              onMouseLeave={handleMouseLeave}\n            />\n          )\n        })}\n      </div>\n      {ratingTexts.length > 0 && (\n        <span style={{ marginLeft: '8px' }}>{getRatingText()}</span>\n      )}\n    </div>\n  )\n}\n\nexport default Rating\n",
            "success": true,
            "size": 5984
          },
          {
            "filename": "index.js",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Rating/index.js",
            "content": "export * from './Rating'\n",
            "success": true,
            "size": 25
          }
        ],
        "typescript": [
          {
            "filename": "Rating.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Rating/Rating.tsx",
            "content": "'use client'\nimport React, { useState, useEffect } from 'react'\n\ninterface RatingProps {\n  maxRating?: number\n  initialRating?: number\n  size?: number\n  onChange?: (\n    event: React.ChangeEvent<HTMLInputElement>,\n    rating: number\n  ) => void\n  starColor?: string\n  hoverColor?: string\n  unratedColor?: string\n  ratingTexts?: string[]\n  readOnly?: boolean\n  icon?: React.ReactNode\n  theme?: 'default' | 'dark'\n  className?: string\n}\n\ninterface StarProps extends React.HTMLAttributes<HTMLSpanElement> {\n  className?: string\n  size?: number\n  icon?: React.ReactNode\n  style: React.CSSProperties\n  fillPercentage?: number\n  unratedColor?: string\n}\n\nconst Star: React.FC<StarProps> = ({\n  className = '',\n  size = 24,\n  icon,\n  style,\n  fillPercentage = 100,\n  unratedColor,\n  onClick,\n  onMouseEnter,\n  onMouseLeave,\n  ...rest\n}) => {\n  if (icon) {\n    return (\n      <span\n        className={className}\n        style={{\n          display: 'inline-flex',\n          position: 'relative',\n          ...style\n        }}\n        onClick={onClick}\n        onMouseEnter={onMouseEnter}\n        onMouseLeave={onMouseLeave}\n        {...rest}\n      >\n        <span\n          style={{\n            position: 'absolute',\n            color: `${fillPercentage < 100 ? unratedColor : style.color}`\n          }}\n        >\n          {icon}\n        </span>\n        <span\n          style={{\n            clipPath: `inset(0 ${100 - fillPercentage}% 0 0)`\n          }}\n        >\n          {icon}\n        </span>\n      </span>\n    )\n  }\n\n  return (\n    <span\n      onClick={onClick}\n      onMouseEnter={onMouseEnter}\n      onMouseLeave={onMouseLeave}\n      style={{\n        display: 'inline-flex',\n        position: 'relative',\n        ...style\n      }}\n      className={className}\n      {...rest}\n    >\n      {/* Background star (unfilled) */}\n      <svg\n        width={size}\n        height={size}\n        viewBox='0 0 24 22'\n        fill='none'\n        xmlns='http://www.w3.org/2000/svg'\n        style={{\n          position: 'absolute',\n          color: `${fillPercentage < 100 ? unratedColor : style.color}`\n        }}\n      >\n        <g clipPath='url(#a)'>\n          <path\n            d='M11.996 0c.383 0 .733.217.9.563l2.858 5.887 6.384.942a.99.99 0 0 1 .804.679c.116.362.02.754-.246 1.02l-4.63 4.592 1.092 6.484a1.002 1.002 0 0 1-1.458 1.05l-5.708-3.05-5.7 3.045a.99.99 0 0 1-1.054-.07 1.01 1.01 0 0 1-.405-.98l1.092-6.483-4.63-4.587A1 1 0 0 1 1.05 8.07c.117-.358.43-.621.804-.68l6.384-.941L11.096.563a1 1 0 0 1 .9-.563z'\n            fill='currentColor'\n          />\n        </g>\n        <defs>\n          <clipPath id='a'>\n            <path fill='currentColor' d='M0 0h24v21.333H0z' />\n          </clipPath>\n        </defs>\n      </svg>\n\n      {/* Foreground star (filled) with clip path */}\n      <svg\n        width={size}\n        height={size}\n        viewBox='0 0 24 22'\n        fill='currentColor'\n        xmlns='http://www.w3.org/2000/svg'\n        style={{\n          clipPath: `inset(0 ${100 - fillPercentage}% 0 0)`\n        }}\n      >\n        <g clipPath='url(#b)'>\n          <path\n            d='M11.996 0c.383 0 .733.217.9.563l2.858 5.887 6.384.942a.99.99 0 0 1 .804.679c.116.362.02.754-.246 1.02l-4.63 4.592 1.092 6.484a1.002 1.002 0 0 1-1.458 1.05l-5.708-3.05-5.7 3.045a.99.99 0 0 1-1.054-.07 1.01 1.01 0 0 1-.405-.98l1.092-6.483-4.63-4.587A1 1 0 0 1 1.05 8.07c.117-.358.43-.621.804-.68l6.384-.941L11.096.563a1 1 0 0 1 .9-.563z'\n            fill='currentColor'\n          />\n        </g>\n        <defs>\n          <clipPath id='b'>\n            <path fill='currentColor' d='M0 0h24v21.333H0z' />\n          </clipPath>\n        </defs>\n      </svg>\n    </span>\n  )\n}\n\nconst defaultRatingTexts = ['Terrible', 'Bad', 'OK', 'Good', 'Excellent']\n\nexport const Rating: React.FC<RatingProps> = ({\n  maxRating = 5,\n  initialRating = 0,\n  size = 24,\n  onChange,\n  starColor = 'color-mix(in oklab, var(--color-primary) 50%, transparent)',\n  hoverColor = 'var(--color-primary)',\n  unratedColor = 'var(--color-bg)',\n  ratingTexts = defaultRatingTexts,\n  readOnly = false,\n  className = '',\n  icon\n}) => {\n  const [rating, setRating] = useState(initialRating)\n  const [hover, setHover] = useState<number | null>(null)\n\n  useEffect(() => {\n    setRating(initialRating)\n  }, [initialRating])\n\n  const handleClick = (value: number) => {\n    if (!readOnly) {\n      setRating(value)\n      const syntheticEvent = {\n        target: { value: value.toString() },\n        currentTarget: { value: value.toString() }\n      } as React.ChangeEvent<HTMLInputElement>\n\n      onChange?.(syntheticEvent, value)\n    }\n  }\n\n  const handleMouseEnter = (value: number) => {\n    if (!readOnly) {\n      setHover(value)\n    }\n  }\n\n  const handleMouseLeave = () => {\n    if (!readOnly) {\n      setHover(null)\n    }\n  }\n\n  const getColor = (index: number) => {\n    if (hover !== null) {\n      return index <= hover ? hoverColor : unratedColor\n    }\n    const currentRating = hover !== null ? hover : rating\n    const difference = index - currentRating\n    if (difference > 0 && difference < 1) {\n      return starColor\n    }\n    return index <= rating ? starColor : unratedColor\n  }\n\n  const getStarFillPercentage = (index: number) => {\n    const currentRating = hover !== null ? hover : rating\n    const difference = currentRating - index\n\n    if (difference <= 0) return 0\n    if (difference >= 1) return 100\n    if (difference > 0 && difference < 1) return difference * 100\n    return Math.round(difference * 100)\n  }\n\n  const getRatingText = () => {\n    const currentRating = hover !== null ? hover : rating\n    return ratingTexts[Math.ceil(currentRating) - 1] || ''\n  }\n\n  return (\n    <div\n      style={{ display: 'inline-flex', alignItems: 'center', gap: '4px' }}\n      className={className}\n    >\n      <div style={{ display: 'flex', gap: '4px' }}>\n        {[...Array(maxRating)].map((_, index) => {\n          const value = index + 1\n          const fillPercentage = getStarFillPercentage(index)\n\n          return (\n            <Star\n              key={index}\n              icon={icon}\n              className={fillPercentage > 0 ? 'filled' : ''}\n              size={size}\n              fillPercentage={fillPercentage}\n              unratedColor={unratedColor}\n              style={{\n                cursor: readOnly ? 'default' : 'pointer',\n                color: getColor(value)\n              }}\n              onClick={() => handleClick(value)}\n              onMouseEnter={() => handleMouseEnter(value)}\n              onMouseLeave={handleMouseLeave}\n            />\n          )\n        })}\n      </div>\n      {ratingTexts.length > 0 && (\n        <span style={{ marginLeft: '8px' }}>{getRatingText()}</span>\n      )}\n    </div>\n  )\n}\n\nexport default Rating\n",
            "success": true,
            "size": 6712
          },
          {
            "filename": "index.ts",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Rating/index.ts",
            "content": "export * from './Rating'\n",
            "success": true,
            "size": 25
          }
        ]
      }
    },
    "sidebar": {
      "id": "sidebar",
      "name": "Sidebar",
      "path": "Sidebar",
      "dependencies": [
        "framer-motion",
        "lucide-react"
      ],
      "utils": [
        "cn"
      ],
      "files": {
        "javascript": [
          {
            "filename": "Sidebar.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Sidebar/Sidebar.jsx",
            "content": "'use client'\n\nimport React from 'react'\nimport { cn } from '../../utils/cn'\nimport { useSidebar } from './SidebarContext'\n\nexport const Sidebar = ({\n  children,\n  className = '',\n  breakPoint = 'md',\n  ...rest\n}) => {\n  const { isOpen } = useSidebar()\n\n  const breakpointStyle = breakPoint => {\n    switch (breakPoint) {\n      case 'sm':\n        return 'md:flex md:translate-x-0 md:relative'\n      case 'md':\n        return 'lg:flex lg:translate-x-0 lg:relative'\n      case 'lg':\n        return 'xl:flex xl:translate-x-0 xl:relative'\n      case 'xl':\n        return '2xl:flex 2xl:translate-x-0 2xl:relative'\n      case '2xl':\n        return ''\n      case 'none':\n        return 'flex !translate-x-0 relative'\n      default:\n        return 'lg:flex lg:translate-x-0 lg:relative'\n    }\n  }\n\n  return (\n    <aside\n      className={cn(\n        'bg-bg fixed left-0 top-0 z-40 h-screen w-64 flex-col p-5 transition-all duration-300 ease-in-out',\n        breakpointStyle(breakPoint),\n        isOpen ? 'translate-x-0' : '-translate-x-full',\n        className\n      )}\n      {...rest}\n    >\n      {children}\n    </aside>\n  )\n}\n",
            "success": true,
            "size": 1118
          },
          {
            "filename": "SidebarHeader.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Sidebar/SidebarHeader.jsx",
            "content": "'use client'\n\nimport { cn } from '../../utils/cn'\n\nexport const SidebarHeader = ({ children, className = '', ...rest }) => {\n  return (\n    <div\n      className={cn(\n        'border-border text-text border-b-2 px-2.5 py-3 transition-all duration-200 ease-in-out',\n        className\n      )}\n      {...rest}\n    >\n      {children}\n    </div>\n  )\n}\n",
            "success": true,
            "size": 347
          },
          {
            "filename": "SidebarItem.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Sidebar/SidebarItem.jsx",
            "content": "'use client'\n\nimport { cn } from '../../utils/cn'\n\nexport const SidebarItem = ({ children, onClick, className = '', ...rest }) => {\n  return (\n    <div\n      className={cn(\n        'text-body1 hover:bg-bg-light text-text flex cursor-pointer items-center gap-3 rounded-md p-2.5 font-normal transition-all duration-150 ease-in-out',\n        className\n      )}\n      onClick={onClick}\n      {...rest}\n    >\n      {children}\n    </div>\n  )\n}\n",
            "success": true,
            "size": 438
          },
          {
            "filename": "SidebarContainer.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Sidebar/SidebarContainer.jsx",
            "content": "'use client'\n\nimport { cn } from '../../utils/cn'\n\nexport const SidebarContainer = ({ children, className = '', ...rest }) => {\n  return (\n    <div\n      className={cn('my-2 grow space-y-1 overflow-y-auto', className)}\n      {...rest}\n    >\n      {children}\n    </div>\n  )\n}\n",
            "success": true,
            "size": 275
          },
          {
            "filename": "SidebarFooter.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Sidebar/SidebarFooter.jsx",
            "content": "'use client'\n\nimport { cn } from '../../utils/cn'\n\nexport const SidebarFooter = ({ children, className = '', ...rest }) => {\n  return (\n    <div\n      className={cn(\n        'border-border border-t-2 px-2.5 py-3 transition-all duration-200 ease-in-out',\n        className\n      )}\n      {...rest}\n    >\n      {children}\n    </div>\n  )\n}\n",
            "success": true,
            "size": 337
          },
          {
            "filename": "SidebarContext.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Sidebar/SidebarContext.jsx",
            "content": "'use client'\n\nimport React, { createContext, useContext, useState } from 'react'\n\nconst SidebarContext = createContext(undefined)\n\nexport const SidebarProvider = ({ children }) => {\n  const [isOpen, setIsOpen] = useState(false)\n\n  const toggleSidebar = () => {\n    setIsOpen(prev => !prev)\n  }\n  const closeSidebar = () => setIsOpen(false)\n\n  return (\n    <SidebarContext.Provider value={{ isOpen, toggleSidebar, closeSidebar }}>\n      {children}\n    </SidebarContext.Provider>\n  )\n}\n\nexport const useSidebar = () => {\n  const context = useContext(SidebarContext)\n  if (context === undefined) {\n    throw new Error('useSidebar must be used within a SidebarProvider')\n  }\n  return context\n}\n",
            "success": true,
            "size": 690
          },
          {
            "filename": "SidebarToggleButton.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Sidebar/SidebarToggleButton.jsx",
            "content": "'use client'\n\nimport { Menu } from 'lucide-react'\nimport React from 'react'\nimport { cn } from '../../utils/cn'\nimport { Button } from '../Button'\nimport { useSidebar } from './SidebarContext'\n\nexport const SidebarToggleButton = ({\n  className = '',\n  variant = 'default',\n  size = 'medium',\n  icon = <Menu />,\n  ...rest\n}) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      onClick={toggleSidebar}\n      className={cn(className)}\n      variant={variant}\n      size={size}\n      icon={icon}\n      {...rest}\n    />\n  )\n}\n",
            "success": true,
            "size": 545
          },
          {
            "filename": "index.js",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Sidebar/index.js",
            "content": "export * from './Sidebar'\nexport * from './SidebarHeader'\nexport * from './SidebarContainer'\nexport * from './SidebarFooter'\nexport * from './SidebarItem'\n",
            "success": true,
            "size": 155
          }
        ],
        "typescript": [
          {
            "filename": "Sidebar.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Sidebar/Sidebar.tsx",
            "content": "'use client'\n\nimport React, { ReactNode } from 'react'\nimport { cn } from '../../utils/cn'\nimport { useSidebar } from './SidebarContext'\n\ninterface SidebarProps {\n  children: ReactNode\n  className?: string\n  breakPoint?: 'sm' | 'md' | 'lg' | 'xl' | '2xl' | 'none'\n}\n\nexport const Sidebar: React.FC<SidebarProps> = ({\n  children,\n  className = '',\n  breakPoint = 'md',\n  ...rest\n}) => {\n  const { isOpen } = useSidebar()\n\n  const breakpointStyle = (breakPoint: 'sm' | 'md' | 'lg' | 'xl' | '2xl' | 'none') => {\n    switch (breakPoint) {\n      case 'sm':\n        return 'md:flex md:translate-x-0 md:relative'\n      case 'md':\n        return 'lg:flex lg:translate-x-0 lg:relative'\n      case 'lg':\n        return 'xl:flex xl:translate-x-0 xl:relative'\n      case 'xl':\n        return '2xl:flex 2xl:translate-x-0 2xl:relative'\n      case '2xl':\n        return ''\n      case 'none':\n        return 'flex !translate-x-0 relative'\n      default:\n        return 'lg:flex lg:translate-x-0 lg:relative'\n    }\n  }\n\n  return (\n    <aside\n      className={cn(\n        'bg-bg fixed top-0 left-0 z-40 h-screen w-64 flex-col p-5 transition-all duration-300 ease-in-out',\n        breakpointStyle(breakPoint),\n        isOpen ? 'translate-x-0' : '-translate-x-full',\n        className\n      )}\n      {...rest}\n    >\n      {children}\n    </aside>\n  )\n}\n",
            "success": true,
            "size": 1332
          },
          {
            "filename": "SidebarHeader.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Sidebar/SidebarHeader.tsx",
            "content": "'use client'\n\nimport React, { ReactNode } from 'react'\nimport { cn } from '../../utils/cn'\n\ninterface SidebarHeaderProps {\n  children: ReactNode\n  className?: string\n}\n\nexport const SidebarHeader: React.FC<SidebarHeaderProps> = ({\n  children,\n  className = '',\n  ...rest\n}) => {\n  return (\n    <div\n      className={cn(\n        'border-border text-text border-b-2 px-2.5 py-3 transition-all duration-200 ease-in-out',\n        className\n      )}\n      {...rest}\n    >\n      {children}\n    </div>\n  )\n}\n",
            "success": true,
            "size": 501
          },
          {
            "filename": "SidebarItem.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Sidebar/SidebarItem.tsx",
            "content": "'use client'\n\nimport React, { ReactNode } from 'react'\nimport { cn } from '../../utils/cn'\n\ninterface SidebarItemProps {\n  children: ReactNode\n  onClick?: () => void\n  className?: string\n}\n\nexport const SidebarItem: React.FC<SidebarItemProps> = ({\n  children,\n  onClick,\n  className = '',\n  ...rest\n}) => {\n  return (\n    <div\n      className={cn(\n        'text-body1 hover:bg-bg-light text-text flex cursor-pointer items-center gap-3 rounded-md p-2.5 font-normal transition-all duration-150 ease-in-out',\n        className\n      )}\n      onClick={onClick}\n      {...rest}\n    >\n      {children}\n    </div>\n  )\n}\n",
            "success": true,
            "size": 613
          },
          {
            "filename": "SidebarContainer.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Sidebar/SidebarContainer.tsx",
            "content": "'use client'\n\nimport React, { ReactNode } from 'react'\nimport { cn } from '../../utils/cn'\n\ninterface SidebarContainerProps {\n  children: ReactNode\n  className?: string\n}\n\nexport const SidebarContainer: React.FC<SidebarContainerProps> = ({\n  children,\n  className = '',\n  ...rest\n}) => {\n  return (\n    <div\n      className={cn('my-2 grow space-y-1 overflow-y-auto', className)}\n      {...rest}\n    >\n      {children}\n    </div>\n  )\n}\n",
            "success": true,
            "size": 435
          },
          {
            "filename": "SidebarFooter.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Sidebar/SidebarFooter.tsx",
            "content": "'use client'\n\nimport React, { ReactNode } from 'react'\nimport { cn } from '../../utils/cn'\n\ninterface SidebarFooterProps {\n  children: ReactNode\n  className?: string\n}\n\nexport const SidebarFooter: React.FC<SidebarFooterProps> = ({\n  children,\n  className = '',\n  ...rest\n}) => {\n  return (\n    <div\n      className={cn(\n        'border-border border-t-2 px-2.5 py-3 transition-all duration-200 ease-in-out',\n        className\n      )}\n      {...rest}\n    >\n      {children}\n    </div>\n  )\n}\n",
            "success": true,
            "size": 491
          },
          {
            "filename": "SidebarContext.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Sidebar/SidebarContext.tsx",
            "content": "// ./app/src/components/Sidebar/SidebarContext.tsx\n'use client'\n\nimport React, { createContext, useContext, useState } from 'react'\n\ninterface SidebarContextType {\n  isOpen: boolean\n  toggleSidebar: () => void\n  closeSidebar: () => void\n}\n\nconst SidebarContext = createContext<SidebarContextType | undefined>(undefined)\n\nexport const SidebarProvider: React.FC<{ children: React.ReactNode }> = ({\n  children\n}) => {\n  const [isOpen, setIsOpen] = useState(false)\n\n  const toggleSidebar = () => {\n    console.log('clicked')\n    setIsOpen(prev => !prev)\n  }\n  const closeSidebar = () => setIsOpen(false)\n\n  return (\n    <SidebarContext.Provider value={{ isOpen, toggleSidebar, closeSidebar }}>\n      {children}\n    </SidebarContext.Provider>\n  )\n}\n\nexport const useSidebar = (): SidebarContextType => {\n  const context = useContext(SidebarContext)\n  if (context === undefined) {\n    throw new Error('useSidebar must be used within a SidebarProvider')\n  }\n  return context\n}\n",
            "success": true,
            "size": 970
          },
          {
            "filename": "SidebarToggleButton.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Sidebar/SidebarToggleButton.tsx",
            "content": "// ./app/src/components/Sidebar/SidebarToggleButton.tsx\n'use client'\n\nimport { Menu } from 'lucide-react'\nimport React, { ReactNode } from 'react'\nimport { cn } from '../../utils/cn'\nimport { Button } from '../Button'\nimport { useSidebar } from './SidebarContext'\n\ninterface SidebarToggleButtonProps {\n  className?: string\n  variant?:\n    | 'primary'\n    | 'secondary'\n    | 'success'\n    | 'warning'\n    | 'link'\n    | 'outline'\n    | 'ghost'\n    | 'icon'\n    | 'withIcon'\n    | 'default'\n  size?: 'small' | 'medium' | 'large'\n  icon?: ReactNode\n}\n\nexport const SidebarToggleButton: React.FC<SidebarToggleButtonProps> = ({\n  className = '',\n  variant = 'default',\n  size = 'medium',\n  icon = <Menu />,\n  ...rest\n}) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      onClick={toggleSidebar}\n      className={cn(className)}\n      variant={variant}\n      size={size}\n      icon={icon}\n      {...rest}\n    />\n  )\n}\n",
            "success": true,
            "size": 937
          },
          {
            "filename": "index.ts",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Sidebar/index.ts",
            "content": "export * from './Sidebar'\nexport * from './SidebarHeader'\nexport * from './SidebarContainer'\nexport * from './SidebarFooter'\nexport * from './SidebarItem'\nexport * from './SidebarToggleButton'\nexport * from './SidebarContext'\n",
            "success": true,
            "size": 226
          }
        ]
      }
    },
    "skeleton": {
      "id": "skeleton",
      "name": "Skeleton",
      "path": "Skeleton",
      "dependencies": [],
      "utils": [
        "cn"
      ],
      "files": {
        "javascript": [
          {
            "filename": "Skeleton.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Skeleton/Skeleton.jsx",
            "content": "'use client'\nimport React from 'react'\nimport { cn } from '../../utils/cn'\n\nexport const Skeleton = ({\n  variation = 'text',\n  width,\n  height,\n  className = '',\n  ...rest\n}) => {\n  const getVariationStyle = () => {\n    switch (variation) {\n      case 'circular':\n        return 'rounded-full'\n      case 'rectangular':\n        return 'rounded-none'\n      case 'rounded-sm':\n        return 'rounded-md'\n      case 'text':\n      default:\n        return 'rounded-sm'\n    }\n  }\n\n  return (\n    <div\n      className={cn(\n        'bg-bg-light animate-pulse',\n        getVariationStyle(),\n        className\n      )}\n      style={{\n        width: width || '100%',\n        height: height || (variation === 'text' ? '1em' : '100%')\n      }}\n      {...rest}\n    ></div>\n  )\n}\n",
            "success": true,
            "size": 766
          },
          {
            "filename": "index.js",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Skeleton/index.js",
            "content": "export * from './Skeleton'\n",
            "success": true,
            "size": 27
          }
        ],
        "typescript": [
          {
            "filename": "Skeleton.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Skeleton/Skeleton.tsx",
            "content": "'use client'\nimport React from 'react'\nimport { cn } from '../../utils/cn'\n// import { motion } from 'framer-motion';\n\ntype SkeletonVariation = 'text' | 'circular' | 'rectangular' | 'rounded-sm'\n// type AnimationType = 'pulse' | 'wave' | 'shimmer';\n\ninterface SkeletonProps {\n  variation?: SkeletonVariation\n  width?: string | number\n  height?: string | number\n  className?: string\n}\n\nexport const Skeleton: React.FC<SkeletonProps> = ({\n  variation = 'text',\n  width,\n  height,\n  className = '',\n  ...rest\n}) => {\n  const getVariationStyle = () => {\n    switch (variation) {\n      case 'circular':\n        return 'rounded-full'\n      case 'rectangular':\n        return 'rounded-none'\n      case 'rounded-sm':\n        return 'rounded-md'\n      case 'text':\n      default:\n        return 'rounded-sm'\n    }\n  }\n\n  return (\n    <div\n      className={cn(\n        'bg-bg-light animate-pulse',\n        getVariationStyle(),\n        className\n      )}\n      style={{\n        width: width || '100%',\n        height: height || (variation === 'text' ? '1em' : '100%')\n      }}\n      {...rest}\n    ></div>\n  )\n}\n",
            "success": true,
            "size": 1100
          },
          {
            "filename": "index.ts",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Skeleton/index.ts",
            "content": "export * from './Skeleton'\n",
            "success": true,
            "size": 27
          }
        ]
      }
    },
    "slider": {
      "id": "slider",
      "name": "Slider",
      "path": "Slider",
      "dependencies": [],
      "utils": [
        "cn"
      ],
      "files": {
        "javascript": [
          {
            "filename": "Slider.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Slider/Slider.jsx",
            "content": "'use client'\nimport React, { useEffect, useRef, useState } from 'react'\nimport { cn } from '../../utils/cn'\n\nexport const Slider = ({\n  min = 0,\n  max = 100,\n  step = 1,\n  defaultValue,\n  onChange,\n  className = '',\n  disabled = false,\n  ...rest\n}) => {\n  const [values, setValues] = useState(defaultValue)\n  const sliderRef = useRef(null)\n\n  useEffect(() => {\n    if (onChange) {\n      onChange(values)\n    }\n  }, [values, onChange])\n\n  // Helper function to round value to nearest step\n  const roundToStep = value => {\n    const steps = Math.round((value - min) / step)\n    return Math.min(max, Math.max(min, min + steps * step))\n  }\n\n  const handleMouseDown = index => e => {\n    e.preventDefault()\n\n    const handleMouseMove = e => {\n      if (sliderRef.current) {\n        const rect = sliderRef.current.getBoundingClientRect()\n        const percentage = Math.max(\n          0,\n          Math.min(1, (e.clientX - rect.left) / rect.width)\n        )\n        const rawValue = percentage * (max - min) + min\n        const steppedValue = roundToStep(rawValue) // Round to nearest step\n\n        setValues(prevValues => {\n          const newValues = [...prevValues]\n          newValues[index] = steppedValue\n          return newValues.sort((a, b) => a - b)\n        })\n      }\n    }\n\n    const handleMouseUp = () => {\n      document.removeEventListener('mousemove', handleMouseMove)\n      document.removeEventListener('mouseup', handleMouseUp)\n    }\n\n    document.addEventListener('mousemove', handleMouseMove)\n    document.addEventListener('mouseup', handleMouseUp)\n  }\n\n  const getLeftPosition = value => {\n    return ((value - min) / (max - min)) * 100\n  }\n\n  return (\n    <div\n      className={cn(\n        'bg-bg-light relative h-2 w-full rounded-full',\n        disabled && 'pointer-events-none cursor-not-allowed opacity-50',\n        className\n      )}\n      ref={sliderRef}\n      {...rest}\n    >\n      <div\n        className='bg-primary absolute h-full rounded-full'\n        style={{\n          left: `${values.length === 1 ? '0' : getLeftPosition(values[0])}%`,\n          right: `${\n            values.length === 1\n              ? 100 - getLeftPosition(values[0])\n              : 100 - getLeftPosition(values[1])\n          }%`\n        }}\n      ></div>\n      {values.map((value, index) => (\n        <div\n          key={index}\n          className={cn(\n            'border-primary bg-primary-foreground absolute size-4 cursor-pointer rounded-full border-2'\n          )}\n          style={{\n            left: `calc(${getLeftPosition(value)}% - 0.5rem)`,\n            top: '-0.25rem'\n          }}\n          onMouseDown={handleMouseDown(index)}\n        ></div>\n      ))}\n    </div>\n  )\n}\n",
            "success": true,
            "size": 2682
          },
          {
            "filename": "index.js",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Slider/index.js",
            "content": "export * from './Slider'\n",
            "success": true,
            "size": 25
          }
        ],
        "typescript": [
          {
            "filename": "Slider.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Slider/Slider.tsx",
            "content": "'use client'\nimport React, { useEffect, useRef, useState } from 'react'\nimport { cn } from '../../utils/cn'\n\ninterface SliderProps {\n  min?: number // default 0\n  max?: number // default 100\n  step?: number // default 1\n  defaultValue: number[]\n  onChange?: (values: number[]) => void\n  className?: string\n  disabled?: boolean\n}\n\nexport const Slider: React.FC<SliderProps> = ({\n  min = 0,\n  max = 100,\n  step = 1,\n  defaultValue,\n  onChange,\n  className = '',\n  disabled = false,\n  ...rest\n}) => {\n  const [values, setValues] = useState<number[]>(defaultValue)\n  const sliderRef = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    if (onChange) {\n      onChange(values)\n    }\n  }, [values, onChange])\n\n  // Helper function to round value to nearest step\n  const roundToStep = (value: number): number => {\n    const steps = Math.round((value - min) / step)\n    return Math.min(max, Math.max(min, min + steps * step))\n  }\n\n  const handleMouseDown = (index: number) => (e: React.MouseEvent) => {\n    e.preventDefault()\n\n    const handleMouseMove = (e: MouseEvent) => {\n      if (sliderRef.current) {\n        const rect = sliderRef.current.getBoundingClientRect()\n        const percentage = Math.max(\n          0,\n          Math.min(1, (e.clientX - rect.left) / rect.width)\n        )\n        const rawValue = percentage * (max - min) + min\n        const steppedValue = roundToStep(rawValue) // Round to nearest step\n\n        setValues(prevValues => {\n          const newValues = [...prevValues]\n          newValues[index] = steppedValue\n          return newValues.sort((a, b) => a - b)\n        })\n      }\n    }\n\n    const handleMouseUp = () => {\n      document.removeEventListener('mousemove', handleMouseMove)\n      document.removeEventListener('mouseup', handleMouseUp)\n    }\n\n    document.addEventListener('mousemove', handleMouseMove)\n    document.addEventListener('mouseup', handleMouseUp)\n  }\n\n  const getLeftPosition = (value: number) => {\n    return ((value - min) / (max - min)) * 100\n  }\n\n  return (\n    <div\n      className={cn(\n        'bg-bg-light relative h-2 w-full rounded-full',\n        disabled && 'pointer-events-none cursor-not-allowed opacity-50',\n        className\n      )}\n      ref={sliderRef}\n      {...rest}\n    >\n      <div\n        className='bg-primary absolute h-full rounded-full'\n        style={{\n          left: `${values.length === 1 ? '0' : getLeftPosition(values[0])}%`,\n          right: `${\n            values.length === 1\n              ? 100 - getLeftPosition(values[0])\n              : 100 - getLeftPosition(values[1])\n          }%`\n        }}\n      ></div>\n      {values.map((value, index) => (\n        <div\n          key={index}\n          className={cn(\n            'border-primary bg-primary-foreground absolute size-4 cursor-pointer rounded-full border-2'\n          )}\n          style={{\n            left: `calc(${getLeftPosition(value)}% - 0.5rem)`,\n            top: '-0.25rem'\n          }}\n          onMouseDown={handleMouseDown(index)}\n        ></div>\n      ))}\n    </div>\n  )\n}\n",
            "success": true,
            "size": 3024
          },
          {
            "filename": "index.ts",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Slider/index.ts",
            "content": "export * from './Slider'\n",
            "success": true,
            "size": 25
          }
        ]
      }
    },
    "spinner": {
      "id": "spinner",
      "name": "Spinner",
      "path": "Spinner",
      "dependencies": [],
      "utils": [
        "cn"
      ],
      "files": {
        "javascript": [
          {
            "filename": "Spinner.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Spinner/Spinner.jsx",
            "content": "import { cn } from '../../utils/cn'\n\nexport const Spinner = ({\n  size = 'medium',\n  className = '',\n  thickness = 2,\n  ...rest\n}) => {\n  const sizeClasses = {\n    small: 'size-4',\n    medium: 'size-8',\n    large: 'size-12'\n  }\n\n  return (\n    <div\n      className={cn(\n        'text-primary inline-block animate-spin rounded-full border-solid border-current border-r-transparent align-[-0.125em] motion-reduce:animate-[spin_1.5s_linear_infinite]',\n        sizeClasses[size],\n        className\n      )}\n      style={{ borderWidth: `${thickness}px` }}\n      aria-label='loading...'\n      role='status'\n      {...rest}\n    ></div>\n  )\n}\n",
            "success": true,
            "size": 634
          },
          {
            "filename": "index.js",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Spinner/index.js",
            "content": "export * from './Spinner'\n",
            "success": true,
            "size": 26
          }
        ],
        "typescript": [
          {
            "filename": "Spinner.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Spinner/Spinner.tsx",
            "content": "import React, { HTMLAttributes } from 'react'\nimport { cn } from '../../utils/cn'\n\ninterface SpinnerProps extends HTMLAttributes<HTMLDivElement> {\n  size?: 'small' | 'medium' | 'large'\n  className?: string\n  thickness?: number\n}\n\nexport const Spinner: React.FC<SpinnerProps> = ({\n  size = 'medium',\n  className = '',\n  thickness = 2,\n  ...rest\n}) => {\n  const sizeClasses = {\n    small: 'size-4',\n    medium: 'size-8',\n    large: 'size-12'\n  }\n\n  return (\n    <div\n      className={cn(\n        'text-primary inline-block animate-spin rounded-full border-solid border-current border-r-transparent align-[-0.125em] motion-reduce:animate-[spin_1.5s_linear_infinite]',\n        sizeClasses[size],\n        className\n      )}\n      style={{ borderWidth: `${thickness}px` }}\n      aria-label='loading...'\n      role='status'\n      {...rest}\n    ></div>\n  )\n}\n",
            "success": true,
            "size": 851
          },
          {
            "filename": "index.ts",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Spinner/index.ts",
            "content": "export * from './Spinner'\n",
            "success": true,
            "size": 26
          }
        ]
      }
    },
    "stepper": {
      "id": "stepper",
      "name": "Stepper",
      "path": "Stepper",
      "dependencies": [],
      "utils": [
        "cn"
      ],
      "files": {
        "javascript": [
          {
            "filename": "Stepper.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Stepper/Stepper.jsx",
            "content": "'use client'\nimport React, { createContext, useContext, useState } from 'react'\n\nconst StepperContext = createContext(undefined)\n\nconst Stepper = ({ children, initialStep = 0 }) => {\n  const [activeStep, setActiveStep] = useState(initialStep)\n\n  const contextValue = {\n    activeStep,\n    setActiveStep,\n    totalSteps: React.Children.count(children)\n  }\n\n  return (\n    <StepperContext.Provider value={contextValue}>\n      <div className='flex items-center'>\n        {React.Children.map(children, (child, index) => (\n          <React.Fragment key={index}>\n            {index > 0 && (\n              <div\n                className={`mx-2 h-0.5 grow ${\n                  index <= activeStep ? 'bg-primary' : 'bg-bg'\n                }`}\n              />\n            )}\n            {React.cloneElement(child, {\n              ...child.props,\n              index\n            })}\n          </React.Fragment>\n        ))}\n      </div>\n    </StepperContext.Provider>\n  )\n}\n\nconst StepperItem = ({ icon, label, children, index }) => {\n  const context = useContext(StepperContext)\n  if (!context) {\n    throw new Error('StepperItem must be used within a Stepper')\n  }\n\n  const { activeStep, setActiveStep } = context\n  const completed = index !== undefined && index < activeStep\n  const active = index === activeStep\n\n  const getStateStyles = () => {\n    if (completed) return 'bg-primary text-primary-foreground'\n    if (active) return 'border-primary text-text'\n    return 'bg-bg border-border text-text-muted'\n  }\n\n  const handleClick = () => {\n    if (index !== undefined) {\n      setActiveStep(index)\n    }\n  }\n\n  return (\n    <div className='flex flex-col items-center'>\n      <div\n        className={`flex h-10 w-10 items-center justify-center rounded-full border-2 ${getStateStyles()} cursor-pointer`}\n        onClick={handleClick}\n      >\n        {completed ? '✓' : icon}\n      </div>\n      <p\n        className={`mt-2 text-sm ${\n          active ? 'text-text font-medium' : 'text-text-muted'\n        }`}\n      >\n        {label}\n      </p>\n      {children && <div className='mt-2'>{children}</div>}\n    </div>\n  )\n}\n\n// Custom hook to access the Stepper context\nconst useStepper = () => {\n  const context = useContext(StepperContext)\n  if (!context) {\n    throw new Error('useStepper must be used within a Stepper')\n  }\n  return context\n}\n\nexport { Stepper, StepperItem, useStepper }\n",
            "success": true,
            "size": 2381
          },
          {
            "filename": "index.js",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Stepper/index.js",
            "content": "export * from './Stepper'\n",
            "success": true,
            "size": 26
          }
        ],
        "typescript": [
          {
            "filename": "Stepper.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Stepper/Stepper.tsx",
            "content": "'use client'\nimport React, {\n  ReactElement,\n  ReactNode,\n  createContext,\n  useContext,\n  useState\n} from 'react'\n\ninterface StepperContextType {\n  activeStep: number\n  setActiveStep: (step: number) => void\n  totalSteps: number\n}\n\nconst StepperContext = createContext<StepperContextType | undefined>(undefined)\n\ninterface StepperProps {\n  children: ReactElement<StepperItemProps>[]\n  initialStep?: number\n}\n\ninterface StepperItemProps {\n  icon: ReactNode\n  label: string\n  children?: ReactNode\n  index?: number\n}\n\nconst Stepper: React.FC<StepperProps> = ({ children, initialStep = 0 }) => {\n  const [activeStep, setActiveStep] = useState(initialStep)\n\n  const contextValue: StepperContextType = {\n    activeStep,\n    setActiveStep,\n    totalSteps: React.Children.count(children)\n  }\n\n  return (\n    <StepperContext.Provider value={contextValue}>\n      <div className='flex items-center'>\n        {React.Children.map(children, (child, index) => (\n          <React.Fragment key={index}>\n            {index > 0 && (\n              <div\n                className={`mx-2 h-0.5 grow ${\n                  index <= activeStep ? 'bg-primary' : 'bg-bg'\n                }`}\n              />\n            )}\n            {React.cloneElement(child, {\n              ...child.props,\n              index\n            })}\n          </React.Fragment>\n        ))}\n      </div>\n    </StepperContext.Provider>\n  )\n}\n\nconst StepperItem: React.FC<StepperItemProps & { index?: number }> = ({\n  icon,\n  label,\n  children,\n  index\n}) => {\n  const context = useContext(StepperContext)\n  if (!context) {\n    throw new Error('StepperItem must be used within a Stepper')\n  }\n\n  const { activeStep, setActiveStep } = context\n  const completed = index !== undefined && index < activeStep\n  const active = index === activeStep\n\n  const getStateStyles = () => {\n    if (completed) return 'bg-primary text-primary-foreground'\n    if (active) return 'border-primary text-text'\n    return 'bg-bg border-border text-text-muted'\n  }\n\n  const handleClick = () => {\n    if (index !== undefined) {\n      setActiveStep(index)\n    }\n  }\n\n  return (\n    <div className='flex flex-col items-center'>\n      <div\n        className={`flex h-10 w-10 items-center justify-center rounded-full border-2 ${getStateStyles()} cursor-pointer`}\n        onClick={handleClick}\n      >\n        {completed ? '✓' : icon}\n      </div>\n      <p\n        className={`mt-2 text-sm ${active ? 'text-text font-medium' : 'text-text-muted'}`}\n      >\n        {label}\n      </p>\n      {children && <div className='mt-2'>{children}</div>}\n    </div>\n  )\n}\n\n// Custom hook to access the Stepper context\nconst useStepper = () => {\n  const context = useContext(StepperContext)\n  if (!context) {\n    throw new Error('useStepper must be used within a Stepper')\n  }\n  return context\n}\n\nexport { Stepper, StepperItem, useStepper }\n",
            "success": true,
            "size": 2847
          },
          {
            "filename": "index.ts",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Stepper/index.ts",
            "content": "export * from './Stepper'\n",
            "success": true,
            "size": 26
          }
        ]
      }
    },
    "switch": {
      "id": "switch",
      "name": "Switch",
      "path": "Switch",
      "dependencies": [],
      "utils": [
        "cn"
      ],
      "files": {
        "javascript": [
          {
            "filename": "Switch.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Switch/Switch.jsx",
            "content": "'use client'\n\nimport React from 'react'\nimport { cn } from '../../utils/cn'\n\nexport const Switch = ({\n  checked,\n  onChange,\n  disabled = false,\n  label,\n  size = 'medium',\n  className = '',\n  switchClassName = '',\n  activeClassName = '',\n  deactiveClassName = '',\n  activeSwitchClassName = '',\n  deactiveSwitchClassName = '',\n  labelClassName = '',\n  switchIconEnabled = true,\n  activeSwitchIcon,\n  deactiveSwitchIcon\n}) => {\n  const sizeClasses = {\n    small: 'w-[2rem] h-[1.15rem]',\n    medium: 'w-[2.5rem] h-[1.406rem]',\n    large: 'w-[3rem] h-[1.687rem]'\n  }\n\n  const switchSizeClasses = {\n    small: cn(\n      'size-[calc(1.15rem-3px)]',\n      checked\n        ? cn(\n            'translate-x-[calc(100%-2px)] transform bg-primary-foreground text-primary',\n            activeSwitchClassName\n          )\n        : cn(\n            'bg-primary text-primary-foreground translate-x-[2px]',\n            deactiveSwitchClassName\n          )\n    ),\n    medium: cn(\n      'size-[calc(1.406rem-3px)]',\n      checked\n        ? cn(\n            'translate-x-[calc(100%-2px)] transform bg-primary-foreground text-primary',\n            activeSwitchClassName\n          )\n        : cn(\n            'bg-primary text-primary-foreground translate-x-[2px]',\n            deactiveSwitchClassName\n          )\n    ),\n    large: cn(\n      'size-[calc(1.687rem-3px)]',\n      checked\n        ? cn(\n            'translate-x-[calc(100%-3px)] transform bg-primary-foreground text-primary',\n            activeSwitchClassName\n          )\n        : cn(\n            'bg-primary text-primary-foreground translate-x-[2px]',\n            deactiveSwitchClassName\n          )\n    )\n  }\n\n  return (\n    <div\n      className={cn(\n        'inline-flex cursor-pointer items-center',\n        disabled ? 'pointer-events-none cursor-not-allowed opacity-50' : '',\n        className\n      )}\n    >\n      <div\n        className={cn(\n          'shadow-xs inline-flex h-[1.15rem] w-8 shrink-0 items-center rounded-full border border-transparent outline-none transition-all',\n          sizeClasses[size],\n          checked\n            ? cn('bg-primary', activeClassName)\n            : cn('bg-primary-foreground', deactiveClassName, switchClassName)\n        )}\n        onClick={() => onChange(!checked)}\n      >\n        <div\n          className={cn(\n            'flex items-center justify-center rounded-full leading-none shadow-sm transition-transform duration-300 ease-in-out',\n            switchSizeClasses[size]\n          )}\n        >\n          {switchIconEnabled && activeSwitchIcon && (\n            <>\n              {deactiveSwitchIcon ? (\n                <>{checked ? activeSwitchIcon : deactiveSwitchIcon}</>\n              ) : (\n                activeSwitchIcon\n              )}\n            </>\n          )}\n        </div>\n      </div>\n      {label && (\n        <span className={cn('text-text ml-3', labelClassName)}>{label}</span>\n      )}\n    </div>\n  )\n}\n",
            "success": true,
            "size": 2914
          },
          {
            "filename": "index.js",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Switch/index.js",
            "content": "export * from './Switch'\n",
            "success": true,
            "size": 25
          }
        ],
        "typescript": [
          {
            "filename": "Switch.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Switch/Switch.tsx",
            "content": "'use client'\n\nimport React from 'react'\nimport { cn } from '../../utils/cn'\n\ninterface SwitchProps {\n  checked: boolean\n  onChange: (checked: boolean) => void\n  disabled?: boolean\n  label?: string\n  className?: string\n  switchClassName?: string\n  activeClassName?: string\n  deactiveClassName?: string\n  activeSwitchClassName?: string\n  deactiveSwitchClassName?: string\n  labelClassName?: string\n  switchIconEnabled?: boolean\n  activeSwitchIcon?: React.ReactNode\n  deactiveSwitchIcon?: React.ReactNode\n  size?: 'small' | 'medium' | 'large'\n}\n\nexport const Switch: React.FC<SwitchProps> = ({\n  checked,\n  onChange,\n  disabled = false,\n  label,\n  size = 'medium',\n  className = '',\n  switchClassName = '',\n  activeClassName = '',\n  deactiveClassName = '',\n  activeSwitchClassName = '',\n  deactiveSwitchClassName = '',\n  labelClassName = '',\n  switchIconEnabled = true,\n  activeSwitchIcon,\n  deactiveSwitchIcon\n}) => {\n  const sizeClasses = {\n    small: 'w-[2rem] h-[1.15rem]',\n    medium: 'w-[2.5rem] h-[1.406rem]',\n    large: 'w-[3rem] h-[1.687rem]'\n  }\n\n  const switchSizeClasses = {\n    small: cn(\n      'size-[calc(1.15rem-3px)]',\n      checked\n        ? cn(\n            'translate-x-[calc(100%-2px)] transform bg-primary-foreground text-primary',\n            activeSwitchClassName\n          )\n        : cn(\n            'bg-primary text-primary-foreground translate-x-[2px]',\n            deactiveSwitchClassName\n          )\n    ),\n    medium: cn(\n      'size-[calc(1.406rem-3px)]',\n      checked\n        ? cn(\n            'translate-x-[calc(100%-2px)] transform bg-primary-foreground text-primary',\n            activeSwitchClassName\n          )\n        : cn(\n            'bg-primary text-primary-foreground translate-x-[2px]',\n            deactiveSwitchClassName\n          )\n    ),\n    large: cn(\n      'size-[calc(1.687rem-3px)]',\n      checked\n        ? cn(\n            'translate-x-[calc(100%-3px)] transform bg-primary-foreground text-primary',\n            activeSwitchClassName\n          )\n        : cn(\n            'bg-primary text-primary-foreground translate-x-[2px]',\n            deactiveSwitchClassName\n          )\n    )\n  }\n\n  return (\n    <div\n      className={cn(\n        'inline-flex cursor-pointer items-center',\n        disabled ? 'pointer-events-none cursor-not-allowed opacity-50' : '',\n        className\n      )}\n    >\n      <div\n        className={cn(\n          'shadow-xs inline-flex h-[1.15rem] w-8 shrink-0 items-center rounded-full border border-transparent outline-none transition-all',\n          sizeClasses[size],\n          checked\n            ? cn('bg-primary', activeClassName)\n            : cn('bg-primary-foreground', deactiveClassName, switchClassName)\n        )}\n        onClick={() => onChange(!checked)}\n      >\n        <div\n          className={cn(\n            'flex items-center justify-center rounded-full leading-none shadow-sm transition-transform duration-300 ease-in-out',\n            switchSizeClasses[size]\n          )}\n        >\n          {switchIconEnabled && activeSwitchIcon && (\n            <>\n              {deactiveSwitchIcon ? (\n                <>{checked ? activeSwitchIcon : deactiveSwitchIcon}</>\n              ) : (\n                activeSwitchIcon\n              )}\n            </>\n          )}\n        </div>\n      </div>\n      {label && (\n        <span className={cn('text-text ml-3', labelClassName)}>{label}</span>\n      )}\n    </div>\n  )\n}\n",
            "success": true,
            "size": 3402
          },
          {
            "filename": "index.ts",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Switch/index.ts",
            "content": "export * from './Switch'\n",
            "success": true,
            "size": 25
          }
        ]
      }
    },
    "table": {
      "id": "table",
      "name": "Table",
      "path": "Table",
      "dependencies": [],
      "utils": [
        "cn"
      ],
      "files": {
        "javascript": [
          {
            "filename": "Table.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Table/Table.jsx",
            "content": "'use client'\n\nimport { cn } from '../../utils/cn'\nimport { TableProvider } from './TableContext'\n\nexport const Table = ({ children, className = '', ...rest }) => {\n  return (\n    <TableProvider>\n      <div className='relative w-full overflow-auto'>\n        <table className={cn('relative w-full', className)} {...rest}>\n          {children}\n        </table>\n      </div>\n    </TableProvider>\n  )\n}\n",
            "success": true,
            "size": 398
          },
          {
            "filename": "TableBody.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Table/TableBody.jsx",
            "content": "'use client'\n\nimport React, { ReactNode } from 'react'\nimport { cn } from '../../utils/cn'\n\nexport const TableBody = ({ children, className = '' }) => {\n  return (\n    <tbody className={cn('[&_tr:last-child]:border-0', className)}>\n      {children}\n    </tbody>\n  )\n}\n",
            "success": true,
            "size": 268
          },
          {
            "filename": "TableCaption.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Table/TableCaption.jsx",
            "content": "'use client'\n\nimport { cn } from '../../utils/cn'\n\nexport const TableCaption = ({\n  children,\n  className = '',\n  position = 'bottom',\n  ...rest\n}) => {\n  return (\n    <caption\n      className={cn(\n        'text-text-muted mb-2 mt-4 text-sm',\n        position === 'top' ? 'caption-top' : 'caption-bottom',\n        className\n      )}\n      {...rest}\n    >\n      {children}\n    </caption>\n  )\n}\n",
            "success": true,
            "size": 393
          },
          {
            "filename": "TableFooter.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Table/TableFooter.jsx",
            "content": "'use client'\n\nimport { cn } from '../../utils/cn'\n\nexport const TableFooter = ({ children, className = '', ...rest }) => {\n  return (\n    <tfoot\n      className={cn(\n        'bg-bg-light/50 border-t-border border-t font-medium [&>tr]:last:border-b-0',\n        className\n      )}\n      {...rest}\n    >\n      {children}\n    </tfoot>\n  )\n}\n",
            "success": true,
            "size": 337
          },
          {
            "filename": "TableHeader.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Table/TableHeader.jsx",
            "content": "'use client'\n\nimport { cn } from '../../utils/cn'\n\nexport const TableHeader = ({ children, className = '', ...rest }) => {\n  return (\n    <thead\n      className={cn('[&_tr]:border-b-border [&_tr]:border-b', className)}\n      {...rest}\n    >\n      {children}\n    </thead>\n  )\n}\n",
            "success": true,
            "size": 277
          },
          {
            "filename": "TableHeadCell.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Table/TableHeadCell.jsx",
            "content": "'use client'\n\nimport { cn } from '../../utils/cn'\n\nexport const TableHeadCell = ({ children, className = '' }) => {\n  return (\n    <th\n      className={cn(\n        'text-text h-10 whitespace-nowrap px-2 text-left align-middle font-medium',\n        className\n      )}\n    >\n      {children}\n    </th>\n  )\n}\n",
            "success": true,
            "size": 306
          },
          {
            "filename": "TableRow.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Table/TableRow.jsx",
            "content": "'use client'\n\nimport { cn } from '../../utils/cn'\n\nexport const TableRow = ({ children, className = '' }) => {\n  return (\n    <tr\n      className={cn(\n        'hover:bg-bg-light/50 border-b-border border-b transition-colors',\n        className\n      )}\n    >\n      {children}\n    </tr>\n  )\n}\n",
            "success": true,
            "size": 292
          },
          {
            "filename": "TableCell.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Table/TableCell.jsx",
            "content": "'use client'\n\nimport { cn } from '../../utils/cn'\n\nexport const TableCell = ({ children, className = '', colSpan, ...rest }) => {\n  return (\n    <td\n      className={cn('whitespace-nowrap p-2 align-middle text-sm', className)}\n      colSpan={colSpan}\n      {...rest}\n    >\n      {children}\n    </td>\n  )\n}\n",
            "success": true,
            "size": 306
          },
          {
            "filename": "TableContext.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Table/TableContext.jsx",
            "content": "'use client'\n\nimport { createContext, useContext } from 'react'\n\nconst TableContext = createContext(undefined)\n\nexport const TableProvider = ({ children }) => {\n  return <TableContext.Provider value={{}}>{children}</TableContext.Provider>\n}\n\nexport const useTable = () => {\n  const context = useContext(TableContext)\n  if (context === undefined) {\n    throw new Error('useTable must be used within a TableProvider')\n  }\n  return context\n}\n",
            "success": true,
            "size": 439
          },
          {
            "filename": "index.js",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Table/index.js",
            "content": "export * from './Table'\nexport * from './TableBody'\nexport * from './TableCaption'\nexport * from './TableFooter'\nexport * from './TableHeader'\nexport * from './TableRow'\nexport * from './TableCell'\nexport * from './TableHeadCell'\n",
            "success": true,
            "size": 230
          }
        ],
        "typescript": [
          {
            "filename": "Table.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Table/Table.tsx",
            "content": "'use client'\n\nimport React, { ReactNode } from 'react'\nimport { cn } from '../../utils/cn'\nimport { TableProvider } from './TableContext'\n\ninterface TableProps {\n  children: ReactNode\n  className?: string\n}\n\nexport const Table: React.FC<TableProps> = ({\n  children,\n  className = '',\n  ...rest\n}) => {\n  return (\n    <TableProvider>\n      <div className='relative w-full overflow-auto'>\n        <table className={cn('relative w-full', className)} {...rest}>\n          {children}\n        </table>\n      </div>\n    </TableProvider>\n  )\n}\n",
            "success": true,
            "size": 536
          },
          {
            "filename": "TableBody.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Table/TableBody.tsx",
            "content": "'use client'\n\nimport React, { ReactNode } from 'react'\nimport { cn } from '../../utils/cn'\n\ninterface TableBodyProps {\n  children: ReactNode\n  className?: string\n}\n\nexport const TableBody: React.FC<TableBodyProps> = ({\n  children,\n  className = ''\n}) => {\n  return (\n    <tbody className={cn('[&_tr:last-child]:border-0', className)}>\n      {children}\n    </tbody>\n  )\n}\n",
            "success": true,
            "size": 371
          },
          {
            "filename": "TableCaption.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Table/TableCaption.tsx",
            "content": "'use client'\n\nimport React, { ReactNode } from 'react'\nimport { cn } from '../../utils/cn'\n\ninterface TableCaptionProps {\n  children: ReactNode\n  className?: string\n  position?: 'top' | 'bottom'\n}\n\nexport const TableCaption: React.FC<TableCaptionProps> = ({\n  children,\n  className = '',\n  position = 'bottom',\n  ...rest\n}) => {\n  return (\n    <caption\n      className={cn(\n        'text-text-muted mb-2 mt-4 text-sm',\n        position === 'top' ? 'caption-top' : 'caption-bottom',\n        className\n      )}\n      {...rest}\n    >\n      {children}\n    </caption>\n  )\n}\n",
            "success": true,
            "size": 569
          },
          {
            "filename": "TableFooter.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Table/TableFooter.tsx",
            "content": "'use client'\n\nimport React, { ReactNode } from 'react'\nimport { cn } from '../../utils/cn'\n\ninterface TableFooterProps\n  extends React.HTMLAttributes<HTMLTableSectionElement> {\n  children: ReactNode\n  className?: string\n}\n\nexport const TableFooter: React.FC<TableFooterProps> = ({\n  children,\n  className = '',\n  ...rest\n}) => {\n  return (\n    <tfoot\n      className={cn(\n        'bg-bg-light/50 border-t-border border-t font-medium [&>tr]:last:border-b-0',\n        className\n      )}\n      {...rest}\n    >\n      {children}\n    </tfoot>\n  )\n}\n",
            "success": true,
            "size": 543
          },
          {
            "filename": "TableHeader.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Table/TableHeader.tsx",
            "content": "'use client'\n\nimport React, { ReactNode } from 'react'\nimport { cn } from '../../utils/cn'\n\ninterface TableHeaderProps {\n  children: ReactNode\n  className?: string\n}\n\nexport const TableHeader: React.FC<TableHeaderProps> = ({\n  children,\n  className = '',\n  ...rest\n}) => {\n  return (\n    <thead\n      className={cn('[&_tr]:border-b-border [&_tr]:border-b', className)}\n      {...rest}\n    >\n      {children}\n    </thead>\n  )\n}\n",
            "success": true,
            "size": 427
          },
          {
            "filename": "TableHeadCell.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Table/TableHeadCell.tsx",
            "content": "'use client'\n\nimport React, { ReactNode } from 'react'\nimport { cn } from '../../utils/cn'\n\ninterface TableHeadCellProps {\n  children: ReactNode\n  className?: string\n}\n\nexport const TableHeadCell: React.FC<TableHeadCellProps> = ({\n  children,\n  className = ''\n}) => {\n  return (\n    <th\n      className={cn(\n        'text-text h-10 whitespace-nowrap px-2 text-left align-middle font-medium',\n        className\n      )}\n    >\n      {children}\n    </th>\n  )\n}\n",
            "success": true,
            "size": 458
          },
          {
            "filename": "TableRow.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Table/TableRow.tsx",
            "content": "'use client'\n\nimport React, { ReactNode } from 'react'\nimport { cn } from '../../utils/cn'\n\ninterface TableRowProps {\n  children: ReactNode\n  className?: string\n}\n\nexport const TableRow: React.FC<TableRowProps> = ({\n  children,\n  className = ''\n}) => {\n  return (\n    <tr\n      className={cn(\n        'hover:bg-bg-light/50 border-b-border border-b transition-colors',\n        className\n      )}\n    >\n      {children}\n    </tr>\n  )\n}\n",
            "success": true,
            "size": 434
          },
          {
            "filename": "TableCell.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Table/TableCell.tsx",
            "content": "'use client'\n\nimport React, { ReactNode } from 'react'\nimport { cn } from '../../utils/cn'\n\ninterface TableCellProps extends React.HTMLAttributes<HTMLTableCellElement> {\n  children: ReactNode\n  className?: string\n  colSpan?: number\n}\n\nexport const TableCell: React.FC<TableCellProps> = ({\n  children,\n  className = '',\n  colSpan,\n  ...rest\n}) => {\n  return (\n    <td\n      className={cn('whitespace-nowrap p-2 align-middle text-sm', className)}\n      colSpan={colSpan}\n      {...rest}\n    >\n      {children}\n    </td>\n  )\n}\n",
            "success": true,
            "size": 524
          },
          {
            "filename": "TableContext.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Table/TableContext.tsx",
            "content": "'use client'\n\nimport React, { createContext, useContext } from 'react'\n\ninterface TableContextType {\n  // You can add shared properties or methods here if needed\n}\n\nconst TableContext = createContext<TableContextType | undefined>(undefined)\n\nexport const TableProvider: React.FC<{ children: React.ReactNode }> = ({\n  children\n}) => {\n  return <TableContext.Provider value={{}}>{children}</TableContext.Provider>\n}\n\nexport const useTable = (): TableContextType => {\n  const context = useContext(TableContext)\n  if (context === undefined) {\n    throw new Error('useTable must be used within a TableProvider')\n  }\n  return context\n}\n",
            "success": true,
            "size": 630
          },
          {
            "filename": "index.ts",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Table/index.ts",
            "content": "export * from './Table'\nexport * from './TableBody'\nexport * from './TableCaption'\nexport * from './TableFooter'\nexport * from './TableHeader'\nexport * from './TableRow'\nexport * from './TableCell'\nexport * from './TableHeadCell'\n",
            "success": true,
            "size": 230
          }
        ]
      }
    },
    "tabs": {
      "id": "tabs",
      "name": "Tabs",
      "path": "Tabs",
      "dependencies": [],
      "utils": [
        "cn"
      ],
      "files": {
        "javascript": [
          {
            "filename": "Tabs.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Tabs/Tabs.jsx",
            "content": "'use client'\n\nimport { useState } from 'react'\nimport { TabsProvider } from './TabsContext'\n\nexport const Tabs = ({ children, defaultActive, className, ...rest }) => {\n  const [activeTab, setActiveTab] = useState(defaultActive)\n\n  return (\n    <TabsProvider value={{ activeTab, setActiveTab }}>\n      <div className={className} {...rest}>\n        {children}\n      </div>\n    </TabsProvider>\n  )\n}\n",
            "success": true,
            "size": 397
          },
          {
            "filename": "TabList.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Tabs/TabList.jsx",
            "content": "'use client'\n\nimport { cn } from '../../utils/cn'\n\nexport const TabList = ({ children, className = '', ...rest }) => {\n  return (\n    <div\n      className={cn(\n        'bg-bg text-text mb-4 inline-flex items-center space-x-2 rounded-md p-[3px]',\n        className\n      )}\n      {...rest}\n    >\n      {children}\n    </div>\n  )\n}\n",
            "success": true,
            "size": 329
          },
          {
            "filename": "TabItem.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Tabs/TabItem.jsx",
            "content": "'use client'\n\nimport { cn } from '../../utils/cn'\nimport { useTabs } from './TabsContext'\n\nexport const TabItem = ({\n  children,\n  id,\n  disabled,\n  className = '',\n  activeClassName = '',\n  disabledClassName = '',\n  onClick,\n  ...rest\n}) => {\n  const { activeTab, setActiveTab } = useTabs()\n\n  return (\n    <button\n      className={cn(\n        'whitespace-nowrap rounded-md border border-transparent px-3 py-1.5 text-sm font-medium',\n        activeTab === id\n          ? cn('bg-bg-light border-border', activeClassName)\n          : disabled && cn('pointer-events-none opacity-50', disabledClassName),\n        className\n      )}\n      onClick={() => {\n        if (!disabled) {\n          setActiveTab(id)\n          onClick?.()\n        }\n      }}\n      {...rest}\n    >\n      {children}\n    </button>\n  )\n}\n",
            "success": true,
            "size": 804
          },
          {
            "filename": "TabContent.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Tabs/TabContent.jsx",
            "content": "'use client'\n\nimport { cn } from '../../utils/cn'\nimport { useTabs } from './TabsContext'\n\nexport const TabContent = ({ children, id, className = '', ...rest }) => {\n  const { activeTab } = useTabs()\n\n  if (activeTab !== id) return null\n\n  return (\n    <div className={cn(className)} {...rest}>\n      {children}\n    </div>\n  )\n}\n",
            "success": true,
            "size": 329
          },
          {
            "filename": "TabsContext.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Tabs/TabsContext.jsx",
            "content": "'use client'\n\nimport { createContext, useContext } from 'react'\n\nconst TabsContext = createContext(undefined)\n\nexport const TabsProvider = ({ children, value }) => {\n  return <TabsContext.Provider value={value}>{children}</TabsContext.Provider>\n}\n\nexport const useTabs = () => {\n  const context = useContext(TabsContext)\n  if (context === undefined) {\n    throw new Error('useTabs must be used within a TabsProvider')\n  }\n  return context\n}\n",
            "success": true,
            "size": 441
          },
          {
            "filename": "index.js",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Tabs/index.js",
            "content": "// Error: Could not fetch content for index.js",
            "success": false,
            "size": 0
          }
        ],
        "typescript": [
          {
            "filename": "Tabs.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Tabs/Tabs.tsx",
            "content": "'use client'\n\nimport React, { ReactNode, useState } from 'react'\nimport { TabsProvider } from './TabsContext'\n\ninterface TabsProps {\n  children: ReactNode\n  defaultActive: string\n  className?: string\n}\n\nexport const Tabs: React.FC<TabsProps> = ({\n  children,\n  defaultActive,\n  className,\n  ...rest\n}) => {\n  const [activeTab, setActiveTab] = useState(defaultActive)\n\n  return (\n    <TabsProvider value={{ activeTab, setActiveTab }}>\n      <div className={className} {...rest}>\n        {children}\n      </div>\n    </TabsProvider>\n  )\n}\n",
            "success": true,
            "size": 536
          },
          {
            "filename": "TabList.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Tabs/TabList.tsx",
            "content": "'use client'\n\nimport React, { ReactNode } from 'react'\nimport { cn } from '../../utils/cn'\n\ninterface TabListProps {\n  children: ReactNode\n  className?: string\n}\n\nexport const TabList: React.FC<TabListProps> = ({\n  children,\n  className = '',\n  ...rest\n}) => {\n  return (\n    <div\n      className={cn(\n        'bg-bg text-text mb-4 inline-flex items-center space-x-2 rounded-md p-[3px]',\n        className\n      )}\n      {...rest}\n    >\n      {children}\n    </div>\n  )\n}\n",
            "success": true,
            "size": 471
          },
          {
            "filename": "TabItem.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Tabs/TabItem.tsx",
            "content": "'use client'\n\nimport React, { ReactNode } from 'react'\nimport { cn } from '../../utils/cn'\nimport { useTabs } from './TabsContext'\n\ninterface TabItemProps {\n  children: ReactNode\n  id: string\n  disabled?: boolean\n  className?: string\n  activeClassName?: string\n  disabledClassName?: string\n  onClick?: () => void\n}\n\nexport const TabItem: React.FC<TabItemProps> = ({\n  children,\n  id,\n  disabled,\n  className = '',\n  activeClassName = '',\n  disabledClassName = '',\n  onClick,\n  ...rest\n}) => {\n  const { activeTab, setActiveTab } = useTabs()\n\n  return (\n    <button\n      className={cn(\n        'whitespace-nowrap rounded-md border border-transparent px-3 py-1.5 text-sm font-medium',\n        activeTab === id\n          ? cn('bg-bg-light border-border', activeClassName)\n          : disabled && cn('pointer-events-none opacity-50', disabledClassName),\n        className\n      )}\n      onClick={() => {\n        if (!disabled) {\n          setActiveTab(id)\n          onClick?.()\n        }\n      }}\n      {...rest}\n    >\n      {children}\n    </button>\n  )\n}\n",
            "success": true,
            "size": 1053
          },
          {
            "filename": "TabContent.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Tabs/TabContent.tsx",
            "content": "'use client'\n\nimport React, { ReactNode } from 'react'\nimport { cn } from '../../utils/cn'\nimport { useTabs } from './TabsContext'\n\ninterface TabContentProps {\n  children: ReactNode\n  id: string\n  className?: string\n}\n\nexport const TabContent: React.FC<TabContentProps> = ({\n  children,\n  id,\n  className = '',\n  ...rest\n}) => {\n  const { activeTab } = useTabs()\n\n  if (activeTab !== id) return null\n\n  return (\n    <div className={cn(className)} {...rest}>\n      {children}\n    </div>\n  )\n}\n",
            "success": true,
            "size": 492
          },
          {
            "filename": "TabsContext.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Tabs/TabsContext.tsx",
            "content": "'use client'\n\nimport React, { createContext, useContext } from 'react'\n\ninterface TabsContextType {\n  activeTab: string\n  setActiveTab: (tab: string) => void\n}\n\nconst TabsContext = createContext<TabsContextType | undefined>(undefined)\n\nexport const TabsProvider: React.FC<{\n  children: React.ReactNode\n  value: TabsContextType\n}> = ({ children, value }) => {\n  return <TabsContext.Provider value={value}>{children}</TabsContext.Provider>\n}\n\nexport const useTabs = (): TabsContextType => {\n  const context = useContext(TabsContext)\n  if (context === undefined) {\n    throw new Error('useTabs must be used within a TabsProvider')\n  }\n  return context\n}\n",
            "success": true,
            "size": 651
          },
          {
            "filename": "index.ts",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Tabs/index.ts",
            "content": "export * from './Tabs'\nexport * from './TabList'\nexport * from './TabItem'\nexport * from './TabContent'\n",
            "success": true,
            "size": 104
          }
        ]
      }
    },
    "textarea": {
      "id": "textarea",
      "name": "Textarea",
      "path": "Textarea",
      "dependencies": [],
      "utils": [
        "cn"
      ],
      "files": {
        "javascript": [
          {
            "filename": "Textarea.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Textarea/Textarea.jsx",
            "content": "'use client'\n\nimport { forwardRef } from 'react'\nimport { cn } from '../../utils/cn'\n\nexport const Textarea = forwardRef(\n  (\n    {\n      label,\n      error,\n      className = '',\n      labelClassName = '',\n      wrapperClassName = '',\n      errorClassName = '',\n      ...rest\n    },\n    ref\n  ) => {\n    return (\n      <fieldset className={cn('mb-4', wrapperClassName)}>\n        {label && (\n          <label\n            className={cn(\n              'text-text mb-1 block text-sm font-medium',\n              labelClassName\n            )}\n          >\n            {label}\n          </label>\n        )}\n        <textarea\n          ref={ref}\n          className={`placeholder:text-text-muted shadow-xs selection:bg-primary selection:text-primary-foreground focus-visible:border-border focus:outline-hidden focus:ring-border w-full rounded-md border px-3 py-2 focus:ring-2 ${\n            error ? 'border-error-500' : 'border-border'\n          } ${className})`}\n          {...rest}\n        />\n        {error && (\n          <p className={cn('text-error-600 mt-1 text-xs', errorClassName)}>\n            {error}\n          </p>\n        )}\n      </fieldset>\n    )\n  }\n)\n\nTextarea.displayName = 'Textarea'\n",
            "success": true,
            "size": 1194
          },
          {
            "filename": "index.js",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Textarea/index.js",
            "content": "export * from './Textarea'\n",
            "success": true,
            "size": 27
          }
        ],
        "typescript": [
          {
            "filename": "Textarea.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Textarea/Textarea.tsx",
            "content": "// ./app/src/components/Textarea/Textarea.tsx\n\n'use client'\n\nimport React, { forwardRef } from 'react'\nimport { cn } from '../../utils/cn'\n\ninterface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {\n  label?: string\n  error?: string\n  className?: string\n  labelClassName?: string\n  wrapperClassName?: string\n  errorClassName?: string\n}\n\nexport const Textarea = forwardRef<HTMLTextAreaElement, TextareaProps>(\n  (\n    {\n      label,\n      error,\n      className = '',\n      labelClassName = '',\n      wrapperClassName = '',\n      errorClassName = '',\n      ...rest\n    },\n    ref\n  ) => {\n    return (\n      <fieldset className={cn('mb-4', wrapperClassName)}>\n        {label && (\n          <label\n            className={cn(\n              'text-text mb-1 block text-sm font-medium',\n              labelClassName\n            )}\n          >\n            {label}\n          </label>\n        )}\n        <textarea\n          ref={ref}\n          className={`placeholder:text-text-muted shadow-xs selection:bg-primary selection:text-primary-foreground focus-visible:border-border focus:outline-hidden focus:ring-border w-full rounded-md border px-3 py-2 focus:ring-2 ${error ? 'border-error-500' : 'border-border'} ${className})`}\n          {...rest}\n        />\n        {error && (\n          <p className={cn('text-error-600 mt-1 text-xs', errorClassName)}>\n            {error}\n          </p>\n        )}\n      </fieldset>\n    )\n  }\n)\n\nTextarea.displayName = 'Textarea'\n",
            "success": true,
            "size": 1484
          },
          {
            "filename": "index.ts",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Textarea/index.ts",
            "content": "export * from './Textarea'\n",
            "success": true,
            "size": 27
          }
        ]
      }
    },
    "timeline": {
      "id": "timeline",
      "name": "Timeline",
      "path": "Timeline",
      "dependencies": [],
      "utils": [
        "cn"
      ],
      "files": {
        "javascript": [
          {
            "filename": "Timeline.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Timeline/Timeline.jsx",
            "content": "import React from 'react'\nimport { cn } from '../../utils/cn'\nimport { TimelineItem } from './TimelineItem'\n\nexport const Timeline = ({\n  children,\n  position = 'left',\n  lineStyle = 'solid',\n  className,\n  lineClassName,\n  ...rest\n}) => {\n  const isMixed = position === 'mixed'\n  return (\n    <div\n      className={cn(\n        'relative',\n        isMixed ? 'mx-auto max-w-3xl' : 'w-full',\n        className\n      )}\n      {...rest}\n    >\n      <div\n        className={cn(\n          'border-border absolute h-full border',\n          position === 'mixed'\n            ? 'left-1/2 -translate-x-1/2'\n            : position === 'left'\n              ? 'right-0'\n              : '',\n          lineStyle === 'dashed' ? 'border-dashed' : '',\n          lineClassName\n        )}\n      ></div>\n      <div className='relative'>\n        {React.Children.map(children, (child, index) => {\n          if (React.isValidElement(child) && child.type === TimelineItem) {\n            return React.cloneElement(child, {\n              position: isMixed\n                ? index % 2 === 0\n                  ? 'left'\n                  : 'right'\n                : position,\n              isMixed: isMixed\n            })\n          }\n          return child\n        })}\n      </div>\n    </div>\n  )\n}\n",
            "success": true,
            "size": 1268
          },
          {
            "filename": "TimelineItem.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Timeline/TimelineItem.jsx",
            "content": "import { cn } from '../../utils/cn'\n\nexport const TimelineItem = ({\n  children,\n  position = 'left',\n  isMixed = false,\n  icon,\n  className = '',\n  containerClassName = '',\n  dotClassName = '',\n  ...rest\n}) => {\n  const isLeft = position === 'left'\n\n  return (\n    <div\n      className={cn('mb-8 flex w-full items-center justify-between', className)}\n      {...rest}\n    >\n      <div\n        className={cn(\n          'bg-bg rounded-lg p-4 shadow-sm transition-all duration-200',\n          isLeft ? 'mr-auto' : 'order-1 ml-auto',\n          isMixed ? 'w-5/12' : 'w-[calc(100%-2rem)]',\n          containerClassName\n        )}\n      >\n        {children}\n      </div>\n\n      <div\n        className={cn(\n          'bg-bg-light text-text absolute z-10 flex h-8 w-8 shrink-0 -translate-x-1/2 items-center justify-center rounded-full',\n          isMixed ? 'left-1/2' : isLeft ? 'left-full' : '',\n          dotClassName\n        )}\n      >\n        {icon || <div className='bg-text h-3 w-3 rounded-full' />}\n      </div>\n    </div>\n  )\n}\n",
            "success": true,
            "size": 1026
          },
          {
            "filename": "index.js",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Timeline/index.js",
            "content": "export * from './Timeline'\nexport * from './TimelineItem'\n",
            "success": true,
            "size": 58
          }
        ],
        "typescript": [
          {
            "filename": "Timeline.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Timeline/Timeline.tsx",
            "content": "// components/Timeline/Timeline.tsx\nimport React from 'react'\nimport { cn } from '../../utils/cn'\nimport { TimelineItem } from './TimelineItem'\n\ntype TimelineProps = {\n  children: React.ReactNode\n  position?: 'left' | 'right' | 'mixed'\n  className?: string\n  lineClassName?: string\n  lineStyle?: 'solid' | 'dashed'\n}\n\nexport const Timeline: React.FC<TimelineProps> = ({\n  children,\n  position = 'left',\n  lineStyle = 'solid',\n  className,\n  lineClassName,\n  ...rest\n}) => {\n  const isMixed = position === 'mixed'\n  return (\n    <div\n      className={cn(\n        'relative',\n        isMixed ? 'mx-auto max-w-3xl' : 'w-full',\n        className\n      )}\n      {...rest}\n    >\n      <div\n        className={cn(\n          'border-border absolute h-full border',\n          position === 'mixed'\n            ? 'left-1/2 -translate-x-1/2'\n            : position === 'left'\n              ? 'right-0'\n              : '',\n          lineStyle === 'dashed' ? 'border-dashed' : '',\n          lineClassName\n        )}\n      ></div>\n      <div className='relative'>\n        {React.Children.map(children, (child, index) => {\n          if (\n            React.isValidElement<React.ComponentProps<typeof TimelineItem>>(\n              child\n            ) &&\n            child.type === TimelineItem\n          ) {\n            return React.cloneElement(child, {\n              position: isMixed\n                ? index % 2 === 0\n                  ? 'left'\n                  : 'right'\n                : position,\n              isMixed: isMixed\n            })\n          }\n          return child\n        })}\n      </div>\n    </div>\n  )\n}\n",
            "success": true,
            "size": 1609
          },
          {
            "filename": "TimelineItem.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Timeline/TimelineItem.tsx",
            "content": "// components/Timeline/TimelineItem.tsx\nimport React from 'react'\nimport { cn } from '../../utils/cn'\n\ntype TimelineItemProps = {\n  children: React.ReactNode\n  position?: 'left' | 'right'\n  isMixed?: boolean\n  icon?: React.ReactNode\n  className?: string\n  containerClassName?: string\n  dotClassName?: string\n}\n\nexport const TimelineItem: React.FC<TimelineItemProps> = ({\n  children,\n  position = 'left',\n  isMixed = false,\n  icon,\n  className = '',\n  containerClassName = '',\n  dotClassName = '',\n  ...rest\n}) => {\n  const isLeft = position === 'left'\n\n  return (\n    <div\n      className={cn('mb-8 flex w-full items-center justify-between', className)}\n      {...rest}\n    >\n      {/* Content wrapper */}\n      <div\n        className={cn(\n          'bg-bg rounded-lg p-4 shadow-sm transition-all duration-200',\n          isLeft ? 'mr-auto' : 'order-1 ml-auto',\n          isMixed ? 'w-5/12' : 'w-[calc(100%-2rem)]',\n          containerClassName\n        )}\n      >\n        {children}\n      </div>\n\n      {/* Dot */}\n      <div\n        className={cn(\n          'bg-bg-light text-text absolute z-10 flex h-8 w-8 shrink-0 -translate-x-1/2 items-center justify-center rounded-full',\n          isMixed ? 'left-1/2' : isLeft ? 'left-full' : '',\n          dotClassName\n        )}\n      >\n        {icon || <div className='bg-text h-3 w-3 rounded-full' />}\n      </div>\n    </div>\n  )\n}\n",
            "success": true,
            "size": 1377
          },
          {
            "filename": "index.ts",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Timeline/index.ts",
            "content": "export * from './Timeline'\nexport * from './TimelineItem'\n",
            "success": true,
            "size": 58
          }
        ]
      }
    },
    "toast": {
      "id": "toast",
      "name": "Toast",
      "path": "Toast",
      "dependencies": [
        "framer-motion"
      ],
      "utils": [
        "cn"
      ],
      "files": {
        "javascript": [
          {
            "filename": "Toast.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Toast/Toast.jsx",
            "content": "'use client'\nimport { AnimatePresence, motion } from 'framer-motion'\nimport React, { useCallback, useEffect, useState } from 'react'\nimport { cn } from '../../utils/cn'\n\nconst Toast = ({\n  className = '',\n  containerClassName = '',\n  message,\n  description,\n  messageClassName = '',\n  messageAreaClassName = '',\n  descriptionClassName = '',\n  type = 'info',\n  duration = 3000,\n  onClose,\n  action,\n  isNew = false,\n  toastId\n}) => {\n  useEffect(() => {\n    if (duration === Infinity) return\n\n    const timer = setTimeout(() => {\n      if (onClose) onClose()\n    }, duration)\n\n    return () => clearTimeout(timer)\n  }, [duration, onClose])\n\n  const handleClose = () => {\n    if (onClose) onClose()\n  }\n\n  const getBackgroundColor = () => {\n    switch (type) {\n      case 'success':\n        return 'bg-success text-success-foreground'\n      case 'error':\n        return 'bg-error text-error-foreground'\n      case 'warning':\n        return 'bg-warning text-warning-foreground'\n      default:\n        return 'bg-bg text-text'\n    }\n  }\n\n  return (\n    <motion.div\n      layoutId={toastId}\n      layout\n      initial={\n        isNew\n          ? {\n              opacity: 0,\n              x: 300,\n              scale: 0.9\n            }\n          : false\n      }\n      animate={{\n        opacity: 1,\n        x: 0,\n        scale: 1\n      }}\n      exit={{\n        opacity: 0,\n        x: 300,\n        scale: 0.9\n      }}\n      transition={{\n        duration: 0.3,\n        ease: [0.4, 0.0, 0.2, 1],\n        layout: { duration: 0.2, ease: 'easeInOut' }\n      }}\n      className={cn(\n        'w-[280px] rounded-md shadow-lg transition-colors',\n        getBackgroundColor(),\n        className\n      )}\n    >\n      <div\n        className={cn(\n          'flex items-start justify-between p-4',\n          containerClassName\n        )}\n      >\n        <div className={messageAreaClassName}>\n          <div className={cn('font-medium', messageClassName)}>{message}</div>\n          {description && (\n            <div\n              className={cn(\n                'text-text-muted mt-1 text-sm',\n                descriptionClassName\n              )}\n            >\n              {description}\n            </div>\n          )}\n        </div>\n        {action ? (\n          <button\n            onClick={action.onClick}\n            className={cn(\n              'ml-4 rounded-md px-2 py-1 text-sm font-medium',\n              action.buttonClassName\n            )}\n          >\n            {action.label}\n          </button>\n        ) : (\n          <button\n            onClick={handleClose}\n            className='ml-4 text-lg font-bold opacity-60 hover:opacity-100'\n            aria-label='Close'\n          >\n            &times;\n          </button>\n        )}\n      </div>\n    </motion.div>\n  )\n}\n\nexport const useToast = () => {\n  const [toasts, setToasts] = useState([])\n\n  const toast = useCallback(options => {\n    const id =\n      options.id ||\n      `toast-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\n    const newToast = {\n      ...options,\n      id,\n      isNew: true,\n      timestamp: Date.now()\n    }\n\n    setToasts(prev => {\n      const updatedPrev = prev.map(toast => ({ ...toast, isNew: false }))\n      return [newToast, ...updatedPrev]\n    })\n\n    setTimeout(() => {\n      setToasts(prev =>\n        prev.map(toast =>\n          toast.id === id ? { ...toast, isNew: false } : toast\n        )\n      )\n    }, 300)\n  }, [])\n\n  const removeToast = useCallback(id => {\n    setToasts(prev => prev.filter(toast => toast.id !== id))\n  }, [])\n\n  async function promise(promise, options) {\n    const loadingId = `loading-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\n\n    toast({\n      id: loadingId,\n      message: options.loading,\n      description: options.loadingDescription,\n      type: 'info',\n      duration: Infinity\n    })\n\n    try {\n      const result = await promise\n      removeToast(loadingId)\n      toast({\n        message: options.success,\n        description: options.successDescription,\n        type: 'success'\n      })\n      return result\n    } catch (error) {\n      removeToast(loadingId)\n      toast({\n        message: options.error,\n        description: options.errorDescription,\n        type: 'error'\n      })\n      throw error\n    }\n  }\n\n  const ToastContainer = ({ limit = 5 }) => (\n    <div className='fixed bottom-4 right-4 z-[9999] flex flex-col-reverse gap-2'>\n      <AnimatePresence>\n        {toasts.slice(0, limit).map(toastItem => (\n          <Toast\n            key={toastItem.id}\n            toastId={toastItem.id}\n            {...toastItem}\n            onClose={() => removeToast(toastItem.id)}\n          />\n        ))}\n      </AnimatePresence>\n    </div>\n  )\n\n  return { toast, ToastContainer, promise }\n}\n",
            "success": true,
            "size": 4737
          },
          {
            "filename": "index.js",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Toast/index.js",
            "content": "export * from './Toast.jsx'\n",
            "success": true,
            "size": 28
          }
        ],
        "typescript": [
          {
            "filename": "Toast.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Toast/Toast.tsx",
            "content": "'use client'\nimport { AnimatePresence, motion } from 'framer-motion'\nimport React, { useCallback, useEffect, useState } from 'react'\nimport { cn } from '../../utils/cn'\n\ninterface ToastAction {\n  label: string\n  onClick: () => void\n  buttonClassName?: string\n}\n\ninterface ToastProps {\n  className?: string\n  containerClassName?: string\n  message: string\n  description?: string\n  messageClassName?: string\n  messageAreaClassName?: string\n  descriptionClassName?: string\n  type?: 'success' | 'error' | 'info' | 'warning'\n  duration?: number\n  onClose?: () => void\n  action?: ToastAction\n  isNew?: boolean\n  toastId: string\n}\n\nconst Toast: React.FC<ToastProps> = ({\n  className = '',\n  containerClassName = '',\n  message,\n  description,\n  messageClassName = '',\n  messageAreaClassName = '',\n  descriptionClassName = '',\n  type = 'info',\n  duration = 3000,\n  onClose,\n  action,\n  isNew = false,\n  toastId\n}) => {\n  useEffect(() => {\n    if (duration === Infinity) return\n\n    const timer = setTimeout(() => {\n      if (onClose) onClose()\n    }, duration)\n\n    return () => clearTimeout(timer)\n  }, [duration, onClose])\n\n  const handleClose = () => {\n    if (onClose) onClose()\n  }\n\n  const getBackgroundColor = () => {\n    switch (type) {\n      case 'success':\n        return 'bg-success text-success-foreground'\n      case 'error':\n        return 'bg-error text-error-foreground'\n      case 'warning':\n        return 'bg-warning text-warning-foreground'\n      default:\n        return 'bg-bg text-text'\n    }\n  }\n\n  return (\n    <motion.div\n      layoutId={toastId}\n      layout\n      initial={\n        isNew\n          ? {\n              opacity: 0,\n              x: 300, // Only new toasts slide in from right\n              scale: 0.9\n            }\n          : false\n      } // Existing toasts don't get initial animation\n      animate={{\n        opacity: 1,\n        x: 0,\n        scale: 1\n      }}\n      exit={{\n        opacity: 0,\n        x: 300, // Only removed toast slides out to right\n        scale: 0.9\n      }}\n      transition={{\n        duration: 0.3,\n        ease: [0.4, 0.0, 0.2, 1],\n        layout: { duration: 0.2, ease: 'easeInOut' }\n      }}\n      className={cn(\n        'w-[280px] rounded-md shadow-lg transition-colors',\n        getBackgroundColor(),\n        className\n      )}\n    >\n      <div\n        className={cn(\n          'flex items-start justify-between p-4',\n          containerClassName\n        )}\n      >\n        <div className={messageAreaClassName}>\n          <div className={cn('font-medium', messageClassName)}>{message}</div>\n          {description && (\n            <div\n              className={cn(\n                'text-text-muted mt-1 text-sm',\n                descriptionClassName\n              )}\n            >\n              {description}\n            </div>\n          )}\n        </div>\n        {action ? (\n          <button\n            onClick={action.onClick}\n            className={cn(\n              'ml-4 rounded-md px-2 py-1 text-sm font-medium',\n              action.buttonClassName\n            )}\n          >\n            {action.label}\n          </button>\n        ) : (\n          <button\n            onClick={handleClose}\n            className='ml-4 text-lg font-bold opacity-60 hover:opacity-100'\n            aria-label='Close'\n          >\n            &times;\n          </button>\n        )}\n      </div>\n    </motion.div>\n  )\n}\n\ninterface ToastOptions {\n  className?: string\n  containerClassName?: string\n  message: string\n  description?: string\n  messageClassName?: string\n  messageAreaClassName?: string\n  descriptionClassName?: string\n  type?: 'success' | 'error' | 'info' | 'warning'\n  duration?: number\n  action?: ToastAction\n  id?: string\n}\n\ninterface ToastItem extends ToastOptions {\n  id: string\n  isNew: boolean\n  timestamp: number\n}\n\nexport const useToast = () => {\n  const [toasts, setToasts] = useState<ToastItem[]>([])\n\n  const toast = useCallback((options: ToastOptions) => {\n    const id =\n      options.id ||\n      `toast-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\n    const newToast: ToastItem = {\n      ...options,\n      id,\n      isNew: true,\n      timestamp: Date.now()\n    }\n\n    setToasts(prev => {\n      // Mark all existing toasts as not new\n      const updatedPrev = prev.map(toast => ({ ...toast, isNew: false }))\n      // Add new toast at the beginning (bottom visually)\n      return [newToast, ...updatedPrev]\n    })\n\n    // Mark toast as not new after initial animation\n    setTimeout(() => {\n      setToasts(prev =>\n        prev.map(toast =>\n          toast.id === id ? { ...toast, isNew: false } : toast\n        )\n      )\n    }, 300)\n  }, [])\n\n  const removeToast = useCallback((id: string) => {\n    setToasts(prev => prev.filter(toast => toast.id !== id))\n  }, [])\n\n  async function promise<T>(\n    promise: Promise<T>,\n    options: {\n      loading: string\n      loadingDescription?: string\n      success: string\n      successDescription?: string\n      error: string\n      errorDescription?: string\n    }\n  ): Promise<T> {\n    const loadingId = `loading-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\n\n    toast({\n      id: loadingId,\n      message: options.loading,\n      description: options.loadingDescription,\n      type: 'info',\n      duration: Infinity\n    })\n\n    try {\n      const result = await promise\n      removeToast(loadingId)\n      toast({\n        message: options.success,\n        description: options.successDescription,\n        type: 'success'\n      })\n      return result\n    } catch (error) {\n      removeToast(loadingId)\n      toast({\n        message: options.error,\n        description: options.errorDescription,\n        type: 'error'\n      })\n      throw error\n    }\n  }\n\n  const ToastContainer: React.FC<{ limit?: number }> = ({ limit = 5 }) => (\n    <div className='fixed bottom-4 right-4 z-[9999] flex flex-col-reverse gap-2'>\n      <AnimatePresence>\n        {toasts.slice(0, limit).map(toastItem => (\n          <Toast\n            key={toastItem.id}\n            toastId={toastItem.id}\n            {...toastItem}\n            onClose={() => removeToast(toastItem.id)}\n          />\n        ))}\n      </AnimatePresence>\n    </div>\n  )\n\n  return { toast, ToastContainer, promise }\n}\n",
            "success": true,
            "size": 6204
          },
          {
            "filename": "index.ts",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Toast/index.ts",
            "content": "export * from './Toast'\n",
            "success": true,
            "size": 24
          }
        ]
      }
    },
    "toggle-button": {
      "id": "toggle-button",
      "name": "ToggleButton",
      "path": "ToggleButton",
      "dependencies": [],
      "utils": [
        "cn"
      ],
      "files": {
        "javascript": [
          {
            "filename": "ToggleButton.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/ToggleButton/ToggleButton.jsx",
            "content": "'use client'\n\nimport { cn } from '../../utils/cn'\nimport { useToggleButtonGroup } from './ToggleButtonGroupContext'\n\nexport const ToggleButton = ({ value, children, className = '', ...rest }) => {\n  const { selectedValues, handleChange, outline, disabled, size } =\n    useToggleButtonGroup()\n\n  const isSelected = Array.isArray(selectedValues)\n    ? selectedValues.includes(value)\n    : selectedValues === value\n\n  const getButtonStyles = () => {\n    if (outline) {\n      return isSelected\n        ? 'border border-border bg-bg-light text-text'\n        : 'border border-border bg-transparent shadow-xs hover:bg-bg-light hover:text-text-muted'\n    }\n\n    return isSelected ? 'bg-bg-light text-text' : 'bg-transparent'\n  }\n\n  const getSizeStyles = () => {\n    switch (size) {\n      case 'small':\n        return 'h-8 px-1.5 min-w-8'\n      case 'medium':\n        return 'h-9 px-2 min-w-9'\n      case 'large':\n        return 'h-10 px-2.5 min-w-10'\n    }\n  }\n\n  return (\n    <button\n      className={cn(\n        'min-w-0 flex-1 shrink-0 rounded-none shadow-none first:rounded-l-md last:rounded-r-md',\n        getButtonStyles(),\n        getSizeStyles(),\n        outline && 'border-l-0 first:border-l',\n        className\n      )}\n      onClick={() => handleChange(value)}\n      disabled={disabled}\n      {...rest}\n    >\n      {children}\n    </button>\n  )\n}\n",
            "success": true,
            "size": 1349
          },
          {
            "filename": "Toggle.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/ToggleButton/Toggle.jsx",
            "content": "'use client'\nimport { useState } from 'react'\nimport { cn } from '../../utils/cn'\n\nexport const Toggle = ({\n  value,\n  children,\n  className = '',\n  defaultSelected = false,\n  outline = false,\n  disabled = false,\n  size = 'medium',\n  onChange,\n  ...rest\n}) => {\n  const [isSelected, setIsSelected] = useState(defaultSelected)\n\n  const handleClick = () => {\n    if (disabled) return\n    const newSelectedState = !isSelected\n    setIsSelected(newSelectedState)\n    onChange?.(value, newSelectedState)\n  }\n\n  const getButtonStyles = () => {\n    if (outline) {\n      return isSelected\n        ? 'border border-border bg-bg-light text-text'\n        : 'border border-border bg-transparent shadow-xs hover:bg-bg-light hover:text-text-muted'\n    }\n\n    return isSelected ? 'bg-bg-light text-text' : 'bg-transparent'\n  }\n\n  const getSizeStyles = () => {\n    switch (size) {\n      case 'small':\n        return 'h-8 px-1.5 min-w-8'\n      case 'medium':\n        return 'h-9 px-2 min-w-9'\n      case 'large':\n        return 'h-10 px-2.5 min-w-10'\n    }\n  }\n\n  return (\n    <button\n      className={cn(\n        'hover:bg-bg-light hover:text-text-muted focus-visible:border-ring focus-visible:ring-ring/50 inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium outline-none transition-[color,box-shadow] focus-visible:ring-[3px] disabled:pointer-events-none disabled:opacity-50',\n        getButtonStyles(),\n        getSizeStyles(),\n        className\n      )}\n      onClick={handleClick}\n      disabled={disabled}\n      {...rest}\n    >\n      {children}\n    </button>\n  )\n}\n",
            "success": true,
            "size": 1597
          },
          {
            "filename": "ToggleButtonGroup.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/ToggleButton/ToggleButtonGroup.jsx",
            "content": "'use client'\n\nimport { cn } from '../../utils/cn'\nimport { ToggleButtonGroupProvider } from './ToggleButtonGroupContext'\n\nexport const ToggleButtonGroup = ({\n  children,\n  type,\n  defaultValue,\n  onChange,\n  className = '',\n  outline = false,\n  disabled = false,\n  ...rest\n}) => {\n  return (\n    <ToggleButtonGroupProvider\n      type={type}\n      defaultValue={defaultValue}\n      onChange={onChange}\n      outline={outline}\n      disabled={disabled}\n    >\n      <div\n        className={cn(\n          'flex items-center rounded-md',\n          outline && 'shadow-xs',\n          className\n        )}\n        {...rest}\n      >\n        {children}\n      </div>\n    </ToggleButtonGroupProvider>\n  )\n}\n",
            "success": true,
            "size": 695
          },
          {
            "filename": "ToggleButtonGroupContext.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/ToggleButton/ToggleButtonGroupContext.jsx",
            "content": "'use client'\n\nimport { createContext, useContext, useState } from 'react'\n\nconst ToggleButtonGroupContext = createContext(undefined)\n\nexport const useToggleButtonGroup = () => {\n  const context = useContext(ToggleButtonGroupContext)\n  if (!context) {\n    throw new Error(\n      'useToggleButtonGroup must be used within a ToggleButtonGroupProvider'\n    )\n  }\n  return context\n}\n\nexport const ToggleButtonGroupProvider = ({\n  children,\n  type,\n  defaultValue = type === 'single' ? '' : [],\n  onChange,\n  outline = false,\n  disabled = false,\n  size = 'medium'\n}) => {\n  const [selectedValues, setSelectedValues] = useState(defaultValue)\n\n  const handleChange = value => {\n    let newValues\n\n    if (type === 'single') {\n      newValues = value === selectedValues ? '' : value\n    } else {\n      newValues = Array.isArray(selectedValues) ? [...selectedValues] : []\n      const index = newValues.indexOf(value)\n      if (index === -1) {\n        newValues.push(value)\n      } else {\n        newValues.splice(index, 1)\n      }\n    }\n\n    setSelectedValues(newValues)\n    onChange?.(newValues)\n  }\n\n  return (\n    <ToggleButtonGroupContext.Provider\n      value={{ type, selectedValues, handleChange, outline, disabled, size }}\n    >\n      {children}\n    </ToggleButtonGroupContext.Provider>\n  )\n}\n",
            "success": true,
            "size": 1290
          },
          {
            "filename": "index.js",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/ToggleButton/index.js",
            "content": "export * from './ToggleButton'\nexport * from './ToggleButtonGroup'\nexport * from './Toggle'\n",
            "success": true,
            "size": 92
          }
        ],
        "typescript": [
          {
            "filename": "ToggleButton.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/ToggleButton/ToggleButton.tsx",
            "content": "// ./app/src/components/Toggle/ToggleButton.tsx\n\n'use client'\n\nimport React from 'react'\nimport { cn } from '../../utils/cn'\nimport { useToggleButtonGroup } from './ToggleButtonGroupContext'\n\ninterface ToggleButtonProps {\n  value: string\n  children: React.ReactNode\n  className?: string\n}\n\nexport const ToggleButton: React.FC<ToggleButtonProps> = ({\n  value,\n  children,\n  className = '',\n  ...rest\n}) => {\n  const { selectedValues, handleChange, outline, disabled, size } =\n    useToggleButtonGroup()\n\n  const isSelected = Array.isArray(selectedValues)\n    ? selectedValues.includes(value)\n    : selectedValues === value\n\n  const getButtonStyles = () => {\n    if (outline) {\n      return isSelected\n        ? 'border border-border bg-bg-light text-text'\n        : 'border border-border bg-transparent shadow-xs hover:bg-bg-light hover:text-text-muted'\n    }\n\n    return isSelected ? 'bg-bg-light text-text' : 'bg-transparent'\n  }\n\n  const getSizeStyles = () => {\n    switch (size) {\n      case 'small':\n        return 'h-8 px-1.5 min-w-8'\n      case 'medium':\n        return 'h-9 px-2 min-w-9'\n      case 'large':\n        return 'h-10 px-2.5 min-w-10'\n    }\n  }\n\n  return (\n    <button\n      className={cn(\n        'min-w-0 flex-1 shrink-0 rounded-none shadow-none first:rounded-l-md last:rounded-r-md',\n        getButtonStyles(),\n        getSizeStyles(),\n        outline && 'border-l-0 first:border-l',\n        className\n      )}\n      onClick={() => handleChange(value)}\n      disabled={disabled}\n      {...rest}\n    >\n      {children}\n    </button>\n  )\n}\n",
            "success": true,
            "size": 1559
          },
          {
            "filename": "Toggle.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/ToggleButton/Toggle.tsx",
            "content": "'use client'\nimport React, { useState } from 'react'\nimport { cn } from '../../utils/cn'\n\ninterface ToggleProps {\n  value: string\n  children: React.ReactNode\n  className?: string\n  defaultSelected?: boolean\n  outline?: boolean\n  disabled?: boolean\n  size?: 'small' | 'medium' | 'large'\n  onChange?: (value: string, selected: boolean) => void\n}\n\nexport const Toggle: React.FC<ToggleProps> = ({\n  value,\n  children,\n  className = '',\n  defaultSelected = false,\n  outline = false,\n  disabled = false,\n  size = 'medium',\n  onChange,\n  ...rest\n}) => {\n  const [isSelected, setIsSelected] = useState(defaultSelected)\n\n  const handleClick = () => {\n    if (disabled) return\n    const newSelectedState = !isSelected\n    setIsSelected(newSelectedState)\n    onChange?.(value, newSelectedState)\n  }\n\n  const getButtonStyles = () => {\n    if (outline) {\n      return isSelected\n        ? 'border border-border bg-bg-light text-text'\n        : 'border border-border bg-transparent shadow-xs hover:bg-bg-light hover:text-text-muted'\n    }\n\n    return isSelected ? 'bg-bg-light text-text' : 'bg-transparent'\n  }\n\n  const getSizeStyles = () => {\n    switch (size) {\n      case 'small':\n        return 'h-8 px-1.5 min-w-8'\n      case 'medium':\n        return 'h-9 px-2 min-w-9'\n      case 'large':\n        return 'h-10 px-2.5 min-w-10'\n    }\n  }\n\n  return (\n    <button\n      className={cn(\n        'hover:bg-bg-light hover:text-text-muted focus-visible:border-ring focus-visible:ring-ring/50 inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium outline-none transition-[color,box-shadow] focus-visible:ring-[3px] disabled:pointer-events-none disabled:opacity-50',\n        getButtonStyles(),\n        getSizeStyles(),\n        className\n      )}\n      onClick={handleClick}\n      disabled={disabled}\n      {...rest}\n    >\n      {children}\n    </button>\n  )\n}\n",
            "success": true,
            "size": 1882
          },
          {
            "filename": "ToggleButtonGroup.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/ToggleButton/ToggleButtonGroup.tsx",
            "content": "// ./app/src/components/Toggle/ToggleButtonGroup.tsx\n'use client'\n\nimport { cn } from '../../utils/cn'\nimport { ToggleButtonGroupProvider } from './ToggleButtonGroupContext'\n\ninterface ToggleButtonGroupProps {\n  children: React.ReactNode\n  type: 'single' | 'multiple'\n  defaultValue?: string | string[]\n  onChange?: (value: string | string[]) => void\n  className?: string\n  outline?: boolean\n  disabled?: boolean\n}\n\nexport const ToggleButtonGroup: React.FC<ToggleButtonGroupProps> = ({\n  children,\n  type,\n  defaultValue,\n  onChange,\n  className = '',\n  outline = false,\n  disabled = false,\n  ...rest\n}) => {\n  return (\n    <ToggleButtonGroupProvider\n      type={type}\n      defaultValue={defaultValue}\n      onChange={onChange}\n      outline={outline}\n      disabled={disabled}\n    >\n      <div\n        className={cn(\n          'flex items-center rounded-md',\n          outline && 'shadow-xs',\n          className\n        )}\n        {...rest}\n      >\n        {children}\n      </div>\n    </ToggleButtonGroupProvider>\n  )\n}\n",
            "success": true,
            "size": 1023
          },
          {
            "filename": "ToggleButtonGroupContext.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/ToggleButton/ToggleButtonGroupContext.tsx",
            "content": "// ./app/src/components/Toggle/ToggleButtonGroupContext.tsx\n\n'use client'\n\nimport React, { createContext, useContext, useState, ReactNode } from 'react'\n\ntype ToggleButtonGroupType = 'single' | 'multiple'\n\ninterface ToggleButtonGroupContextType {\n  type: ToggleButtonGroupType\n  selectedValues: string | string[]\n  handleChange: (value: string) => void\n  outline?: boolean\n  disabled?: boolean\n  size?: 'small' | 'medium' | 'large'\n}\n\nconst ToggleButtonGroupContext = createContext<\n  ToggleButtonGroupContextType | undefined\n>(undefined)\n\nexport const useToggleButtonGroup = () => {\n  const context = useContext(ToggleButtonGroupContext)\n  if (!context) {\n    throw new Error(\n      'useToggleButtonGroup must be used within a ToggleButtonGroupProvider'\n    )\n  }\n  return context\n}\n\ninterface ToggleButtonGroupProviderProps {\n  children: ReactNode\n  type: ToggleButtonGroupType\n  defaultValue?: string | string[]\n  onChange?: (value: string | string[]) => void\n  outline?: boolean\n  disabled?: boolean\n  size?: 'small' | 'medium' | 'large'\n}\n\nexport const ToggleButtonGroupProvider: React.FC<\n  ToggleButtonGroupProviderProps\n> = ({\n  children,\n  type,\n  defaultValue = type === 'single' ? '' : [],\n  onChange,\n  outline = false,\n  disabled = false,\n  size = 'medium'\n}) => {\n  const [selectedValues, setSelectedValues] = useState<string | string[]>(\n    defaultValue\n  )\n\n  const handleChange = (value: string) => {\n    let newValues: string | string[]\n\n    if (type === 'single') {\n      newValues = value === selectedValues ? '' : value\n    } else {\n      newValues = Array.isArray(selectedValues) ? [...selectedValues] : []\n      const index = newValues.indexOf(value)\n      if (index === -1) {\n        newValues.push(value)\n      } else {\n        newValues.splice(index, 1)\n      }\n    }\n\n    setSelectedValues(newValues)\n    onChange?.(newValues)\n  }\n\n  return (\n    <ToggleButtonGroupContext.Provider\n      value={{ type, selectedValues, handleChange, outline, disabled, size }}\n    >\n      {children}\n    </ToggleButtonGroupContext.Provider>\n  )\n}\n",
            "success": true,
            "size": 2058
          },
          {
            "filename": "index.ts",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/ToggleButton/index.ts",
            "content": "export * from './ToggleButton'\nexport * from './ToggleButtonGroup'\nexport * from './Toggle'\n",
            "success": true,
            "size": 92
          }
        ]
      }
    },
    "tooltip": {
      "id": "tooltip",
      "name": "Tooltip",
      "path": "Tooltip",
      "dependencies": [
        "@radix-ui/react-tooltip"
      ],
      "utils": [
        "cn"
      ],
      "files": {
        "javascript": [
          {
            "filename": "Tooltip.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Tooltip/Tooltip.jsx",
            "content": "'use client'\n\nimport * as TooltipPrimitive from '@radix-ui/react-tooltip'\n\nimport { cn } from '../../utils/cn'\n\nfunction TooltipProvider({ delayDuration = 0, ...props }) {\n  return <TooltipPrimitive.Provider delayDuration={delayDuration} {...props} />\n}\n\nfunction Tooltip({ ...props }) {\n  return (\n    <TooltipProvider>\n      <TooltipPrimitive.Root {...props} />\n    </TooltipProvider>\n  )\n}\n\nfunction TooltipAction({ className, outline = false, ...props }) {\n  return (\n    <TooltipPrimitive.Trigger\n      className={cn(\n        'focus:outline-hidden focus-visible:border-ring focus-visible:ring-border hover:bg-bg-light/60 inline-flex cursor-pointer items-center justify-center gap-2 rounded-md px-4 py-2 font-medium transition duration-200 ease-in-out focus-visible:ring-1',\n        outline && 'border-border text-text bg-bg-light/30 border',\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TooltipContent({ className, sideOffset = 0, children, ...props }) {\n  return (\n    <TooltipPrimitive.Portal>\n      <TooltipPrimitive.Content\n        sideOffset={sideOffset}\n        className={cn(\n          'bg-primary text-primary-foreground origin-(--radix-tooltip-content-transform-origin) z-50 w-fit text-balance rounded-md px-3 py-1.5 text-xs',\n          className\n        )}\n        {...props}\n      >\n        {children}\n        <TooltipPrimitive.Arrow className='bg-primary fill-primary z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]' />\n      </TooltipPrimitive.Content>\n    </TooltipPrimitive.Portal>\n  )\n}\n\nexport { Tooltip, TooltipAction, TooltipContent, TooltipProvider }\n",
            "success": true,
            "size": 1619
          },
          {
            "filename": "index.js",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Tooltip/index.js",
            "content": "export * from './Tooltip'\n",
            "success": true,
            "size": 26
          }
        ],
        "typescript": [
          {
            "filename": "Tooltip.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Tooltip/Tooltip.tsx",
            "content": "'use client'\n\nimport * as TooltipPrimitive from '@radix-ui/react-tooltip'\nimport * as React from 'react'\n\nimport { cn } from '../../utils/cn'\n\ninterface TooltipActionProps\n  extends React.ComponentProps<typeof TooltipPrimitive.Trigger> {\n  outline?: boolean\n}\n\nfunction TooltipProvider({\n  delayDuration = 0,\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {\n  return <TooltipPrimitive.Provider delayDuration={delayDuration} {...props} />\n}\n\nfunction Tooltip({\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Root>) {\n  return (\n    <TooltipProvider>\n      <TooltipPrimitive.Root {...props} />\n    </TooltipProvider>\n  )\n}\n\nfunction TooltipAction({\n  className,\n  outline = false,\n  ...props\n}: TooltipActionProps) {\n  return (\n    <TooltipPrimitive.Trigger\n      className={cn(\n        'focus:outline-hidden focus-visible:border-ring focus-visible:ring-border hover:bg-bg-light/60 inline-flex cursor-pointer items-center justify-center gap-2 rounded-md px-4 py-2 font-medium transition duration-200 ease-in-out focus-visible:ring-1',\n        outline && 'border-border text-text bg-bg-light/30 border',\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TooltipContent({\n  className,\n  sideOffset = 0,\n  children,\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Content>) {\n  return (\n    <TooltipPrimitive.Portal>\n      <TooltipPrimitive.Content\n        sideOffset={sideOffset}\n        className={cn(\n          'bg-primary text-primary-foreground origin-(--radix-tooltip-content-transform-origin) z-50 w-fit text-balance rounded-md px-3 py-1.5 text-xs',\n          className\n        )}\n        {...props}\n      >\n        {children}\n        <TooltipPrimitive.Arrow className='bg-primary fill-primary z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]' />\n      </TooltipPrimitive.Content>\n    </TooltipPrimitive.Portal>\n  )\n}\n\nexport { Tooltip, TooltipAction, TooltipContent, TooltipProvider }\n",
            "success": true,
            "size": 1971
          },
          {
            "filename": "index.ts",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Tooltip/index.ts",
            "content": "export * from './Tooltip'\n",
            "success": true,
            "size": 26
          }
        ]
      }
    },
    "typography": {
      "id": "typography",
      "name": "Typography",
      "path": "Typography",
      "dependencies": [],
      "utils": [
        "cn"
      ],
      "files": {
        "javascript": [
          {
            "filename": "Typography.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Typography/Typography.jsx",
            "content": "import React from 'react'\nimport { cn } from '../../utils/cn'\n\nexport const Typography = ({\n  variant = '',\n  tagName = 'p',\n  children,\n  className = '',\n  ...rest\n}) => {\n  const TagName = tagName\n\n  const getStyles = () => {\n    switch (variant) {\n      case 'h1':\n        return 'text-h1'\n      case 'h2':\n        return 'text-h2'\n      case 'h3':\n        return 'text-h3'\n      case 'h4':\n        return 'text-h4'\n      case 'h5':\n        return 'text-h5'\n      case 'h6':\n        return 'text-h6'\n      case 'body-1':\n        return 'text-body-1'\n      case 'body-2':\n        return 'text-body-2'\n      case 'caption':\n        return 'text-caption'\n      case 'display-1':\n        return 'text-display-1'\n      case 'display-2':\n        return 'text-display-2'\n      default:\n        return ''\n    }\n  }\n\n  const styles = getStyles()\n\n  return (\n    <TagName className={cn('text-text-muted', styles, className)} {...rest}>\n      {children}\n    </TagName>\n  )\n}\n",
            "success": true,
            "size": 967
          },
          {
            "filename": "index.js",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Typography/index.js",
            "content": "export * from './Typography'\n",
            "success": true,
            "size": 29
          }
        ],
        "typescript": [
          {
            "filename": "Typography.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Typography/Typography.tsx",
            "content": "import React, { HTMLAttributes } from 'react'\nimport { cn } from '../../utils/cn'\n\ntype TypographyVariant =\n  | 'h1'\n  | 'h2'\n  | 'h3'\n  | 'h4'\n  | 'h5'\n  | 'h6'\n  | 'display-1'\n  | 'display-2'\n  | 'body-1'\n  | 'body-2'\n  | 'caption'\n\ninterface TypographyProps extends HTMLAttributes<HTMLDivElement> {\n  variant?: TypographyVariant\n  tagName?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'p' | 'caption' | 'span'\n  children?: React.ReactNode\n  className?: string\n}\n\nexport const Typography: React.FC<TypographyProps> = ({\n  variant = '',\n  tagName = 'p',\n  children,\n  className = '',\n  ...rest\n}) => {\n  const TagName = tagName\n\n  const getStyles = (): string => {\n    switch (variant) {\n      case 'h1':\n        return 'text-h1'\n      case 'h2':\n        return 'text-h2'\n      case 'h3':\n        return 'text-h3'\n      case 'h4':\n        return 'text-h4'\n      case 'h5':\n        return 'text-h5'\n      case 'h6':\n        return 'text-h6'\n      case 'body-1':\n        return 'text-body-1'\n      case 'body-2':\n        return 'text-body-2'\n      case 'caption':\n        return 'text-caption'\n      case 'display-1':\n        return 'text-display-1'\n      case 'display-2':\n        return 'text-display-2'\n      default:\n        return ''\n    }\n  }\n\n  const styles = getStyles()\n\n  return (\n    <TagName className={cn('text-text-muted', styles, className)} {...rest}>\n      {children}\n    </TagName>\n  )\n}\n",
            "success": true,
            "size": 1403
          },
          {
            "filename": "index.ts",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Typography/index.ts",
            "content": "export * from './Typography'\n",
            "success": true,
            "size": 29
          }
        ]
      }
    },
    "upload": {
      "id": "upload",
      "name": "Upload",
      "path": "Upload",
      "dependencies": [
        "lucide-react"
      ],
      "utils": [
        "cn"
      ],
      "files": {
        "javascript": [
          {
            "filename": "Upload.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Upload/Upload.jsx",
            "content": "'use client'\n\nimport { Trash2 } from 'lucide-react'\nimport { useRef, useState } from 'react'\nimport { cn } from '../../utils/cn'\n\nexport const FileUpload = ({\n  onFileSelect,\n  accept = '*',\n  multiple = false,\n  maxFiles = 1,\n  maxFileSize,\n  selectedFiles = [],\n  content,\n  uploadIcon,\n  deleteButton,\n  uploadIconClassName = '',\n  deleteIconClassName = '',\n  ...rest\n}) => {\n  const [dragActive, setDragActive] = useState(false)\n  const [files, setFiles] = useState(selectedFiles)\n  const [error, setError] = useState('')\n  const inputRef = useRef(null)\n\n  const validateFile = file => {\n    if (maxFileSize && file.size > maxFileSize * 1024 * 1024) {\n      setError(`File size exceeds ${maxFileSize}MB limit`)\n      return false\n    }\n\n    if (accept !== '*') {\n      const acceptedTypes = accept.split(',').map(type => type.trim())\n      const fileType = file.type || `/*.${file.name.split('.').pop()}`\n      if (\n        !acceptedTypes.some(type =>\n          fileType.match(new RegExp(type.replace('*', '.*')))\n        )\n      ) {\n        setError(`File type not accepted. Accepted types: ${accept}`)\n        return false\n      }\n    }\n\n    return true\n  }\n\n  const handleFiles = newFiles => {\n    setError('')\n    const validFiles = []\n\n    for (let i = 0; i < newFiles.length; i++) {\n      if (files.length + validFiles.length >= maxFiles) {\n        setError(`Maximum ${maxFiles} files allowed`)\n        break\n      }\n\n      if (validateFile(newFiles[i])) {\n        validFiles.push(newFiles[i])\n      }\n    }\n\n    if (validFiles.length > 0) {\n      const updatedFiles = multiple ? [...files, ...validFiles] : validFiles\n      setFiles(updatedFiles)\n      onFileSelect(updatedFiles)\n    }\n  }\n\n  const handleChange = e => {\n    e.preventDefault()\n    if (e.target.files) {\n      handleFiles(e.target.files)\n    }\n  }\n\n  const handleDrop = e => {\n    e.preventDefault()\n    e.stopPropagation()\n    setDragActive(false)\n    if (e.dataTransfer.files) {\n      handleFiles(e.dataTransfer.files)\n    }\n  }\n\n  const handleDrag = e => {\n    e.preventDefault()\n    e.stopPropagation()\n    if (e.type === 'dragenter' || e.type === 'dragover') {\n      setDragActive(true)\n    } else if (e.type === 'dragleave') {\n      setDragActive(false)\n    }\n  }\n\n  const removeFile = indexToRemove => {\n    const updatedFiles = files.filter((_, index) => index !== indexToRemove)\n    setFiles(updatedFiles)\n    onFileSelect(updatedFiles)\n  }\n\n  const onButtonClick = () => {\n    inputRef.current?.click()\n  }\n\n  return (\n    <div className='w-full' {...rest}>\n      <div\n        className={`border-border hover:bg-bg-light/50 flex h-64 w-full cursor-pointer flex-col items-center justify-center rounded-lg border border-dashed transition-all duration-200 ${\n          dragActive ? 'bg-bg-light/50' : ''\n        }`}\n        onDragEnter={handleDrag}\n        onDragLeave={handleDrag}\n        onDragOver={handleDrag}\n        onDrop={handleDrop}\n        onClick={onButtonClick}\n      >\n        <input\n          ref={inputRef}\n          type='file'\n          className='hidden'\n          multiple={multiple}\n          accept={accept}\n          onChange={handleChange}\n        />\n        {!content && (\n          <>\n            {uploadIcon && (\n              <span className={cn('', uploadIconClassName)}>{uploadIcon}</span>\n            )}\n            {!uploadIcon && (\n              <svg\n                className={cn('text-text mb-3 h-10 w-10', uploadIconClassName)}\n                fill='none'\n                stroke='currentColor'\n                viewBox='0 0 24 24'\n                xmlns='http://www.w3.org/2000/svg'\n              >\n                <path\n                  strokeLinecap='round'\n                  strokeLinejoin='round'\n                  strokeWidth='2'\n                  d='M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12'\n                ></path>\n              </svg>\n            )}\n            <p className='text-body1 text-text mb-2'>\n              <span className='font-semibold'>Click to upload</span> or drag and\n              drop\n            </p>\n            <p className='text-text-muted text-xs'>\n              {multiple ? `Upload up to ${maxFiles} files` : 'Upload a file'}\n              {maxFileSize && ` (Max size: ${maxFileSize}MB)`}\n            </p>\n          </>\n        )}\n        {error && <p className='text-error-500 mt-2 text-xs'>{error}</p>}\n      </div>\n\n      {/* Selected Files List */}\n      {files.length > 0 && (\n        <div className='mt-4'>\n          <h4 className='text-text mb-2 text-sm font-medium'>\n            Selected Files:\n          </h4>\n          <ul className='space-y-2'>\n            {files.map((file, index) => (\n              <li\n                key={`${file.name}-${index}`}\n                className='bg-bg-light text-text flex items-center justify-between rounded-lg p-2 px-4'\n              >\n                <span className='text-sm'>{file.name}</span>\n                <button\n                  onClick={e => {\n                    e.stopPropagation()\n                    removeFile(index)\n                  }}\n                  className='text-error'\n                >\n                  {deleteButton ? (\n                    deleteButton\n                  ) : (\n                    <Trash2 className={cn('h-4 w-4', deleteIconClassName)} />\n                  )}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  )\n}\n",
            "success": true,
            "size": 5467
          },
          {
            "filename": "index.js",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/aspect-ui/Upload/index.js",
            "content": "export * from './Upload'\n",
            "success": true,
            "size": 25
          }
        ],
        "typescript": [
          {
            "filename": "Upload.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Upload/Upload.tsx",
            "content": "// C:\\All File\\React Project\\aspect-ui-tsx\\app\\src\\components\\Upload\\Upload.tsx\n\n'use client'\n\nimport { Trash2 } from 'lucide-react'\nimport React, { ChangeEvent, useRef, useState } from 'react'\nimport { cn } from '../../utils/cn'\n\ninterface FileUploadProps {\n  onFileSelect: (files: File[]) => void\n  accept?: string\n  multiple?: boolean\n  maxFiles?: number\n  maxFileSize?: number\n  selectedFiles?: File[]\n  content?: React.ReactNode\n  uploadIcon?: React.ReactNode\n  deleteButton?: React.ReactNode\n  uploadIconClassName?: string\n  deleteIconClassName?: string\n}\n\nexport const FileUpload: React.FC<FileUploadProps> = ({\n  onFileSelect,\n  accept = '*',\n  multiple = false,\n  maxFiles = 1,\n  maxFileSize,\n  selectedFiles = [],\n  content,\n  uploadIcon,\n  deleteButton,\n  uploadIconClassName = '',\n  deleteIconClassName = '',\n  ...rest\n}) => {\n  const [dragActive, setDragActive] = useState(false)\n  const [files, setFiles] = useState<File[]>(selectedFiles)\n  const [error, setError] = useState<string>('')\n  const inputRef = useRef<HTMLInputElement>(null)\n\n  const validateFile = (file: File): boolean => {\n    if (maxFileSize && file.size > maxFileSize * 1024 * 1024) {\n      // Convert MB to bytes\n      setError(`File size exceeds ${maxFileSize}MB limit`)\n      return false\n    }\n\n    if (accept !== '*') {\n      const acceptedTypes = accept.split(',').map(type => type.trim())\n      const fileType = file.type || `/*.${file.name.split('.').pop()}`\n      if (\n        !acceptedTypes.some(type =>\n          fileType.match(new RegExp(type.replace('*', '.*')))\n        )\n      ) {\n        setError(`File type not accepted. Accepted types: ${accept}`)\n        return false\n      }\n    }\n\n    return true\n  }\n\n  const handleFiles = (newFiles: FileList) => {\n    setError('')\n    const validFiles: File[] = []\n\n    for (let i = 0; i < newFiles.length; i++) {\n      if (files.length + validFiles.length >= maxFiles) {\n        setError(`Maximum ${maxFiles} files allowed`)\n        break\n      }\n\n      if (validateFile(newFiles[i])) {\n        validFiles.push(newFiles[i])\n      }\n    }\n\n    if (validFiles.length > 0) {\n      const updatedFiles = multiple ? [...files, ...validFiles] : validFiles\n      setFiles(updatedFiles)\n      onFileSelect(updatedFiles)\n    }\n  }\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    e.preventDefault()\n    if (e.target.files) {\n      handleFiles(e.target.files)\n    }\n  }\n\n  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault()\n    e.stopPropagation()\n    setDragActive(false)\n    if (e.dataTransfer.files) {\n      handleFiles(e.dataTransfer.files)\n    }\n  }\n\n  const handleDrag = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault()\n    e.stopPropagation()\n    if (e.type === 'dragenter' || e.type === 'dragover') {\n      setDragActive(true)\n    } else if (e.type === 'dragleave') {\n      setDragActive(false)\n    }\n  }\n\n  const removeFile = (indexToRemove: number) => {\n    const updatedFiles = files.filter((_, index) => index !== indexToRemove)\n    setFiles(updatedFiles)\n    onFileSelect(updatedFiles)\n  }\n\n  const onButtonClick = () => {\n    inputRef.current?.click()\n  }\n\n  return (\n    <div className='w-full' {...rest}>\n      <div\n        className={`border-border hover:bg-bg-light/50 flex h-64 w-full cursor-pointer flex-col items-center justify-center rounded-lg border border-dashed transition-all duration-200 ${\n          dragActive ? 'bg-bg-light/50' : ''\n        }`}\n        onDragEnter={handleDrag}\n        onDragLeave={handleDrag}\n        onDragOver={handleDrag}\n        onDrop={handleDrop}\n        onClick={onButtonClick}\n      >\n        <input\n          ref={inputRef}\n          type='file'\n          className='hidden'\n          multiple={multiple}\n          accept={accept}\n          onChange={handleChange}\n        />\n        {!content && (\n          <>\n            {uploadIcon && (\n              <span className={cn('', uploadIconClassName)}>{uploadIcon}</span>\n            )}\n            {!uploadIcon && (\n              <svg\n                className={cn('text-text mb-3 h-10 w-10', uploadIconClassName)}\n                fill='none'\n                stroke='currentColor'\n                viewBox='0 0 24 24'\n                xmlns='http://www.w3.org/2000/svg'\n              >\n                <path\n                  strokeLinecap='round'\n                  strokeLinejoin='round'\n                  strokeWidth='2'\n                  d='M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12'\n                ></path>\n              </svg>\n            )}\n            <p className='text-body1 text-text mb-2'>\n              <span className='font-semibold'>Click to upload</span> or drag and\n              drop\n            </p>\n            <p className='text-text-muted text-xs'>\n              {multiple ? `Upload up to ${maxFiles} files` : 'Upload a file'}\n              {maxFileSize && ` (Max size: ${maxFileSize}MB)`}\n            </p>\n          </>\n        )}\n        {error && <p className='text-error-500 mt-2 text-xs'>{error}</p>}\n      </div>\n\n      {/* Selected Files List */}\n      {files.length > 0 && (\n        <div className='mt-4'>\n          <h4 className='text-text mb-2 text-sm font-medium'>\n            Selected Files:\n          </h4>\n          <ul className='space-y-2'>\n            {files.map((file, index) => (\n              <li\n                key={`${file.name}-${index}`}\n                className='bg-bg-light text-text flex items-center justify-between rounded-lg p-2 px-4'\n              >\n                <span className='text-sm'>{file.name}</span>\n                <button\n                  onClick={e => {\n                    e.stopPropagation()\n                    removeFile(index)\n                  }}\n                  className='text-error'\n                >\n                  {deleteButton ? (\n                    deleteButton\n                  ) : (\n                    <Trash2 className={cn('h-4 w-4', deleteIconClassName)} />\n                  )}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  )\n}\n",
            "success": true,
            "size": 6140
          },
          {
            "filename": "index.ts",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/aspect-ui/Upload/index.ts",
            "content": "export * from './Upload'\n",
            "success": true,
            "size": 25
          }
        ]
      }
    }
  },
  "utils": {
    "cn": {
      "id": "cn",
      "name": "cn",
      "path": "utils",
      "dependencies": [
        "clsx",
        "tailwind-merge"
      ],
      "files": {
        "javascript": [
          {
            "filename": "cn.js",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/utils/cn.js",
            "content": "import { clsx } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nexport function cn(...inputs) {\n  return twMerge(clsx(inputs))\n}\n",
            "success": true,
            "size": 135
          }
        ],
        "typescript": [
          {
            "filename": "cn.ts",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/utils/cn.ts",
            "content": "import { clsx, type ClassValue } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
            "success": true,
            "size": 166
          }
        ]
      }
    },
    "portal": {
      "id": "portal",
      "name": "Portal",
      "path": "utils",
      "dependencies": [],
      "files": {
        "javascript": [
          {
            "filename": "Portal.jsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/javascript/components/utils/Portal.jsx",
            "content": "'use client'\nimport { createPortal } from 'react-dom'\n\nexport const Portal = ({ children }) => {\n  return createPortal(children, document.body)\n}\n",
            "success": true,
            "size": 146
          }
        ],
        "typescript": [
          {
            "filename": "Portal.tsx",
            "url": "https://raw.githubusercontent.com/NafisMahmudAyon/aspect-ui-components-folders/typescript/components/utils/Portal.tsx",
            "content": "'use client'\n\nimport { ReactNode } from 'react'\nimport { createPortal } from 'react-dom'\n\nexport const Portal = ({ children }: { children: ReactNode }) => {\n  return createPortal(children, document.body)\n}\n",
            "success": true,
            "size": 206
          }
        ]
      }
    }
  },
  "metadata": {
    "lastUpdated": "2025-08-11T17:23:16.715Z",
    "totalComponents": 39,
    "totalUtils": 2,
    "githubRepo": "NafisMahmudAyon/aspect-ui-components-folders"
  }
}